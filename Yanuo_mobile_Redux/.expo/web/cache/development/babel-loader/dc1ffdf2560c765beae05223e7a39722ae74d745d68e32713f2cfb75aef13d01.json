{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nvar _UIManagerAny$getView, _UIManagerAny$getView2, _UIManagerAny$getCons;\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport UIManager from \"react-native-web/dist/exports/UIManager\";\nimport DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport { customDirectEventTypes } from './customDirectEventTypes';\nimport deepEqual from 'lodash/isEqual';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport { State } from '../State';\nimport { handlerIDToTag, getNextHandlerTag, registerOldGestureHandler } from './handlersRegistry';\nimport { filterConfig, findNodeHandle, scheduleFlushOperations } from './gestureHandlerCommon';\nimport { isFabric, isJestEnv, tagMessage } from '../utils';\nimport { ActionType } from '../ActionType';\nimport { PressabilityDebugView } from './PressabilityDebugView';\nimport GestureHandlerRootViewContext from '../GestureHandlerRootViewContext';\nimport { ghQueueMicrotask } from '../ghQueueMicrotask';\nconst UIManagerAny = UIManager;\ncustomDirectEventTypes.topGestureHandlerEvent = {\n  registrationName: 'onGestureHandlerEvent'\n};\nconst customGHEventsConfigFabricAndroid = {\n  topOnGestureHandlerEvent: {\n    registrationName: 'onGestureHandlerEvent'\n  },\n  topOnGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange'\n  }\n};\nconst customGHEventsConfig = _objectSpread({\n  onGestureHandlerEvent: {\n    registrationName: 'onGestureHandlerEvent'\n  },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange'\n  }\n}, isFabric() && Platform.OS === 'android' && customGHEventsConfigFabricAndroid);\nUIManagerAny.genericDirectEventTypes = _objectSpread(_objectSpread({}, UIManagerAny.genericDirectEventTypes), customGHEventsConfig);\nconst UIManagerConstants = (_UIManagerAny$getView = (_UIManagerAny$getView2 = UIManagerAny.getViewManagerConfig) === null || _UIManagerAny$getView2 === void 0 ? void 0 : _UIManagerAny$getView2.call(UIManagerAny, 'getConstants')) !== null && _UIManagerAny$getView !== void 0 ? _UIManagerAny$getView : (_UIManagerAny$getCons = UIManagerAny.getConstants) === null || _UIManagerAny$getCons === void 0 ? void 0 : _UIManagerAny$getCons.call(UIManagerAny);\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = _objectSpread(_objectSpread({}, UIManagerConstants.genericDirectEventTypes), customGHEventsConfig);\n}\nconst {\n  setJSResponder: oldSetJSResponder = () => {},\n  clearJSResponder: oldClearJSResponder = () => {}\n} = UIManagerAny;\nUIManagerAny.setJSResponder = (tag, blockNativeResponder) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\nlet allowTouches = true;\nconst DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android';\nif (DEV_ON_ANDROID) {\n  DeviceEventEmitter.addListener('toggleElementInspector', () => {\n    allowTouches = !allowTouches;\n  });\n}\nfunction hasUnresolvedRefs(props) {\n  const extract = refs => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some(r => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded'\n};\nconst UNRESOLVED_REFS_RETRY_LIMIT = 1;\nexport default function createHandler({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = []\n}) {\n  class Handler extends React.Component {\n    constructor(props) {\n      super(props);\n      _defineProperty(this, \"handlerTag\", void 0);\n      _defineProperty(this, \"config\", void 0);\n      _defineProperty(this, \"propsRef\", void 0);\n      _defineProperty(this, \"isMountedRef\", void 0);\n      _defineProperty(this, \"viewNode\", void 0);\n      _defineProperty(this, \"viewTag\", void 0);\n      _defineProperty(this, \"inspectorToggleListener\", void 0);\n      _defineProperty(this, \"onGestureHandlerEvent\", event => {\n        if (event.nativeEvent.handlerTag === this.handlerTag) {\n          if (typeof this.props.onGestureEvent === 'function') {\n            var _this$props$onGesture, _this$props;\n            (_this$props$onGesture = (_this$props = this.props).onGestureEvent) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props, event);\n          }\n        } else {\n          var _this$props$onGesture2, _this$props2;\n          (_this$props$onGesture2 = (_this$props2 = this.props).onGestureHandlerEvent) === null || _this$props$onGesture2 === void 0 ? void 0 : _this$props$onGesture2.call(_this$props2, event);\n        }\n      });\n      _defineProperty(this, \"onGestureHandlerStateChange\", event => {\n        if (event.nativeEvent.handlerTag === this.handlerTag) {\n          if (typeof this.props.onHandlerStateChange === 'function') {\n            var _this$props$onHandler, _this$props3;\n            (_this$props$onHandler = (_this$props3 = this.props).onHandlerStateChange) === null || _this$props$onHandler === void 0 ? void 0 : _this$props$onHandler.call(_this$props3, event);\n          }\n          const state = event.nativeEvent.state;\n          const stateEventName = stateToPropMappings[state];\n          const eventHandler = stateEventName && this.props[stateEventName];\n          if (eventHandler && typeof eventHandler === 'function') {\n            eventHandler(event);\n          }\n        } else {\n          var _this$props$onGesture3, _this$props4;\n          (_this$props$onGesture3 = (_this$props4 = this.props).onGestureHandlerStateChange) === null || _this$props$onGesture3 === void 0 ? void 0 : _this$props$onGesture3.call(_this$props4, event);\n        }\n      });\n      _defineProperty(this, \"refHandler\", node => {\n        this.viewNode = node;\n        const child = React.Children.only(this.props.children);\n        const {\n          ref\n        } = child;\n        if (ref !== null) {\n          if (typeof ref === 'function') {\n            ref(node);\n          } else {\n            ref.current = node;\n          }\n        }\n      });\n      _defineProperty(this, \"createGestureHandler\", newConfig => {\n        this.config = newConfig;\n        RNGestureHandlerModule.createGestureHandler(name, this.handlerTag, newConfig);\n      });\n      _defineProperty(this, \"attachGestureHandler\", newViewTag => {\n        this.viewTag = newViewTag;\n        if (Platform.OS === 'web') {\n          RNGestureHandlerModule.attachGestureHandler(this.handlerTag, newViewTag, ActionType.JS_FUNCTION_OLD_API, this.propsRef);\n        } else {\n          registerOldGestureHandler(this.handlerTag, {\n            onGestureEvent: this.onGestureHandlerEvent,\n            onGestureStateChange: this.onGestureHandlerStateChange\n          });\n          const actionType = (() => {\n            var _this$props5, _this$props6;\n            const onGestureEvent = (_this$props5 = this.props) === null || _this$props5 === void 0 ? void 0 : _this$props5.onGestureEvent;\n            const isGestureHandlerWorklet = onGestureEvent && ('current' in onGestureEvent || 'workletEventHandler' in onGestureEvent);\n            const onHandlerStateChange = (_this$props6 = this.props) === null || _this$props6 === void 0 ? void 0 : _this$props6.onHandlerStateChange;\n            const isStateChangeHandlerWorklet = onHandlerStateChange && ('current' in onHandlerStateChange || 'workletEventHandler' in onHandlerStateChange);\n            const isReanimatedHandler = isGestureHandlerWorklet || isStateChangeHandlerWorklet;\n            if (isReanimatedHandler) {\n              return ActionType.REANIMATED_WORKLET;\n            } else if (onGestureEvent && '__isNative' in onGestureEvent) {\n              return ActionType.NATIVE_ANIMATED_EVENT;\n            } else {\n              return ActionType.JS_FUNCTION_OLD_API;\n            }\n          })();\n          RNGestureHandlerModule.attachGestureHandler(this.handlerTag, newViewTag, actionType);\n        }\n        scheduleFlushOperations();\n      });\n      _defineProperty(this, \"updateGestureHandler\", newConfig => {\n        this.config = newConfig;\n        RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n        scheduleFlushOperations();\n      });\n      this.handlerTag = getNextHandlerTag();\n      this.config = {};\n      this.propsRef = React.createRef();\n      this.isMountedRef = React.createRef();\n      this.state = {\n        allowTouches\n      };\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n    }\n    componentDidMount() {\n      const props = this.props;\n      this.isMountedRef.current = true;\n      if (DEV_ON_ANDROID) {\n        this.inspectorToggleListener = DeviceEventEmitter.addListener('toggleElementInspector', () => {\n          this.setState(_ => ({\n            allowTouches\n          }));\n          this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n        });\n      }\n      if (hasUnresolvedRefs(props)) {\n        ghQueueMicrotask(() => {\n          this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n        });\n      }\n      this.createGestureHandler(filterConfig(transformProps ? transformProps(this.props) : this.props, [...allowedProps, ...customNativeProps], config));\n      this.attachGestureHandler(findNodeHandle(this.viewNode));\n    }\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag);\n      }\n      this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n    }\n    componentWillUnmount() {\n      var _this$inspectorToggle;\n      (_this$inspectorToggle = this.inspectorToggleListener) === null || _this$inspectorToggle === void 0 ? void 0 : _this$inspectorToggle.remove();\n      this.isMountedRef.current = false;\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      scheduleFlushOperations();\n      const handlerID = this.props.id;\n      if (handlerID) {\n        delete handlerIDToTag[handlerID];\n      }\n    }\n    update(remainingTries) {\n      if (!this.isMountedRef.current) {\n        return;\n      }\n      const props = this.props;\n      if (hasUnresolvedRefs(props) && remainingTries > 0) {\n        ghQueueMicrotask(() => {\n          this.update(remainingTries - 1);\n        });\n      } else {\n        const newConfig = filterConfig(transformProps ? transformProps(this.props) : this.props, [...allowedProps, ...customNativeProps], config);\n        if (!deepEqual(this.config, newConfig)) {\n          this.updateGestureHandler(newConfig);\n        }\n      }\n    }\n    setNativeProps(updates) {\n      const mergedProps = _objectSpread(_objectSpread({}, this.props), updates);\n      const newConfig = filterConfig(transformProps ? transformProps(mergedProps) : mergedProps, [...allowedProps, ...customNativeProps], config);\n      this.updateGestureHandler(newConfig);\n    }\n    render() {\n      var _this$props$testID;\n      if (__DEV__ && !this.context && !isJestEnv() && Platform.OS !== 'web') {\n        throw new Error(name + ' must be used as a descendant of GestureHandlerRootView. Otherwise the gestures will not be recognized. See https://docs.swmansion.com/react-native-gesture-handler/docs/installation for more details.');\n      }\n      let gestureEventHandler = this.onGestureHandlerEvent;\n      const {\n        onGestureEvent,\n        onGestureHandlerEvent\n      } = this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        if (onGestureHandlerEvent) {\n          throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (onGestureHandlerEvent && typeof onGestureHandlerEvent !== 'function') {\n          throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n        }\n      }\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange\n      } = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        if (onGestureHandlerStateChange) {\n          throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (onGestureHandlerStateChange && typeof onGestureHandlerStateChange !== 'function') {\n          throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: this.state.allowTouches ? gestureEventHandler : undefined,\n        onGestureHandlerStateChange: this.state.allowTouches ? gestureStateEventHandler : undefined\n      };\n      this.propsRef.current = events;\n      let child = null;\n      try {\n        child = React.Children.only(this.props.children);\n      } catch (e) {\n        throw new Error(tagMessage(`${name} got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.`));\n      }\n      let grandChildren = child.props.children;\n      if (__DEV__ && child.type && (child.type === 'RNGestureHandlerButton' || child.type.name === 'View' || child.type.displayName === 'View')) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(React.createElement(PressabilityDebugView, {\n          key: \"pressabilityDebugView\",\n          color: \"mediumspringgreen\",\n          hitSlop: child.props.hitSlop\n        }));\n      }\n      return React.cloneElement(child, _objectSpread(_objectSpread({\n        ref: this.refHandler,\n        collapsable: false\n      }, isJestEnv() ? {\n        handlerType: name,\n        handlerTag: this.handlerTag\n      } : {}), {}, {\n        testID: (_this$props$testID = this.props.testID) !== null && _this$props$testID !== void 0 ? _this$props$testID : child.props.testID\n      }, events), grandChildren);\n    }\n  }\n  _defineProperty(Handler, \"displayName\", name);\n  _defineProperty(Handler, \"contextType\", GestureHandlerRootViewContext);\n  return Handler;\n}","map":{"version":3,"names":["React","Platform","UIManager","DeviceEventEmitter","customDirectEventTypes","deepEqual","RNGestureHandlerModule","State","handlerIDToTag","getNextHandlerTag","registerOldGestureHandler","filterConfig","findNodeHandle","scheduleFlushOperations","isFabric","isJestEnv","tagMessage","ActionType","PressabilityDebugView","GestureHandlerRootViewContext","ghQueueMicrotask","UIManagerAny","topGestureHandlerEvent","registrationName","customGHEventsConfigFabricAndroid","topOnGestureHandlerEvent","topOnGestureHandlerStateChange","customGHEventsConfig","_objectSpread","onGestureHandlerEvent","onGestureHandlerStateChange","OS","genericDirectEventTypes","UIManagerConstants","_UIManagerAny$getView","_UIManagerAny$getView2","getViewManagerConfig","call","_UIManagerAny$getCons","getConstants","setJSResponder","oldSetJSResponder","clearJSResponder","oldClearJSResponder","tag","blockNativeResponder","handleSetJSResponder","handleClearJSResponder","allowTouches","DEV_ON_ANDROID","__DEV__","addListener","hasUnresolvedRefs","props","extract","refs","Array","isArray","current","some","r","stateToPropMappings","UNDETERMINED","undefined","BEGAN","FAILED","CANCELLED","ACTIVE","END","UNRESOLVED_REFS_RETRY_LIMIT","createHandler","name","allowedProps","config","transformProps","customNativeProps","Handler","Component","constructor","_defineProperty","event","nativeEvent","handlerTag","onGestureEvent","_this$props$onGesture","_this$props","_this$props$onGesture2","_this$props2","onHandlerStateChange","_this$props$onHandler","_this$props3","state","stateEventName","eventHandler","_this$props$onGesture3","_this$props4","node","viewNode","child","Children","only","children","ref","newConfig","createGestureHandler","newViewTag","viewTag","attachGestureHandler","JS_FUNCTION_OLD_API","propsRef","onGestureStateChange","actionType","_this$props5","_this$props6","isGestureHandlerWorklet","isStateChangeHandlerWorklet","isReanimatedHandler","REANIMATED_WORKLET","NATIVE_ANIMATED_EVENT","updateGestureHandler","createRef","isMountedRef","id","Error","componentDidMount","inspectorToggleListener","setState","_","update","componentDidUpdate","componentWillUnmount","_this$inspectorToggle","remove","dropGestureHandler","handlerID","remainingTries","setNativeProps","updates","mergedProps","render","_this$props$testID","context","gestureEventHandler","gestureStateEventHandler","events","e","grandChildren","type","displayName","toArray","push","createElement","key","color","hitSlop","cloneElement","refHandler","collapsable","handlerType","testID"],"sources":["C:\\Users\\DinhPhongIUH\\Desktop\\nhap\\Yanuo_mobile_Redux\\node_modules\\react-native-gesture-handler\\lib\\module\\handlers\\createHandler.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  UIManager,\n  DeviceEventEmitter,\n  EmitterSubscription,\n} from 'react-native';\nimport { customDirectEventTypes } from './customDirectEventTypes';\n// @ts-ignore - it isn't typed by TS & don't have definitelyTyped types\nimport deepEqual from 'lodash/isEqual';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport { State } from '../State';\nimport {\n  handlerIDToTag,\n  getNextHandlerTag,\n  registerOldGestureHandler,\n} from './handlersRegistry';\n\nimport {\n  BaseGestureHandlerProps,\n  filterConfig,\n  GestureEvent,\n  HandlerStateChangeEvent,\n  findNodeHandle,\n  scheduleFlushOperations,\n} from './gestureHandlerCommon';\nimport { ValueOf } from '../typeUtils';\nimport { isFabric, isJestEnv, tagMessage } from '../utils';\nimport { ActionType } from '../ActionType';\nimport { PressabilityDebugView } from './PressabilityDebugView';\nimport GestureHandlerRootViewContext from '../GestureHandlerRootViewContext';\nimport { ghQueueMicrotask } from '../ghQueueMicrotask';\n\nconst UIManagerAny = UIManager as any;\n\ncustomDirectEventTypes.topGestureHandlerEvent = {\n  registrationName: 'onGestureHandlerEvent',\n};\n\nconst customGHEventsConfigFabricAndroid = {\n  topOnGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  topOnGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n\n  // When using React Native Gesture Handler for Animated.event with useNativeDriver: true\n  // on Android with Fabric enabled, the native part still sends the native events to JS\n  // but prefixed with \"top\". We cannot simply rename the events above so they are prefixed\n  // with \"top\" instead of \"on\" because in such case Animated.events would not be registered.\n  // That's why we need to register another pair of event names.\n  // The incoming events will be queued but never handled.\n  // Without this piece of code below, you'll get the following JS error:\n  // Unsupported top level event type \"topOnGestureHandlerEvent\" dispatched\n  ...(isFabric() &&\n    Platform.OS === 'android' &&\n    customGHEventsConfigFabricAndroid),\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManagerAny.genericDirectEventTypes = {\n  ...UIManagerAny.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getViewManagerConfig('getConstants') or in older RN UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\nconst UIManagerConstants =\n  UIManagerAny.getViewManagerConfig?.('getConstants') ??\n  UIManagerAny.getConstants?.();\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = {\n    ...UIManagerConstants.genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {\n    //no operation\n  },\n  clearJSResponder: oldClearJSResponder = () => {\n    //no operation\n  },\n} = UIManagerAny;\nUIManagerAny.setJSResponder = (tag: number, blockNativeResponder: boolean) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet allowTouches = true;\nconst DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android';\n// Toggled inspector blocks touch events in order to allow inspecting on Android\n// This needs to be a global variable in order to set initial state for `allowTouches` property in Handler component\nif (DEV_ON_ANDROID) {\n  DeviceEventEmitter.addListener('toggleElementInspector', () => {\n    allowTouches = !allowTouches;\n  });\n}\n\ntype HandlerProps<T extends Record<string, unknown>> = Readonly<\n  React.PropsWithChildren<BaseGestureHandlerProps<T>>\n>;\nfunction hasUnresolvedRefs<T extends Record<string, unknown>>(\n  props: HandlerProps<T>\n) {\n  // TODO(TS) - add type for extract arg\n  const extract = (refs: any | any[]) => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some((r) => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n} as const;\n\ntype CreateHandlerArgs<HandlerPropsT extends Record<string, unknown>> =\n  Readonly<{\n    name: string;\n    allowedProps: Readonly<Extract<keyof HandlerPropsT, string>[]>;\n    config: Readonly<Record<string, unknown>>;\n    transformProps?: (props: HandlerPropsT) => HandlerPropsT;\n    customNativeProps?: Readonly<string[]>;\n  }>;\n\n// TODO(TS) fix event types\ntype InternalEventHandlers = {\n  onGestureHandlerEvent?: (event: any) => void;\n  onGestureHandlerStateChange?: (event: any) => void;\n};\n\ntype AttachGestureHandlerWeb = (\n  handlerTag: number,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  newView: any,\n  _actionType: ActionType,\n  propsRef: React.RefObject<unknown>\n) => void;\n\nconst UNRESOLVED_REFS_RETRY_LIMIT = 1;\n\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nexport default function createHandler<\n  T extends BaseGestureHandlerProps<U>,\n  U extends Record<string, unknown>\n>({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = [],\n}: CreateHandlerArgs<T>): React.ComponentType<T & React.RefAttributes<any>> {\n  interface HandlerState {\n    allowTouches: boolean;\n  }\n  class Handler extends React.Component<\n    T & InternalEventHandlers,\n    HandlerState\n  > {\n    static displayName = name;\n    static contextType = GestureHandlerRootViewContext;\n\n    private handlerTag: number;\n    private config: Record<string, unknown>;\n    private propsRef: React.MutableRefObject<unknown>;\n    private isMountedRef: React.MutableRefObject<boolean | null>;\n    private viewNode: any;\n    private viewTag?: number;\n    private inspectorToggleListener?: EmitterSubscription;\n\n    constructor(props: T & InternalEventHandlers) {\n      super(props);\n      this.handlerTag = getNextHandlerTag();\n      this.config = {};\n      this.propsRef = React.createRef();\n      this.isMountedRef = React.createRef();\n      this.state = { allowTouches };\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n    }\n\n    componentDidMount() {\n      const props: HandlerProps<U> = this.props;\n      this.isMountedRef.current = true;\n\n      if (DEV_ON_ANDROID) {\n        this.inspectorToggleListener = DeviceEventEmitter.addListener(\n          'toggleElementInspector',\n          () => {\n            this.setState((_) => ({ allowTouches }));\n            this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n          }\n        );\n      }\n      if (hasUnresolvedRefs(props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // queueMicrotask. This makes it so update() function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        ghQueueMicrotask(() => {\n          this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n        });\n      }\n\n      this.createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        )\n      );\n\n      this.attachGestureHandler(findNodeHandle(this.viewNode) as number); // TODO(TS) - check if this can be null\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag as number); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n      }\n      this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n    }\n\n    componentWillUnmount() {\n      this.inspectorToggleListener?.remove();\n      this.isMountedRef.current = false;\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      scheduleFlushOperations();\n      // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n      const handlerID: string | undefined = this.props.id;\n      if (handlerID) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete handlerIDToTag[handlerID];\n      }\n    }\n\n    private onGestureHandlerEvent = (event: GestureEvent<U>) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onGestureEvent === 'function') {\n          this.props.onGestureEvent?.(event);\n        }\n      } else {\n        this.props.onGestureHandlerEvent?.(event);\n      }\n    };\n\n    // TODO(TS) - make sure this is right type for event\n    private onGestureHandlerStateChange = (\n      event: HandlerStateChangeEvent<U>\n    ) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onHandlerStateChange === 'function') {\n          this.props.onHandlerStateChange?.(event);\n        }\n\n        const state: ValueOf<typeof State> = event.nativeEvent.state;\n        const stateEventName = stateToPropMappings[state];\n        const eventHandler = stateEventName && this.props[stateEventName];\n        if (eventHandler && typeof eventHandler === 'function') {\n          eventHandler(event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange?.(event);\n      }\n    };\n\n    private refHandler = (node: any) => {\n      this.viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      // TODO(TS) fix ref type\n      const { ref }: any = child;\n      if (ref !== null) {\n        if (typeof ref === 'function') {\n          ref(node);\n        } else {\n          ref.current = node;\n        }\n      }\n    };\n\n    private createGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        name,\n        this.handlerTag,\n        newConfig\n      );\n    };\n\n    private attachGestureHandler = (newViewTag: number) => {\n      this.viewTag = newViewTag;\n\n      if (Platform.OS === 'web') {\n        // typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n        (\n          RNGestureHandlerModule.attachGestureHandler as AttachGestureHandlerWeb\n        )(\n          this.handlerTag,\n          newViewTag,\n          ActionType.JS_FUNCTION_OLD_API, // ignored on web\n          this.propsRef\n        );\n      } else {\n        registerOldGestureHandler(this.handlerTag, {\n          onGestureEvent: this.onGestureHandlerEvent,\n          onGestureStateChange: this.onGestureHandlerStateChange,\n        });\n\n        const actionType = (() => {\n          const onGestureEvent = this.props?.onGestureEvent;\n          const isGestureHandlerWorklet =\n            onGestureEvent &&\n            ('current' in onGestureEvent ||\n              'workletEventHandler' in onGestureEvent);\n          const onHandlerStateChange = this.props?.onHandlerStateChange;\n          const isStateChangeHandlerWorklet =\n            onHandlerStateChange &&\n            ('current' in onHandlerStateChange ||\n              'workletEventHandler' in onHandlerStateChange);\n          const isReanimatedHandler =\n            isGestureHandlerWorklet || isStateChangeHandlerWorklet;\n          if (isReanimatedHandler) {\n            // Reanimated worklet\n            return ActionType.REANIMATED_WORKLET;\n          } else if (onGestureEvent && '__isNative' in onGestureEvent) {\n            // Animated.event with useNativeDriver: true\n            return ActionType.NATIVE_ANIMATED_EVENT;\n          } else {\n            // JS callback or Animated.event with useNativeDriver: false\n            return ActionType.JS_FUNCTION_OLD_API;\n          }\n        })();\n\n        RNGestureHandlerModule.attachGestureHandler(\n          this.handlerTag,\n          newViewTag,\n          actionType\n        );\n      }\n\n      scheduleFlushOperations();\n    };\n\n    private updateGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n      scheduleFlushOperations();\n    };\n\n    private update(remainingTries: number) {\n      if (!this.isMountedRef.current) {\n        return;\n      }\n\n      const props: HandlerProps<U> = this.props;\n\n      // When ref is set via a function i.e. `ref={(r) => refObject.current = r}` instead of\n      // `ref={refObject}` it's possible that it won't be resolved in time. Seems like trying\n      // again is easy enough fix.\n      if (hasUnresolvedRefs(props) && remainingTries > 0) {\n        ghQueueMicrotask(() => {\n          this.update(remainingTries - 1);\n        });\n      } else {\n        const newConfig = filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        );\n        if (!deepEqual(this.config, newConfig)) {\n          this.updateGestureHandler(newConfig);\n        }\n      }\n    }\n\n    setNativeProps(updates: any) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      this.updateGestureHandler(newConfig);\n    }\n\n    render() {\n      if (__DEV__ && !this.context && !isJestEnv() && Platform.OS !== 'web') {\n        throw new Error(\n          name +\n            ' must be used as a descendant of GestureHandlerRootView. Otherwise the gestures will not be recognized. See https://docs.swmansion.com/react-native-gesture-handler/docs/installation for more details.'\n        );\n      }\n\n      let gestureEventHandler = this.onGestureHandlerEvent;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureEventHandlers = {\n        onGestureEvent?: BaseGestureHandlerProps<U>['onGestureEvent'];\n        onGestureHandlerEvent?: InternalEventHandlers['onGestureHandlerEvent'];\n      };\n      const { onGestureEvent, onGestureHandlerEvent }: OnGestureEventHandlers =\n        this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureStateChangeHandlers = {\n        onHandlerStateChange?: BaseGestureHandlerProps<U>['onHandlerStateChange'];\n        onGestureHandlerStateChange?: InternalEventHandlers['onGestureHandlerStateChange'];\n      };\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange,\n      }: OnGestureStateChangeHandlers = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: this.state.allowTouches\n          ? gestureEventHandler\n          : undefined,\n        onGestureHandlerStateChange: this.state.allowTouches\n          ? gestureStateEventHandler\n          : undefined,\n      };\n\n      this.propsRef.current = events;\n\n      let child: any = null;\n      try {\n        child = React.Children.only(this.props.children);\n      } catch (e) {\n        throw new Error(\n          tagMessage(\n            `${name} got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.`\n          )\n        );\n      }\n\n      let grandChildren = child.props.children;\n      if (\n        __DEV__ &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          <PressabilityDebugView\n            key=\"pressabilityDebugView\"\n            color=\"mediumspringgreen\"\n            hitSlop={child.props.hitSlop}\n          />\n        );\n      }\n\n      return React.cloneElement(\n        child,\n        {\n          ref: this.refHandler,\n          collapsable: false,\n          ...(isJestEnv()\n            ? {\n                handlerType: name,\n                handlerTag: this.handlerTag,\n              }\n            : {}),\n          testID: this.props.testID ?? child.props.testID,\n          ...events,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}