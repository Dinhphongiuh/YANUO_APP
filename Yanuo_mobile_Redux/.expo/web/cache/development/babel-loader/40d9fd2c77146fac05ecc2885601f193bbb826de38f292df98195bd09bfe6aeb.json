{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nexport default class EventManager {\n  constructor(view) {\n    _defineProperty(this, \"view\", void 0);\n    _defineProperty(this, \"pointersInBounds\", []);\n    _defineProperty(this, \"activePointersCounter\", void 0);\n    this.view = view;\n    this.activePointersCounter = 0;\n  }\n  onPointerDown(_event) {}\n  onPointerAdd(_event) {}\n  onPointerUp(_event) {}\n  onPointerRemove(_event) {}\n  onPointerMove(_event) {}\n  onPointerLeave(_event) {}\n  onPointerEnter(_event) {}\n  onPointerCancel(_event) {}\n  onPointerOutOfBounds(_event) {}\n  onPointerMoveOver(_event) {}\n  onPointerMoveOut(_event) {}\n  setOnPointerDown(callback) {\n    this.onPointerDown = callback;\n  }\n  setOnPointerAdd(callback) {\n    this.onPointerAdd = callback;\n  }\n  setOnPointerUp(callback) {\n    this.onPointerUp = callback;\n  }\n  setOnPointerRemove(callback) {\n    this.onPointerRemove = callback;\n  }\n  setOnPointerMove(callback) {\n    this.onPointerMove = callback;\n  }\n  setOnPointerLeave(callback) {\n    this.onPointerLeave = callback;\n  }\n  setOnPointerEnter(callback) {\n    this.onPointerEnter = callback;\n  }\n  setOnPointerCancel(callback) {\n    this.onPointerCancel = callback;\n  }\n  setOnPointerOutOfBounds(callback) {\n    this.onPointerOutOfBounds = callback;\n  }\n  setOnPointerMoveOver(callback) {\n    this.onPointerMoveOver = callback;\n  }\n  setOnPointerMoveOut(callback) {\n    this.onPointerMoveOut = callback;\n  }\n  markAsInBounds(pointerId) {\n    if (this.pointersInBounds.indexOf(pointerId) >= 0) {\n      return;\n    }\n    this.pointersInBounds.push(pointerId);\n  }\n  markAsOutOfBounds(pointerId) {\n    const index = this.pointersInBounds.indexOf(pointerId);\n    if (index < 0) {\n      return;\n    }\n    this.pointersInBounds.splice(index, 1);\n  }\n  resetManager() {\n    this.activePointersCounter = 0;\n    this.pointersInBounds = [];\n  }\n}","map":{"version":3,"names":["EventManager","constructor","view","_defineProperty","activePointersCounter","onPointerDown","_event","onPointerAdd","onPointerUp","onPointerRemove","onPointerMove","onPointerLeave","onPointerEnter","onPointerCancel","onPointerOutOfBounds","onPointerMoveOver","onPointerMoveOut","setOnPointerDown","callback","setOnPointerAdd","setOnPointerUp","setOnPointerRemove","setOnPointerMove","setOnPointerLeave","setOnPointerEnter","setOnPointerCancel","setOnPointerOutOfBounds","setOnPointerMoveOver","setOnPointerMoveOut","markAsInBounds","pointerId","pointersInBounds","indexOf","push","markAsOutOfBounds","index","splice","resetManager"],"sources":["C:\\Users\\DinhPhongIUH\\Desktop\\nhap\\Yanuo_mobile_Redux\\node_modules\\react-native-gesture-handler\\lib\\module\\web\\tools\\EventManager.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-empty-function */\nimport { AdaptedEvent, EventTypes, TouchEventType } from '../interfaces';\n\ntype PointerEventCallback = (event: AdaptedEvent) => void;\n\nexport default abstract class EventManager<T> {\n  protected readonly view: T;\n  protected pointersInBounds: number[] = [];\n  protected activePointersCounter: number;\n\n  constructor(view: T) {\n    this.view = view;\n    this.activePointersCounter = 0;\n  }\n\n  public abstract registerListeners(): void;\n  public abstract unregisterListeners(): void;\n\n  protected abstract mapEvent(\n    event: Event,\n    eventType: EventTypes,\n    index?: number,\n    touchEventType?: TouchEventType\n  ): AdaptedEvent;\n\n  protected onPointerDown(_event: AdaptedEvent): void {}\n  protected onPointerAdd(_event: AdaptedEvent): void {}\n  protected onPointerUp(_event: AdaptedEvent): void {}\n  protected onPointerRemove(_event: AdaptedEvent): void {}\n  protected onPointerMove(_event: AdaptedEvent): void {}\n  protected onPointerLeave(_event: AdaptedEvent): void {} // called only when pointer is pressed (or touching)\n  protected onPointerEnter(_event: AdaptedEvent): void {} // called only when pointer is pressed (or touching)\n  protected onPointerCancel(_event: AdaptedEvent): void {\n    // When pointer cancel is triggered and there are more pointers on the view, only one pointer is cancelled\n    // Because we want all pointers to be cancelled by that event, we are doing it manually by reseting handler and changing activePointersCounter to 0\n    // Events that correspond to removing the pointer (pointerup, touchend) have condition, that they don't perform any action when activePointersCounter\n    // is equal to 0. This prevents counter from going to negative values, when pointers are removed from view after one of them has been cancelled\n  }\n  protected onPointerOutOfBounds(_event: AdaptedEvent): void {}\n  protected onPointerMoveOver(_event: AdaptedEvent): void {}\n  protected onPointerMoveOut(_event: AdaptedEvent): void {}\n\n  public setOnPointerDown(callback: PointerEventCallback): void {\n    this.onPointerDown = callback;\n  }\n  public setOnPointerAdd(callback: PointerEventCallback): void {\n    this.onPointerAdd = callback;\n  }\n  public setOnPointerUp(callback: PointerEventCallback): void {\n    this.onPointerUp = callback;\n  }\n  public setOnPointerRemove(callback: PointerEventCallback): void {\n    this.onPointerRemove = callback;\n  }\n  public setOnPointerMove(callback: PointerEventCallback): void {\n    this.onPointerMove = callback;\n  }\n  public setOnPointerLeave(callback: PointerEventCallback): void {\n    this.onPointerLeave = callback;\n  }\n  public setOnPointerEnter(callback: PointerEventCallback): void {\n    this.onPointerEnter = callback;\n  }\n  public setOnPointerCancel(callback: PointerEventCallback): void {\n    this.onPointerCancel = callback;\n  }\n  public setOnPointerOutOfBounds(callback: PointerEventCallback): void {\n    this.onPointerOutOfBounds = callback;\n  }\n  public setOnPointerMoveOver(callback: PointerEventCallback): void {\n    this.onPointerMoveOver = callback;\n  }\n  public setOnPointerMoveOut(callback: PointerEventCallback): void {\n    this.onPointerMoveOut = callback;\n  }\n\n  protected markAsInBounds(pointerId: number): void {\n    if (this.pointersInBounds.indexOf(pointerId) >= 0) {\n      return;\n    }\n\n    this.pointersInBounds.push(pointerId);\n  }\n\n  protected markAsOutOfBounds(pointerId: number): void {\n    const index: number = this.pointersInBounds.indexOf(pointerId);\n\n    if (index < 0) {\n      return;\n    }\n\n    this.pointersInBounds.splice(index, 1);\n  }\n\n  public resetManager(): void {\n    // Reseting activePointersCounter is necessary to make gestures such as pinch work properly\n    // There are gestures that end when there is still one active pointer (like pinch/rotation)\n    // When these gestures end, they are reset, but they still receive events from pointer that is active\n    // This causes trouble, since only onPointerDown registers gesture in orchestrator, and while gestures receive\n    // Events from active pointer after they finished, next pointerdown event will be registered as additional pointer, not the first one\n    // This casues trouble like gestures getting stuck in END state, even though they should have gone to UNDETERMINED\n\n    this.activePointersCounter = 0;\n    this.pointersInBounds = [];\n  }\n}\n"],"mappings":";;;;;;;;;;;;;AAKA,eAAe,MAAeA,YAAf,CAA+B;EAK5CC,WAAWA,CAACC,IAAD,EAAU;IAAAC,eAAA;IAAAA,eAAA,2BAHkB,EAGlB;IAAAA,eAAA;IACnB,KAAKD,IAAL,GAAYA,IAAZ;IACA,KAAKE,qBAAL,GAA6B,CAA7B;EACD;EAYSC,aAAaA,CAACC,MAAD,EAA6B,CAAE;EAC5CC,YAAYA,CAACD,MAAD,EAA6B,CAAE;EAC3CE,WAAWA,CAACF,MAAD,EAA6B,CAAE;EAC1CG,eAAeA,CAACH,MAAD,EAA6B,CAAE;EAC9CI,aAAaA,CAACJ,MAAD,EAA6B,CAAE;EAC5CK,cAAcA,CAACL,MAAD,EAA6B,CAAE;EAC7CM,cAAcA,CAACN,MAAD,EAA6B,CAAE;EAC7CO,eAAeA,CAACP,MAAD,EAA6B,CAKrD;EACSQ,oBAAoBA,CAACR,MAAD,EAA6B,CAAE;EACnDS,iBAAiBA,CAACT,MAAD,EAA6B,CAAE;EAChDU,gBAAgBA,CAACV,MAAD,EAA6B,CAAE;EAElDW,gBAAgBA,CAACC,QAAD,EAAuC;IAC5D,KAAKb,aAAL,GAAqBa,QAArB;EACD;EACMC,eAAeA,CAACD,QAAD,EAAuC;IAC3D,KAAKX,YAAL,GAAoBW,QAApB;EACD;EACME,cAAcA,CAACF,QAAD,EAAuC;IAC1D,KAAKV,WAAL,GAAmBU,QAAnB;EACD;EACMG,kBAAkBA,CAACH,QAAD,EAAuC;IAC9D,KAAKT,eAAL,GAAuBS,QAAvB;EACD;EACMI,gBAAgBA,CAACJ,QAAD,EAAuC;IAC5D,KAAKR,aAAL,GAAqBQ,QAArB;EACD;EACMK,iBAAiBA,CAACL,QAAD,EAAuC;IAC7D,KAAKP,cAAL,GAAsBO,QAAtB;EACD;EACMM,iBAAiBA,CAACN,QAAD,EAAuC;IAC7D,KAAKN,cAAL,GAAsBM,QAAtB;EACD;EACMO,kBAAkBA,CAACP,QAAD,EAAuC;IAC9D,KAAKL,eAAL,GAAuBK,QAAvB;EACD;EACMQ,uBAAuBA,CAACR,QAAD,EAAuC;IACnE,KAAKJ,oBAAL,GAA4BI,QAA5B;EACD;EACMS,oBAAoBA,CAACT,QAAD,EAAuC;IAChE,KAAKH,iBAAL,GAAyBG,QAAzB;EACD;EACMU,mBAAmBA,CAACV,QAAD,EAAuC;IAC/D,KAAKF,gBAAL,GAAwBE,QAAxB;EACD;EAESW,cAAcA,CAACC,SAAD,EAA0B;IAChD,IAAI,KAAKC,gBAAL,CAAsBC,OAAtB,CAA8BF,SAA9B,KAA4C,CAAhD,EAAmD;MACjD;IACD;IAED,KAAKC,gBAAL,CAAsBE,IAAtB,CAA2BH,SAA3B;EACD;EAESI,iBAAiBA,CAACJ,SAAD,EAA0B;IACnD,MAAMK,KAAa,GAAG,KAAKJ,gBAAL,CAAsBC,OAAtB,CAA8BF,SAA9B,CAAtB;IAEA,IAAIK,KAAK,GAAG,CAAZ,EAAe;MACb;IACD;IAED,KAAKJ,gBAAL,CAAsBK,MAAtB,CAA6BD,KAA7B,EAAoC,CAApC;EACD;EAEME,YAAYA,CAAA,EAAS;IAQ1B,KAAKjC,qBAAL,GAA6B,CAA7B;IACA,KAAK2B,gBAAL,GAAwB,EAAxB;EACD;AAnG2C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}