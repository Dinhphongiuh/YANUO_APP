{"ast":null,"code":"import { InterruptionModeAndroid, InterruptionModeIOS } from './Audio.types';\nimport ExponentAV from './ExponentAV';\nexport * from './Audio/Recording';\nexport * from './Audio/Sound';\nexport { setIsEnabledAsync } from './Audio/AudioAvailability';\nexport { PitchCorrectionQuality } from './AV';\nconst _populateMissingKeys = (userAudioMode, defaultAudioMode) => {\n  for (const key in defaultAudioMode) {\n    if (!userAudioMode.hasOwnProperty(key)) {\n      userAudioMode[key] = defaultAudioMode[key];\n    }\n  }\n  return userAudioMode;\n};\nconst defaultMode = {\n  allowsRecordingIOS: false,\n  interruptionModeIOS: InterruptionModeIOS.MixWithOthers,\n  playsInSilentModeIOS: false,\n  staysActiveInBackground: false,\n  interruptionModeAndroid: InterruptionModeAndroid.DuckOthers,\n  shouldDuckAndroid: true,\n  playThroughEarpieceAndroid: false\n};\nlet currentAudioMode = null;\nfunction getCurrentAudioMode() {\n  if (!currentAudioMode) {\n    return defaultMode;\n  }\n  return currentAudioMode;\n}\nexport async function setAudioModeAsync(partialMode) {\n  const mode = _populateMissingKeys(partialMode, getCurrentAudioMode());\n  if (!InterruptionModeIOS[mode.interruptionModeIOS]) {\n    throw new Error(`\"interruptionModeIOS\" was set to an invalid value.`);\n  }\n  if (!InterruptionModeAndroid[mode.interruptionModeAndroid]) {\n    throw new Error(`\"interruptionModeAndroid\" was set to an invalid value.`);\n  }\n  if (typeof mode.allowsRecordingIOS !== 'boolean' || typeof mode.playsInSilentModeIOS !== 'boolean' || typeof mode.staysActiveInBackground !== 'boolean' || typeof mode.shouldDuckAndroid !== 'boolean' || typeof mode.playThroughEarpieceAndroid !== 'boolean') {\n    throw new Error('\"allowsRecordingIOS\", \"playsInSilentModeIOS\", \"playThroughEarpieceAndroid\", \"staysActiveInBackground\" and \"shouldDuckAndroid\" must be booleans.');\n  }\n  currentAudioMode = mode;\n  return await ExponentAV.setAudioMode(mode);\n}","map":{"version":3,"names":["InterruptionModeAndroid","InterruptionModeIOS","ExponentAV","setIsEnabledAsync","PitchCorrectionQuality","_populateMissingKeys","userAudioMode","defaultAudioMode","key","hasOwnProperty","defaultMode","allowsRecordingIOS","interruptionModeIOS","MixWithOthers","playsInSilentModeIOS","staysActiveInBackground","interruptionModeAndroid","DuckOthers","shouldDuckAndroid","playThroughEarpieceAndroid","currentAudioMode","getCurrentAudioMode","setAudioModeAsync","partialMode","mode","Error","setAudioMode"],"sources":["C:\\Users\\DinhPhongIUH\\Desktop\\nhap\\Yanuo_mobile_Redux\\node_modules\\expo-av\\src\\Audio.ts"],"sourcesContent":["import { AudioMode, InterruptionModeAndroid, InterruptionModeIOS } from './Audio.types';\nimport ExponentAV from './ExponentAV';\n\nexport * from './Audio/Recording';\nexport * from './Audio/Sound';\nexport { setIsEnabledAsync } from './Audio/AudioAvailability';\nexport { PitchCorrectionQuality } from './AV';\n\nconst _populateMissingKeys = (\n  userAudioMode: Partial<AudioMode>,\n  defaultAudioMode: AudioMode\n): AudioMode => {\n  for (const key in defaultAudioMode) {\n    if (!userAudioMode.hasOwnProperty(key)) {\n      userAudioMode[key] = defaultAudioMode[key];\n    }\n  }\n  return userAudioMode as AudioMode;\n};\n\nconst defaultMode: AudioMode = {\n  allowsRecordingIOS: false,\n  interruptionModeIOS: InterruptionModeIOS.MixWithOthers,\n  playsInSilentModeIOS: false,\n  staysActiveInBackground: false,\n  interruptionModeAndroid: InterruptionModeAndroid.DuckOthers,\n  shouldDuckAndroid: true,\n  playThroughEarpieceAndroid: false,\n};\n\nlet currentAudioMode: AudioMode | null = null;\n\nfunction getCurrentAudioMode(): AudioMode {\n  if (!currentAudioMode) {\n    return defaultMode;\n  }\n  return currentAudioMode;\n}\n\n/**\n * We provide this API to customize the audio experience on iOS and Android.\n * @param partialMode\n * @return A `Promise` that will reject if the audio mode could not be enabled for the device.\n */\nexport async function setAudioModeAsync(partialMode: Partial<AudioMode>): Promise<void> {\n  const mode = _populateMissingKeys(partialMode, getCurrentAudioMode());\n\n  if (!InterruptionModeIOS[mode.interruptionModeIOS]) {\n    throw new Error(`\"interruptionModeIOS\" was set to an invalid value.`);\n  }\n  if (!InterruptionModeAndroid[mode.interruptionModeAndroid]) {\n    throw new Error(`\"interruptionModeAndroid\" was set to an invalid value.`);\n  }\n  if (\n    typeof mode.allowsRecordingIOS !== 'boolean' ||\n    typeof mode.playsInSilentModeIOS !== 'boolean' ||\n    typeof mode.staysActiveInBackground !== 'boolean' ||\n    typeof mode.shouldDuckAndroid !== 'boolean' ||\n    typeof mode.playThroughEarpieceAndroid !== 'boolean'\n  ) {\n    throw new Error(\n      '\"allowsRecordingIOS\", \"playsInSilentModeIOS\", \"playThroughEarpieceAndroid\", \"staysActiveInBackground\" and \"shouldDuckAndroid\" must be booleans.'\n    );\n  }\n  currentAudioMode = mode;\n  return await ExponentAV.setAudioMode(mode);\n}\n"],"mappings":"AAAA,SAAoBA,uBAAuB,EAAEC,mBAAmB,QAAQ,eAAe;AACvF,OAAOC,UAAU,MAAM,cAAc;AAErC,cAAc,mBAAmB;AACjC,cAAc,eAAe;AAC7B,SAASC,iBAAiB,QAAQ,2BAA2B;AAC7D,SAASC,sBAAsB,QAAQ,MAAM;AAE7C,MAAMC,oBAAoB,GAAGA,CAC3BC,aAAiC,EACjCC,gBAA2B,KACd;EACb,KAAK,MAAMC,GAAG,IAAID,gBAAgB,EAAE;IAClC,IAAI,CAACD,aAAa,CAACG,cAAc,CAACD,GAAG,CAAC,EAAE;MACtCF,aAAa,CAACE,GAAG,CAAC,GAAGD,gBAAgB,CAACC,GAAG,CAAC;;;EAG9C,OAAOF,aAA0B;AACnC,CAAC;AAED,MAAMI,WAAW,GAAc;EAC7BC,kBAAkB,EAAE,KAAK;EACzBC,mBAAmB,EAAEX,mBAAmB,CAACY,aAAa;EACtDC,oBAAoB,EAAE,KAAK;EAC3BC,uBAAuB,EAAE,KAAK;EAC9BC,uBAAuB,EAAEhB,uBAAuB,CAACiB,UAAU;EAC3DC,iBAAiB,EAAE,IAAI;EACvBC,0BAA0B,EAAE;CAC7B;AAED,IAAIC,gBAAgB,GAAqB,IAAI;AAE7C,SAASC,mBAAmBA,CAAA;EAC1B,IAAI,CAACD,gBAAgB,EAAE;IACrB,OAAOV,WAAW;;EAEpB,OAAOU,gBAAgB;AACzB;AAOA,OAAO,eAAeE,iBAAiBA,CAACC,WAA+B;EACrE,MAAMC,IAAI,GAAGnB,oBAAoB,CAACkB,WAAW,EAAEF,mBAAmB,EAAE,CAAC;EAErE,IAAI,CAACpB,mBAAmB,CAACuB,IAAI,CAACZ,mBAAmB,CAAC,EAAE;IAClD,MAAM,IAAIa,KAAK,CAAC,oDAAoD,CAAC;;EAEvE,IAAI,CAACzB,uBAAuB,CAACwB,IAAI,CAACR,uBAAuB,CAAC,EAAE;IAC1D,MAAM,IAAIS,KAAK,CAAC,wDAAwD,CAAC;;EAE3E,IACE,OAAOD,IAAI,CAACb,kBAAkB,KAAK,SAAS,IAC5C,OAAOa,IAAI,CAACV,oBAAoB,KAAK,SAAS,IAC9C,OAAOU,IAAI,CAACT,uBAAuB,KAAK,SAAS,IACjD,OAAOS,IAAI,CAACN,iBAAiB,KAAK,SAAS,IAC3C,OAAOM,IAAI,CAACL,0BAA0B,KAAK,SAAS,EACpD;IACA,MAAM,IAAIM,KAAK,CACb,iJAAiJ,CAClJ;;EAEHL,gBAAgB,GAAGI,IAAI;EACvB,OAAO,MAAMtB,UAAU,CAACwB,YAAY,CAACF,IAAI,CAAC;AAC5C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}