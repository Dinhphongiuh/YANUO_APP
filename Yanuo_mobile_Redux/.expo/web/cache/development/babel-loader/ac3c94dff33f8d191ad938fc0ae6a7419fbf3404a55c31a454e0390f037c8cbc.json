{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nconst DEFAULT_OPTIONS = {\n  mediaType: 'photo',\n  includeBase64: false,\n  selectionLimit: 1\n};\nexport function camera(options = DEFAULT_OPTIONS, callback) {\n  return new Promise(resolve => {\n    const result = {\n      errorCode: 'camera_unavailable',\n      errorMessage: 'launchCamera is not supported for web yet'\n    };\n    if (callback) callback(result);\n    resolve(result);\n  });\n}\nexport function imageLibrary(options = DEFAULT_OPTIONS, callback) {\n  if (options.mediaType !== 'photo') {\n    const result = {\n      errorCode: 'others',\n      errorMessage: 'For now, only photo mediaType is supported for web'\n    };\n    if (callback) callback(result);\n    return Promise.resolve(result);\n  }\n  const input = document.createElement('input');\n  input.style.display = 'none';\n  input.setAttribute('type', 'file');\n  input.setAttribute('accept', getWebMediaType(options.mediaType));\n  if (options.selectionLimit > 1) {\n    input.setAttribute('multiple', 'multiple');\n  }\n  document.body.appendChild(input);\n  return new Promise(resolve => {\n    input.addEventListener('change', async () => {\n      if (input.files) {\n        if (options.selectionLimit <= 1) {\n          const img = await readFile(input.files[0], {\n            includeBase64: options.includeBase64\n          });\n          const result = {\n            assets: [img]\n          };\n          if (callback) callback(result);\n          resolve(result);\n        } else {\n          const imgs = await Promise.all(Array.from(input.files).map(file => readFile(file, {\n            includeBase64: options.includeBase64\n          })));\n          const result = {\n            didCancel: false,\n            assets: imgs\n          };\n          if (callback) callback(result);\n          resolve(result);\n        }\n      }\n      document.body.removeChild(input);\n    });\n    const event = new MouseEvent('click');\n    input.dispatchEvent(event);\n  });\n}\nfunction readFile(targetFile, options) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onerror = () => {\n      reject(new Error(`Failed to read the selected media because the operation failed.`));\n    };\n    reader.onload = ({\n      target\n    }) => {\n      const uri = target?.result;\n      const returnRaw = () => resolve({\n        uri: uri,\n        width: 0,\n        height: 0\n      });\n      if (typeof uri === 'string') {\n        const image = new Image();\n        image.src = uri;\n        image.onload = () => resolve(_objectSpread({\n          uri,\n          width: image.naturalWidth ?? image.width,\n          height: image.naturalHeight ?? image.height\n        }, options.includeBase64 && {\n          base64: uri.substr(uri.indexOf(',') + 1)\n        }));\n        image.onerror = () => returnRaw();\n      } else {\n        returnRaw();\n      }\n    };\n    reader.readAsDataURL(targetFile);\n  });\n}\nfunction getWebMediaType(mediaType) {\n  const webMediaTypes = {\n    photo: 'image/*',\n    video: 'video/*',\n    mixed: 'image/*,video/*'\n  };\n  return webMediaTypes[mediaType] ?? webMediaTypes.photo;\n}","map":{"version":3,"names":["DEFAULT_OPTIONS","mediaType","includeBase64","selectionLimit","camera","options","callback","Promise","resolve","result","errorCode","errorMessage","imageLibrary","input","document","createElement","style","display","setAttribute","getWebMediaType","body","appendChild","addEventListener","files","img","readFile","assets","imgs","all","Array","from","map","file","didCancel","removeChild","event","MouseEvent","dispatchEvent","targetFile","reject","reader","FileReader","onerror","Error","onload","target","uri","returnRaw","width","height","image","Image","src","_objectSpread","naturalWidth","naturalHeight","base64","substr","indexOf","readAsDataURL","webMediaTypes","photo","video","mixed"],"sources":["C:/Users/DinhPhongIUH/Desktop/nhap/Yanuo_mobile_Redux/node_modules/react-native-image-picker/src/platforms/web.ts"],"sourcesContent":["import {\n  CameraOptions,\n  ImageLibraryOptions,\n  Callback,\n  ImagePickerResponse,\n  ErrorCode,\n  Asset,\n  MediaType,\n} from '../types';\n\nconst DEFAULT_OPTIONS: Pick<\n  ImageLibraryOptions & CameraOptions,\n  'mediaType' | 'includeBase64' | 'selectionLimit'\n> = {\n  mediaType: 'photo',\n  includeBase64: false,\n  selectionLimit: 1,\n};\n\nexport function camera(\n  options: ImageLibraryOptions = DEFAULT_OPTIONS,\n  callback?: Callback,\n): Promise<ImagePickerResponse> {\n  return new Promise((resolve) => {\n    const result = {\n      errorCode: 'camera_unavailable' as ErrorCode,\n      errorMessage: 'launchCamera is not supported for web yet',\n    };\n\n    if (callback) callback(result);\n\n    resolve(result);\n  });\n}\n\nexport function imageLibrary(\n  options: ImageLibraryOptions = DEFAULT_OPTIONS,\n  callback?: Callback,\n): Promise<ImagePickerResponse> {\n  // Only supporting 'photo' mediaType for now.\n  if (options.mediaType !== 'photo') {\n    const result = {\n      errorCode: 'others' as ErrorCode,\n      errorMessage: 'For now, only photo mediaType is supported for web',\n    };\n\n    if (callback) callback(result);\n\n    return Promise.resolve(result);\n  }\n\n  const input = document.createElement('input');\n  input.style.display = 'none';\n  input.setAttribute('type', 'file');\n  input.setAttribute('accept', getWebMediaType(options.mediaType));\n\n  if (options.selectionLimit! > 1) {\n    input.setAttribute('multiple', 'multiple');\n  }\n\n  document.body.appendChild(input);\n\n  return new Promise((resolve) => {\n    input.addEventListener('change', async () => {\n      if (input.files) {\n        if (options.selectionLimit! <= 1) {\n          const img = await readFile(input.files[0], {\n            includeBase64: options.includeBase64,\n          });\n\n          const result = {assets: [img]};\n\n          if (callback) callback(result);\n\n          resolve(result);\n        } else {\n          const imgs = await Promise.all(\n            Array.from(input.files).map((file) =>\n              readFile(file, {includeBase64: options.includeBase64}),\n            ),\n          );\n\n          const result = {\n            didCancel: false,\n            assets: imgs,\n          };\n\n          if (callback) callback(result);\n\n          resolve(result);\n        }\n      }\n      document.body.removeChild(input);\n    });\n\n    const event = new MouseEvent('click');\n    input.dispatchEvent(event);\n  });\n}\n\nfunction readFile(\n  targetFile: Blob,\n  options: Partial<ImageLibraryOptions>,\n): Promise<Asset> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onerror = () => {\n      reject(\n        new Error(\n          `Failed to read the selected media because the operation failed.`,\n        ),\n      );\n    };\n    reader.onload = ({target}) => {\n      const uri = target?.result;\n\n      const returnRaw = () =>\n        resolve({\n          uri: uri as string,\n          width: 0,\n          height: 0,\n        });\n\n      if (typeof uri === 'string') {\n        const image = new Image();\n        image.src = uri;\n        image.onload = () =>\n          resolve({\n            uri,\n            width: image.naturalWidth ?? image.width,\n            height: image.naturalHeight ?? image.height,\n            // The blob's result cannot be directly decoded as Base64 without\n            // first removing the Data-URL declaration preceding the\n            // Base64-encoded data. To retrieve only the Base64 encoded string,\n            // first remove data:*/*;base64, from the result.\n            // https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL\n            ...(options.includeBase64 && {\n              base64: uri.substr(uri.indexOf(',') + 1),\n            }),\n          });\n        image.onerror = () => returnRaw();\n      } else {\n        returnRaw();\n      }\n    };\n\n    reader.readAsDataURL(targetFile);\n  });\n}\n\nfunction getWebMediaType(mediaType: MediaType) {\n  const webMediaTypes = {\n    photo: 'image/*',\n    video: 'video/*',\n    mixed: 'image/*,video/*',\n  };\n\n  return webMediaTypes[mediaType] ?? webMediaTypes.photo;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}