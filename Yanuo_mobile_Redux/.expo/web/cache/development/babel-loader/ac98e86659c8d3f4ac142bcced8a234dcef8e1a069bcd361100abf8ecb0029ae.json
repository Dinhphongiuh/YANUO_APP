{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport VelocityTracker from './VelocityTracker';\nconst MAX_POINTERS = 20;\nexport default class PointerTracker {\n  constructor() {\n    _defineProperty(this, \"velocityTracker\", new VelocityTracker());\n    _defineProperty(this, \"trackedPointers\", new Map());\n    _defineProperty(this, \"touchEventsIds\", new Map());\n    _defineProperty(this, \"lastMovedPointerId\", void 0);\n    _defineProperty(this, \"cachedAverages\", {\n      x: 0,\n      y: 0\n    });\n    this.lastMovedPointerId = NaN;\n    for (let i = 0; i < MAX_POINTERS; ++i) {\n      this.touchEventsIds.set(i, NaN);\n    }\n  }\n  addToTracker(event) {\n    if (this.trackedPointers.has(event.pointerId)) {\n      return;\n    }\n    this.lastMovedPointerId = event.pointerId;\n    const newElement = {\n      lastX: event.x,\n      lastY: event.y,\n      timeStamp: event.time,\n      velocityX: 0,\n      velocityY: 0\n    };\n    this.trackedPointers.set(event.pointerId, newElement);\n    this.mapTouchEventId(event.pointerId);\n    this.cachedAverages = {\n      x: this.getLastAvgX(),\n      y: this.getLastAvgY()\n    };\n  }\n  removeFromTracker(pointerId) {\n    this.trackedPointers.delete(pointerId);\n    this.removeMappedTouchId(pointerId);\n  }\n  track(event) {\n    const element = this.trackedPointers.get(event.pointerId);\n    if (!element) {\n      return;\n    }\n    this.lastMovedPointerId = event.pointerId;\n    this.velocityTracker.add(event);\n    const [velocityX, velocityY] = this.velocityTracker.getVelocity();\n    element.velocityX = velocityX;\n    element.velocityY = velocityY;\n    element.lastX = event.x;\n    element.lastY = event.y;\n    this.trackedPointers.set(event.pointerId, element);\n    const avgX = this.getLastAvgX();\n    const avgY = this.getLastAvgY();\n    this.cachedAverages = {\n      x: avgX,\n      y: avgY\n    };\n  }\n  mapTouchEventId(id) {\n    for (const [mappedId, touchId] of this.touchEventsIds) {\n      if (isNaN(touchId)) {\n        this.touchEventsIds.set(mappedId, id);\n        break;\n      }\n    }\n  }\n  removeMappedTouchId(id) {\n    const mappedId = this.getMappedTouchEventId(id);\n    if (!isNaN(mappedId)) {\n      this.touchEventsIds.set(mappedId, NaN);\n    }\n  }\n  getMappedTouchEventId(touchEventId) {\n    for (const [key, value] of this.touchEventsIds.entries()) {\n      if (value === touchEventId) {\n        return key;\n      }\n    }\n    return NaN;\n  }\n  getVelocityX(pointerId) {\n    var _this$trackedPointers;\n    return (_this$trackedPointers = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers === void 0 ? void 0 : _this$trackedPointers.velocityX;\n  }\n  getVelocityY(pointerId) {\n    var _this$trackedPointers2;\n    return (_this$trackedPointers2 = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers2 === void 0 ? void 0 : _this$trackedPointers2.velocityY;\n  }\n  getLastX(pointerId) {\n    if (pointerId !== undefined) {\n      var _this$trackedPointers3;\n      return (_this$trackedPointers3 = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers3 === void 0 ? void 0 : _this$trackedPointers3.lastX;\n    } else {\n      var _this$trackedPointers4;\n      return (_this$trackedPointers4 = this.trackedPointers.get(this.lastMovedPointerId)) === null || _this$trackedPointers4 === void 0 ? void 0 : _this$trackedPointers4.lastX;\n    }\n  }\n  getLastY(pointerId) {\n    if (pointerId !== undefined) {\n      var _this$trackedPointers5;\n      return (_this$trackedPointers5 = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers5 === void 0 ? void 0 : _this$trackedPointers5.lastY;\n    } else {\n      var _this$trackedPointers6;\n      return (_this$trackedPointers6 = this.trackedPointers.get(this.lastMovedPointerId)) === null || _this$trackedPointers6 === void 0 ? void 0 : _this$trackedPointers6.lastY;\n    }\n  }\n  getLastAvgX() {\n    const avgX = this.getSumX() / this.trackedPointers.size;\n    return isNaN(avgX) ? this.cachedAverages.x : avgX;\n  }\n  getLastAvgY() {\n    const avgY = this.getSumY() / this.trackedPointers.size;\n    return isNaN(avgY) ? this.cachedAverages.y : avgY;\n  }\n  getSumX(ignoredPointer) {\n    let sumX = 0;\n    this.trackedPointers.forEach((value, key) => {\n      if (key !== ignoredPointer) {\n        sumX += value.lastX;\n      }\n    });\n    return sumX;\n  }\n  getSumY(ignoredPointer) {\n    let sumY = 0;\n    this.trackedPointers.forEach((value, key) => {\n      if (key !== ignoredPointer) {\n        sumY += value.lastY;\n      }\n    });\n    return sumY;\n  }\n  getTrackedPointersCount() {\n    return this.trackedPointers.size;\n  }\n  getTrackedPointersID() {\n    const keys = [];\n    this.trackedPointers.forEach((_value, key) => {\n      keys.push(key);\n    });\n    return keys;\n  }\n  getData() {\n    return this.trackedPointers;\n  }\n  resetTracker() {\n    this.velocityTracker.reset();\n    this.trackedPointers.clear();\n    this.lastMovedPointerId = NaN;\n    for (let i = 0; i < MAX_POINTERS; ++i) {\n      this.touchEventsIds.set(i, NaN);\n    }\n  }\n  static shareCommonPointers(stPointers, ndPointers) {\n    return stPointers.some(pointerId => ndPointers.includes(pointerId));\n  }\n}","map":{"version":3,"names":["VelocityTracker","MAX_POINTERS","PointerTracker","constructor","_defineProperty","Map","x","y","lastMovedPointerId","NaN","i","touchEventsIds","set","addToTracker","event","trackedPointers","has","pointerId","newElement","lastX","lastY","timeStamp","time","velocityX","velocityY","mapTouchEventId","cachedAverages","getLastAvgX","getLastAvgY","removeFromTracker","delete","removeMappedTouchId","track","element","get","velocityTracker","add","getVelocity","avgX","avgY","id","mappedId","touchId","isNaN","getMappedTouchEventId","touchEventId","key","value","entries","getVelocityX","_this$trackedPointers","getVelocityY","_this$trackedPointers2","getLastX","undefined","_this$trackedPointers3","_this$trackedPointers4","getLastY","_this$trackedPointers5","_this$trackedPointers6","getSumX","size","getSumY","ignoredPointer","sumX","forEach","sumY","getTrackedPointersCount","getTrackedPointersID","keys","_value","push","getData","resetTracker","reset","clear","shareCommonPointers","stPointers","ndPointers","some","includes"],"sources":["C:\\Users\\DinhPhongIUH\\Desktop\\nhap\\Yanuo_mobile_Redux\\node_modules\\react-native-gesture-handler\\lib\\module\\web\\tools\\PointerTracker.ts"],"sourcesContent":["import { AdaptedEvent } from '../interfaces';\nimport VelocityTracker from './VelocityTracker';\n\nexport interface TrackerElement {\n  lastX: number;\n  lastY: number;\n\n  timeStamp: number;\n\n  velocityX: number;\n  velocityY: number;\n}\n\nconst MAX_POINTERS = 20;\n\nexport default class PointerTracker {\n  private velocityTracker = new VelocityTracker();\n  private trackedPointers: Map<number, TrackerElement> = new Map<\n    number,\n    TrackerElement\n  >();\n\n  private touchEventsIds: Map<number, number> = new Map<number, number>();\n\n  private lastMovedPointerId: number;\n\n  private cachedAverages: { x: number; y: number } = { x: 0, y: 0 };\n\n  public constructor() {\n    this.lastMovedPointerId = NaN;\n\n    for (let i = 0; i < MAX_POINTERS; ++i) {\n      this.touchEventsIds.set(i, NaN);\n    }\n  }\n\n  public addToTracker(event: AdaptedEvent): void {\n    if (this.trackedPointers.has(event.pointerId)) {\n      return;\n    }\n\n    this.lastMovedPointerId = event.pointerId;\n\n    const newElement: TrackerElement = {\n      lastX: event.x,\n      lastY: event.y,\n      timeStamp: event.time,\n      velocityX: 0,\n      velocityY: 0,\n    };\n\n    this.trackedPointers.set(event.pointerId, newElement);\n    this.mapTouchEventId(event.pointerId);\n\n    this.cachedAverages = {\n      x: this.getLastAvgX(),\n      y: this.getLastAvgY(),\n    };\n  }\n\n  public removeFromTracker(pointerId: number): void {\n    this.trackedPointers.delete(pointerId);\n    this.removeMappedTouchId(pointerId);\n  }\n\n  public track(event: AdaptedEvent): void {\n    const element: TrackerElement = this.trackedPointers.get(\n      event.pointerId\n    ) as TrackerElement;\n\n    if (!element) {\n      return;\n    }\n\n    this.lastMovedPointerId = event.pointerId;\n\n    this.velocityTracker.add(event);\n    const [velocityX, velocityY] = this.velocityTracker.getVelocity();\n\n    element.velocityX = velocityX;\n    element.velocityY = velocityY;\n\n    element.lastX = event.x;\n    element.lastY = event.y;\n\n    this.trackedPointers.set(event.pointerId, element);\n\n    const avgX: number = this.getLastAvgX();\n    const avgY: number = this.getLastAvgY();\n\n    this.cachedAverages = {\n      x: avgX,\n      y: avgY,\n    };\n  }\n\n  //Mapping TouchEvents ID\n  private mapTouchEventId(id: number): void {\n    for (const [mappedId, touchId] of this.touchEventsIds) {\n      if (isNaN(touchId)) {\n        this.touchEventsIds.set(mappedId, id);\n        break;\n      }\n    }\n  }\n\n  private removeMappedTouchId(id: number): void {\n    const mappedId: number = this.getMappedTouchEventId(id);\n    if (!isNaN(mappedId)) {\n      this.touchEventsIds.set(mappedId, NaN);\n    }\n  }\n\n  public getMappedTouchEventId(touchEventId: number): number {\n    for (const [key, value] of this.touchEventsIds.entries()) {\n      if (value === touchEventId) {\n        return key;\n      }\n    }\n\n    return NaN;\n  }\n\n  public getVelocityX(pointerId: number): number {\n    return this.trackedPointers.get(pointerId)?.velocityX as number;\n  }\n  public getVelocityY(pointerId: number): number {\n    return this.trackedPointers.get(pointerId)?.velocityY as number;\n  }\n\n  /**\n   * Returns X coordinate of last moved pointer\n   */\n  public getLastX(): number;\n\n  /**\n   *\n   * @param pointerId\n   * Returns X coordinate of given pointer\n   */\n  // eslint-disable-next-line @typescript-eslint/unified-signatures\n  public getLastX(pointerId: number): number;\n\n  public getLastX(pointerId?: number): number {\n    if (pointerId !== undefined) {\n      return this.trackedPointers.get(pointerId)?.lastX as number;\n    } else {\n      return this.trackedPointers.get(this.lastMovedPointerId)?.lastX as number;\n    }\n  }\n\n  /**\n   * Returns Y coordinate of last moved pointer\n   */\n  public getLastY(): number;\n\n  /**\n   *\n   * @param pointerId\n   * Returns Y coordinate of given pointer\n   */\n  // eslint-disable-next-line @typescript-eslint/unified-signatures\n  public getLastY(pointerId: number): number;\n\n  public getLastY(pointerId?: number): number {\n    if (pointerId !== undefined) {\n      return this.trackedPointers.get(pointerId)?.lastY as number;\n    } else {\n      return this.trackedPointers.get(this.lastMovedPointerId)?.lastY as number;\n    }\n  }\n\n  // Some handlers use these methods to send average values in native event.\n  // This may happen when pointers have already been removed from tracker (i.e. pointerup event).\n  // In situation when NaN would be sent as a response, we return cached value.\n  // That prevents handlers from crashing\n  public getLastAvgX(): number {\n    const avgX: number = this.getSumX() / this.trackedPointers.size;\n    return isNaN(avgX) ? this.cachedAverages.x : avgX;\n  }\n  public getLastAvgY(): number {\n    const avgY: number = this.getSumY() / this.trackedPointers.size;\n    return isNaN(avgY) ? this.cachedAverages.y : avgY;\n  }\n  public getSumX(ignoredPointer?: number): number {\n    let sumX = 0;\n\n    this.trackedPointers.forEach((value, key) => {\n      if (key !== ignoredPointer) {\n        sumX += value.lastX;\n      }\n    });\n\n    return sumX;\n  }\n  public getSumY(ignoredPointer?: number): number {\n    let sumY = 0;\n\n    this.trackedPointers.forEach((value, key) => {\n      if (key !== ignoredPointer) {\n        sumY += value.lastY;\n      }\n    });\n\n    return sumY;\n  }\n  public getTrackedPointersCount(): number {\n    return this.trackedPointers.size;\n  }\n  public getTrackedPointersID(): number[] {\n    const keys: number[] = [];\n\n    this.trackedPointers.forEach((_value, key) => {\n      keys.push(key);\n    });\n\n    return keys;\n  }\n\n  public getData(): Map<number, TrackerElement> {\n    return this.trackedPointers;\n  }\n\n  public resetTracker(): void {\n    this.velocityTracker.reset();\n    this.trackedPointers.clear();\n    this.lastMovedPointerId = NaN;\n\n    for (let i = 0; i < MAX_POINTERS; ++i) {\n      this.touchEventsIds.set(i, NaN);\n    }\n  }\n\n  public static shareCommonPointers(\n    stPointers: number[],\n    ndPointers: number[]\n  ): boolean {\n    return stPointers.some((pointerId) => ndPointers.includes(pointerId));\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}