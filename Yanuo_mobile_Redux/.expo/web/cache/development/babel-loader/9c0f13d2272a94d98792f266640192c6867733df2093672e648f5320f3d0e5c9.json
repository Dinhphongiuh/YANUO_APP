{"ast":null,"code":"import * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nexport function SceneView(_ref) {\n  let {\n    children,\n    navigationState,\n    lazy,\n    layout,\n    index,\n    lazyPreloadDistance,\n    addEnterListener,\n    style\n  } = _ref;\n  const [isLoading, setIsLoading] = React.useState(Math.abs(navigationState.index - index) > lazyPreloadDistance);\n  if (isLoading && Math.abs(navigationState.index - index) <= lazyPreloadDistance) {\n    setIsLoading(false);\n  }\n  React.useEffect(() => {\n    const handleEnter = value => {\n      if (value === index) {\n        setIsLoading(prevState => {\n          if (prevState) {\n            return false;\n          }\n          return prevState;\n        });\n      }\n    };\n    let unsubscribe;\n    let timer;\n    if (lazy && isLoading) {\n      unsubscribe = addEnterListener(handleEnter);\n    } else if (isLoading) {\n      timer = setTimeout(() => setIsLoading(false), 0);\n    }\n    return () => {\n      var _unsubscribe;\n      (_unsubscribe = unsubscribe) === null || _unsubscribe === void 0 ? void 0 : _unsubscribe();\n      clearTimeout(timer);\n    };\n  }, [addEnterListener, index, isLoading, lazy]);\n  const focused = navigationState.index === index;\n  return React.createElement(View, {\n    accessibilityElementsHidden: !focused,\n    importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n    style: [styles.route, layout.width ? {\n      width: layout.width\n    } : focused ? StyleSheet.absoluteFill : null, style]\n  }, focused || layout.width ? children({\n    loading: isLoading\n  }) : null);\n}\nconst styles = StyleSheet.create({\n  route: {\n    flex: 1,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"names":["React","StyleSheet","View","SceneView","_ref","children","navigationState","lazy","layout","index","lazyPreloadDistance","addEnterListener","style","isLoading","setIsLoading","useState","Math","abs","useEffect","handleEnter","value","prevState","unsubscribe","timer","setTimeout","_unsubscribe","clearTimeout","focused","createElement","accessibilityElementsHidden","importantForAccessibility","styles","route","width","absoluteFill","loading","create","flex","overflow"],"sources":["C:\\Users\\DinhPhongIUH\\Desktop\\nhap\\Yanuo_mobile_Redux\\node_modules\\react-native-tab-view\\src\\SceneView.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleProp, StyleSheet, View, ViewStyle } from 'react-native';\n\nimport type {\n  EventEmitterProps,\n  NavigationState,\n  Route,\n  SceneRendererProps,\n} from './types';\n\ntype Props<T extends Route> = SceneRendererProps &\n  EventEmitterProps & {\n    navigationState: NavigationState<T>;\n    lazy: boolean;\n    lazyPreloadDistance: number;\n    index: number;\n    children: (props: { loading: boolean }) => React.ReactNode;\n    style?: StyleProp<ViewStyle>;\n  };\n\nexport function SceneView<T extends Route>({\n  children,\n  navigationState,\n  lazy,\n  layout,\n  index,\n  lazyPreloadDistance,\n  addEnterListener,\n  style,\n}: Props<T>) {\n  const [isLoading, setIsLoading] = React.useState(\n    Math.abs(navigationState.index - index) > lazyPreloadDistance\n  );\n\n  if (\n    isLoading &&\n    Math.abs(navigationState.index - index) <= lazyPreloadDistance\n  ) {\n    // Always render the route when it becomes focused\n    setIsLoading(false);\n  }\n\n  React.useEffect(() => {\n    const handleEnter = (value: number) => {\n      // If we're entering the current route, we need to load it\n      if (value === index) {\n        setIsLoading((prevState) => {\n          if (prevState) {\n            return false;\n          }\n          return prevState;\n        });\n      }\n    };\n\n    let unsubscribe: (() => void) | undefined;\n    let timer: number;\n\n    if (lazy && isLoading) {\n      // If lazy mode is enabled, listen to when we enter screens\n      unsubscribe = addEnterListener(handleEnter);\n    } else if (isLoading) {\n      // If lazy mode is not enabled, render the scene with a delay if not loaded already\n      // This improves the initial startup time as the scene is no longer blocking\n      timer = setTimeout(() => setIsLoading(false), 0);\n    }\n\n    return () => {\n      unsubscribe?.();\n      clearTimeout(timer);\n    };\n  }, [addEnterListener, index, isLoading, lazy]);\n\n  const focused = navigationState.index === index;\n\n  return (\n    <View\n      accessibilityElementsHidden={!focused}\n      importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n      style={[\n        styles.route,\n        // If we don't have the layout yet, make the focused screen fill the container\n        // This avoids delay before we are able to render pages side by side\n        layout.width\n          ? { width: layout.width }\n          : focused\n          ? StyleSheet.absoluteFill\n          : null,\n        style,\n      ]}\n    >\n      {\n        // Only render the route only if it's either focused or layout is available\n        // When layout is not available, we must not render unfocused routes\n        // so that the focused route can fill the screen\n        focused || layout.width ? children({ loading: isLoading }) : null\n      }\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  route: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAoB9B,OAAO,SAASC,SAASA,CAAAC,IAAA,EASZ;EAAA,IAT8B;IACzCC,QAAQ;IACRC,eAAe;IACfC,IAAI;IACJC,MAAM;IACNC,KAAK;IACLC,mBAAmB;IACnBC,gBAAgB;IAChBC;EACQ,CAAC,GAAAR,IAAA;EACT,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGd,KAAK,CAACe,QAAQ,CAC9CC,IAAI,CAACC,GAAG,CAACX,eAAe,CAACG,KAAK,GAAGA,KAAK,CAAC,GAAGC,mBAAmB,CAC9D;EAED,IACEG,SAAS,IACTG,IAAI,CAACC,GAAG,CAACX,eAAe,CAACG,KAAK,GAAGA,KAAK,CAAC,IAAIC,mBAAmB,EAC9D;IAEAI,YAAY,CAAC,KAAK,CAAC;EACrB;EAEAd,KAAK,CAACkB,SAAS,CAAC,MAAM;IACpB,MAAMC,WAAW,GAAIC,KAAa,IAAK;MAErC,IAAIA,KAAK,KAAKX,KAAK,EAAE;QACnBK,YAAY,CAAEO,SAAS,IAAK;UAC1B,IAAIA,SAAS,EAAE;YACb,OAAO,KAAK;UACd;UACA,OAAOA,SAAS;QAClB,CAAC,CAAC;MACJ;IACF,CAAC;IAED,IAAIC,WAAqC;IACzC,IAAIC,KAAa;IAEjB,IAAIhB,IAAI,IAAIM,SAAS,EAAE;MAErBS,WAAW,GAAGX,gBAAgB,CAACQ,WAAW,CAAC;IAC7C,CAAC,MAAM,IAAIN,SAAS,EAAE;MAGpBU,KAAK,GAAGC,UAAU,CAAC,MAAMV,YAAY,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;IAClD;IAEA,OAAO,MAAM;MAAA,IAAAW,YAAA;MACX,CAAAA,YAAA,GAAAH,WAAW,cAAAG,YAAA,uBAAXA,YAAA,EAAe;MACfC,YAAY,CAACH,KAAK,CAAC;IACrB,CAAC;EACH,CAAC,EAAE,CAACZ,gBAAgB,EAAEF,KAAK,EAAEI,SAAS,EAAEN,IAAI,CAAC,CAAC;EAE9C,MAAMoB,OAAO,GAAGrB,eAAe,CAACG,KAAK,KAAKA,KAAK;EAE/C,OACET,KAAA,CAAA4B,aAAA,CAAC1B,IAAI;IACH2B,2BAA2B,EAAE,CAACF,OAAQ;IACtCG,yBAAyB,EAAEH,OAAO,GAAG,MAAM,GAAG,qBAAsB;IACpEf,KAAK,EAAE,CACLmB,MAAM,CAACC,KAAK,EAGZxB,MAAM,CAACyB,KAAK,GACR;MAAEA,KAAK,EAAEzB,MAAM,CAACyB;IAAM,CAAC,GACvBN,OAAO,GACP1B,UAAU,CAACiC,YAAY,GACvB,IAAI,EACRtB,KAAK;EACL,GAMAe,OAAO,IAAInB,MAAM,CAACyB,KAAK,GAAG5B,QAAQ,CAAC;IAAE8B,OAAO,EAAEtB;EAAU,CAAC,CAAC,GAAG,IAAI,CAE9D;AAEX;AAEA,MAAMkB,MAAM,GAAG9B,UAAU,CAACmC,MAAM,CAAC;EAC/BJ,KAAK,EAAE;IACLK,IAAI,EAAE,CAAC;IACPC,QAAQ,EAAE;EACZ;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}