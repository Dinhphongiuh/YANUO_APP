{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\DinhPhongIUH\\\\Desktop\\\\nhap\\\\Yanuo_mobile_Redux\\\\node_modules\\\\react-native-svg-uri\\\\index.js\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { Component } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport PropTypes from 'prop-types';\nimport xmldom from 'xmldom';\nimport resolveAssetSource from 'react-native/Libraries/Image/resolveAssetSource';\nimport Svg, { Circle, Ellipse, G, LinearGradient, RadialGradient, Line, Path, Polygon, Polyline, Rect, Text, TSpan, Defs, Stop } from 'react-native-svg';\nimport * as utils from './utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ACCEPTED_SVG_ELEMENTS = ['svg', 'g', 'circle', 'path', 'rect', 'defs', 'line', 'linearGradient', 'radialGradient', 'stop', 'ellipse', 'polygon', 'polyline', 'text', 'tspan'];\nconst SVG_ATTS = ['viewBox', 'width', 'height'];\nconst G_ATTS = ['id'];\nconst CIRCLE_ATTS = ['cx', 'cy', 'r'];\nconst PATH_ATTS = ['d'];\nconst RECT_ATTS = ['width', 'height'];\nconst LINE_ATTS = ['x1', 'y1', 'x2', 'y2'];\nconst LINEARG_ATTS = LINE_ATTS.concat(['id', 'gradientUnits']);\nconst RADIALG_ATTS = CIRCLE_ATTS.concat(['id', 'gradientUnits']);\nconst STOP_ATTS = ['offset'];\nconst ELLIPSE_ATTS = ['cx', 'cy', 'rx', 'ry'];\nconst TEXT_ATTS = ['fontFamily', 'fontSize', 'fontWeight'];\nconst POLYGON_ATTS = ['points'];\nconst POLYLINE_ATTS = ['points'];\nconst COMMON_ATTS = ['fill', 'fillOpacity', 'stroke', 'strokeWidth', 'strokeOpacity', 'opacity', 'strokeLinecap', 'strokeLinejoin', 'strokeDasharray', 'strokeDashoffset', 'x', 'y', 'rotate', 'scale', 'origin', 'originX', 'originY'];\nlet ind = 0;\nfunction fixYPosition(y, node) {\n  if (node.attributes) {\n    const fontSizeAttr = Object.keys(node.attributes).find(a => node.attributes[a].name === 'font-size');\n    if (fontSizeAttr) {\n      return '' + (parseFloat(y) - parseFloat(node.attributes[fontSizeAttr].value));\n    }\n  }\n  if (!node.parentNode) {\n    return y;\n  }\n  return fixYPosition(y, node.parentNode);\n}\nclass SvgUri extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fill: props.fill,\n      svgXmlData: props.svgXmlData\n    };\n    this.createSVGElement = this.createSVGElement.bind(this);\n    this.obtainComponentAtts = this.obtainComponentAtts.bind(this);\n    this.inspectNode = this.inspectNode.bind(this);\n    this.fetchSVGData = this.fetchSVGData.bind(this);\n    this.isComponentMounted = false;\n    if (props.source) {\n      const source = resolveAssetSource(props.source) || {};\n      this.fetchSVGData(source.uri);\n    }\n  }\n  componentWillMount() {\n    this.isComponentMounted = true;\n  }\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.source) {\n      const source = resolveAssetSource(nextProps.source) || {};\n      const oldSource = resolveAssetSource(this.props.source) || {};\n      if (source.uri !== oldSource.uri) {\n        this.fetchSVGData(source.uri);\n      }\n    }\n    if (nextProps.svgXmlData !== this.props.svgXmlData) {\n      this.setState({\n        svgXmlData: nextProps.svgXmlData\n      });\n    }\n    if (nextProps.fill !== this.props.fill) {\n      this.setState({\n        fill: nextProps.fill\n      });\n    }\n  }\n  componentWillUnmount() {\n    this.isComponentMounted = false;\n  }\n  async fetchSVGData(uri) {\n    let responseXML = null;\n    try {\n      const response = await fetch(uri);\n      responseXML = await response.text();\n    } catch (e) {\n      console.error(\"ERROR SVG\", e);\n    } finally {\n      if (this.isComponentMounted) {\n        this.setState({\n          svgXmlData: responseXML\n        });\n      }\n    }\n    return responseXML;\n  }\n  trimElementChilden(children) {\n    for (child of children) {\n      if (typeof child === 'string') {\n        if (child.trim.length === 0) children.splice(children.indexOf(child), 1);\n      }\n    }\n  }\n  createSVGElement(node, childs) {\n    this.trimElementChilden(childs);\n    let componentAtts = {};\n    const i = ind++;\n    switch (node.nodeName) {\n      case 'svg':\n        componentAtts = this.obtainComponentAtts(node, SVG_ATTS);\n        if (this.props.width) {\n          componentAtts.width = this.props.width;\n        }\n        if (this.props.height) {\n          componentAtts.height = this.props.height;\n        }\n        return _jsxDEV(Svg, _objectSpread(_objectSpread({}, componentAtts), {}, {\n          children: childs\n        }), i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 14\n        }, this);\n      case 'g':\n        componentAtts = this.obtainComponentAtts(node, G_ATTS);\n        return _jsxDEV(G, _objectSpread(_objectSpread({}, componentAtts), {}, {\n          children: childs\n        }), i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 14\n        }, this);\n      case 'path':\n        componentAtts = this.obtainComponentAtts(node, PATH_ATTS);\n        return _jsxDEV(Path, _objectSpread(_objectSpread({}, componentAtts), {}, {\n          children: childs\n        }), i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 14\n        }, this);\n      case 'circle':\n        componentAtts = this.obtainComponentAtts(node, CIRCLE_ATTS);\n        return _jsxDEV(Circle, _objectSpread(_objectSpread({}, componentAtts), {}, {\n          children: childs\n        }), i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 14\n        }, this);\n      case 'rect':\n        componentAtts = this.obtainComponentAtts(node, RECT_ATTS);\n        return _jsxDEV(Rect, _objectSpread(_objectSpread({}, componentAtts), {}, {\n          children: childs\n        }), i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 14\n        }, this);\n      case 'line':\n        componentAtts = this.obtainComponentAtts(node, LINE_ATTS);\n        return _jsxDEV(Line, _objectSpread(_objectSpread({}, componentAtts), {}, {\n          children: childs\n        }), i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 14\n        }, this);\n      case 'defs':\n        return _jsxDEV(Defs, {\n          children: childs\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 14\n        }, this);\n      case 'linearGradient':\n        componentAtts = this.obtainComponentAtts(node, LINEARG_ATTS);\n        return _jsxDEV(LinearGradient, _objectSpread(_objectSpread({}, componentAtts), {}, {\n          children: childs\n        }), i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 14\n        }, this);\n      case 'radialGradient':\n        componentAtts = this.obtainComponentAtts(node, RADIALG_ATTS);\n        return _jsxDEV(RadialGradient, _objectSpread(_objectSpread({}, componentAtts), {}, {\n          children: childs\n        }), i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 14\n        }, this);\n      case 'stop':\n        componentAtts = this.obtainComponentAtts(node, STOP_ATTS);\n        return _jsxDEV(Stop, _objectSpread(_objectSpread({}, componentAtts), {}, {\n          children: childs\n        }), i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 14\n        }, this);\n      case 'ellipse':\n        componentAtts = this.obtainComponentAtts(node, ELLIPSE_ATTS);\n        return _jsxDEV(Ellipse, _objectSpread(_objectSpread({}, componentAtts), {}, {\n          children: childs\n        }), i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 14\n        }, this);\n      case 'polygon':\n        componentAtts = this.obtainComponentAtts(node, POLYGON_ATTS);\n        return _jsxDEV(Polygon, _objectSpread(_objectSpread({}, componentAtts), {}, {\n          children: childs\n        }), i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 14\n        }, this);\n      case 'polyline':\n        componentAtts = this.obtainComponentAtts(node, POLYLINE_ATTS);\n        return _jsxDEV(Polyline, _objectSpread(_objectSpread({}, componentAtts), {}, {\n          children: childs\n        }), i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 14\n        }, this);\n      case 'text':\n        componentAtts = this.obtainComponentAtts(node, TEXT_ATTS);\n        if (componentAtts.y) {\n          componentAtts.y = fixYPosition(componentAtts.y, node);\n        }\n        return _jsxDEV(Text, _objectSpread(_objectSpread({}, componentAtts), {}, {\n          children: childs\n        }), i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 14\n        }, this);\n      case 'tspan':\n        componentAtts = this.obtainComponentAtts(node, TEXT_ATTS);\n        if (componentAtts.y) {\n          componentAtts.y = fixYPosition(componentAtts.y, node);\n        }\n        return _jsxDEV(TSpan, _objectSpread(_objectSpread({}, componentAtts), {}, {\n          children: childs\n        }), i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 14\n        }, this);\n      default:\n        return null;\n    }\n  }\n  obtainComponentAtts({\n    attributes\n  }, enabledAttributes) {\n    const styleAtts = {};\n    Array.from(attributes).forEach(({\n      nodeName,\n      nodeValue\n    }) => {\n      Object.assign(styleAtts, utils.transformStyle({\n        nodeName,\n        nodeValue,\n        fillProp: this.state.fill\n      }));\n    });\n    const componentAtts = Array.from(attributes).map(utils.camelCaseNodeName).map(utils.removePixelsFromNodeValue).filter(utils.getEnabledAttributes(enabledAttributes.concat(COMMON_ATTS))).reduce((acc, {\n      nodeName,\n      nodeValue\n    }) => {\n      acc[nodeName] = this.state.fill && nodeName === 'fill' && nodeValue !== 'none' ? this.state.fill : nodeValue;\n      return acc;\n    }, {});\n    Object.assign(componentAtts, styleAtts);\n    return componentAtts;\n  }\n  inspectNode(node) {\n    if (!ACCEPTED_SVG_ELEMENTS.includes(node.nodeName)) {\n      return null;\n    }\n    const arrayElements = [];\n    if (node.childNodes && node.childNodes.length > 0) {\n      for (let i = 0; i < node.childNodes.length; i++) {\n        const isTextValue = node.childNodes[i].nodeValue;\n        if (isTextValue) {\n          arrayElements.push(node.childNodes[i].nodeValue);\n        } else {\n          const nodo = this.inspectNode(node.childNodes[i]);\n          if (nodo != null) {\n            arrayElements.push(nodo);\n          }\n        }\n      }\n    }\n    return this.createSVGElement(node, arrayElements);\n  }\n  render() {\n    try {\n      if (this.state.svgXmlData == null) {\n        return null;\n      }\n      const inputSVG = this.state.svgXmlData.substring(this.state.svgXmlData.indexOf(\"<svg \"), this.state.svgXmlData.indexOf(\"</svg>\") + 6);\n      const doc = new xmldom.DOMParser().parseFromString(inputSVG);\n      const rootSVG = this.inspectNode(doc.childNodes[0]);\n      return _jsxDEV(View, {\n        style: this.props.style,\n        children: rootSVG\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 11\n      }, this);\n    } catch (e) {\n      console.error(\"ERROR SVG\", e);\n      return null;\n    }\n  }\n}\nSvgUri.propTypes = {\n  style: PropTypes.object,\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  svgXmlData: PropTypes.string,\n  source: PropTypes.any,\n  fill: PropTypes.string\n};\nmodule.exports = SvgUri;","map":{"version":3,"names":["React","Component","View","PropTypes","xmldom","resolveAssetSource","Svg","Circle","Ellipse","G","LinearGradient","RadialGradient","Line","Path","Polygon","Polyline","Rect","Text","TSpan","Defs","Stop","utils","jsxDEV","_jsxDEV","ACCEPTED_SVG_ELEMENTS","SVG_ATTS","G_ATTS","CIRCLE_ATTS","PATH_ATTS","RECT_ATTS","LINE_ATTS","LINEARG_ATTS","concat","RADIALG_ATTS","STOP_ATTS","ELLIPSE_ATTS","TEXT_ATTS","POLYGON_ATTS","POLYLINE_ATTS","COMMON_ATTS","ind","fixYPosition","y","node","attributes","fontSizeAttr","Object","keys","find","a","name","parseFloat","value","parentNode","SvgUri","constructor","props","state","fill","svgXmlData","createSVGElement","bind","obtainComponentAtts","inspectNode","fetchSVGData","isComponentMounted","source","uri","componentWillMount","componentWillReceiveProps","nextProps","oldSource","setState","componentWillUnmount","responseXML","response","fetch","text","e","console","error","trimElementChilden","children","child","trim","length","splice","indexOf","childs","componentAtts","i","nodeName","width","height","_objectSpread","fileName","_jsxFileName","lineNumber","columnNumber","enabledAttributes","styleAtts","Array","from","forEach","nodeValue","assign","transformStyle","fillProp","map","camelCaseNodeName","removePixelsFromNodeValue","filter","getEnabledAttributes","reduce","acc","includes","arrayElements","childNodes","isTextValue","push","nodo","render","inputSVG","substring","doc","DOMParser","parseFromString","rootSVG","style","propTypes","object","oneOfType","string","number","any","module","exports"],"sources":["C:/Users/DinhPhongIUH/Desktop/nhap/Yanuo_mobile_Redux/node_modules/react-native-svg-uri/index.js"],"sourcesContent":["import React, {Component} from \"react\";\nimport {View} from 'react-native';\nimport PropTypes from 'prop-types'\nimport xmldom from 'xmldom';\nimport resolveAssetSource from 'react-native/Libraries/Image/resolveAssetSource';\n\nimport Svg,{\n    Circle,\n    Ellipse,\n    G ,\n    LinearGradient,\n    RadialGradient,\n    Line,\n    Path,\n    Polygon,\n    Polyline,\n    Rect,\n    Text,\n    TSpan,\n    Defs,\n    Stop\n} from 'react-native-svg';\n\nimport * as utils from './utils';\n\nconst ACCEPTED_SVG_ELEMENTS = [\n  'svg',\n  'g',\n  'circle',\n  'path',\n  'rect',\n  'defs',\n  'line',\n  'linearGradient',\n  'radialGradient',\n  'stop',\n  'ellipse',\n  'polygon',\n  'polyline',\n  'text',\n  'tspan'\n];\n\n// Attributes from SVG elements that are mapped directly.\nconst SVG_ATTS = ['viewBox', 'width', 'height'];\nconst G_ATTS = ['id'];\n\nconst CIRCLE_ATTS = ['cx', 'cy', 'r'];\nconst PATH_ATTS = ['d'];\nconst RECT_ATTS = ['width', 'height'];\nconst LINE_ATTS = ['x1', 'y1', 'x2', 'y2'];\nconst LINEARG_ATTS = LINE_ATTS.concat(['id', 'gradientUnits']);\nconst RADIALG_ATTS = CIRCLE_ATTS.concat(['id', 'gradientUnits']);\nconst STOP_ATTS = ['offset'];\nconst ELLIPSE_ATTS = ['cx', 'cy', 'rx', 'ry'];\n\nconst TEXT_ATTS = ['fontFamily', 'fontSize', 'fontWeight']\n\nconst POLYGON_ATTS = ['points'];\nconst POLYLINE_ATTS = ['points'];\n\nconst COMMON_ATTS = ['fill', 'fillOpacity', 'stroke', 'strokeWidth', 'strokeOpacity', 'opacity',\n    'strokeLinecap', 'strokeLinejoin',\n    'strokeDasharray', 'strokeDashoffset', 'x', 'y', 'rotate', 'scale', 'origin', 'originX', 'originY'];\n\nlet ind = 0;\n\nfunction fixYPosition (y, node) {\n  if (node.attributes) {\n    const fontSizeAttr = Object.keys(node.attributes).find(a => node.attributes[a].name === 'font-size');\n    if (fontSizeAttr) {\n      return '' + (parseFloat(y) - parseFloat(node.attributes[fontSizeAttr].value));\n    }\n  }\n  if (!node.parentNode) {\n    return y;\n  }\n  return fixYPosition(y, node.parentNode)\n}\n\nclass SvgUri extends Component{\n\n  constructor(props){\n    super(props);\n\n    this.state = {fill: props.fill, svgXmlData: props.svgXmlData};\n\n    this.createSVGElement     = this.createSVGElement.bind(this);\n    this.obtainComponentAtts  = this.obtainComponentAtts.bind(this);\n    this.inspectNode          = this.inspectNode.bind(this);\n    this.fetchSVGData         = this.fetchSVGData.bind(this);\n\n    this.isComponentMounted   = false;\n\n    // Gets the image data from an URL or a static file\n    if (props.source) {\n      const source = resolveAssetSource(props.source) || {};\n      this.fetchSVGData(source.uri);\n    }\n  }\n\n  componentWillMount() {\n    this.isComponentMounted = true;\n  }\n\n  componentWillReceiveProps (nextProps){\n    if (nextProps.source) {\n      const source = resolveAssetSource(nextProps.source) || {};\n      const oldSource = resolveAssetSource(this.props.source) || {};\n      if(source.uri !== oldSource.uri){\n        this.fetchSVGData(source.uri);\n      }\n    }\n\n    if (nextProps.svgXmlData !== this.props.svgXmlData) {\n      this.setState({ svgXmlData: nextProps.svgXmlData });\n    }\n\n    if (nextProps.fill !== this.props.fill) {\n      this.setState({ fill: nextProps.fill });\n    }\n  }\n\n  componentWillUnmount() {\n    this.isComponentMounted = false\n  }\n\n  async fetchSVGData(uri){\n    let responseXML = null;\n    try {\n      const response = await fetch(uri);\n      responseXML = await response.text();\n    } catch(e) {\n      console.error(\"ERROR SVG\", e);\n    } finally {\n      if (this.isComponentMounted) {\n        this.setState({svgXmlData:responseXML});\n      }\n    }\n\n    return responseXML;\n  }\n   \n  // Remove empty strings from children array  \n  trimElementChilden(children) {\n    for (child of children) {\n      if (typeof child === 'string') {\n        if (child.trim.length === 0)\n          children.splice(children.indexOf(child), 1); \n      }\n    }\n  }\n\n  createSVGElement(node, childs){\n    this.trimElementChilden(childs);\n    let componentAtts = {};\n    const i = ind++;\n    switch (node.nodeName) {\n    case 'svg':\n      componentAtts = this.obtainComponentAtts(node, SVG_ATTS);\n      if (this.props.width) {\n        componentAtts.width = this.props.width;\n      }\n      if (this.props.height) {\n        componentAtts.height = this.props.height;\n      }\n\n      return <Svg key={i} {...componentAtts}>{childs}</Svg>;\n    case 'g':\n      componentAtts = this.obtainComponentAtts(node, G_ATTS);\n      return <G key={i} {...componentAtts}>{childs}</G>;\n    case 'path':\n      componentAtts = this.obtainComponentAtts(node, PATH_ATTS);\n      return <Path key={i} {...componentAtts}>{childs}</Path>;\n    case 'circle':\n      componentAtts = this.obtainComponentAtts(node, CIRCLE_ATTS);\n      return <Circle key={i} {...componentAtts}>{childs}</Circle>;\n    case 'rect':\n      componentAtts = this.obtainComponentAtts(node, RECT_ATTS);\n      return <Rect key={i} {...componentAtts}>{childs}</Rect>;\n    case 'line':\n      componentAtts = this.obtainComponentAtts(node, LINE_ATTS);\n      return <Line key={i} {...componentAtts}>{childs}</Line>;\n    case 'defs':\n      return <Defs key={i}>{childs}</Defs>;\n    case 'linearGradient':\n      componentAtts = this.obtainComponentAtts(node, LINEARG_ATTS);\n      return <LinearGradient key={i} {...componentAtts}>{childs}</LinearGradient>;\n    case 'radialGradient':\n      componentAtts = this.obtainComponentAtts(node, RADIALG_ATTS);\n      return <RadialGradient key={i} {...componentAtts}>{childs}</RadialGradient>;\n    case 'stop':\n      componentAtts = this.obtainComponentAtts(node, STOP_ATTS);\n      return <Stop key={i} {...componentAtts}>{childs}</Stop>;\n    case 'ellipse':\n      componentAtts = this.obtainComponentAtts(node, ELLIPSE_ATTS);\n      return <Ellipse key={i} {...componentAtts}>{childs}</Ellipse>;\n    case 'polygon':\n      componentAtts = this.obtainComponentAtts(node, POLYGON_ATTS);\n      return <Polygon key={i} {...componentAtts}>{childs}</Polygon>;\n    case 'polyline':\n      componentAtts = this.obtainComponentAtts(node, POLYLINE_ATTS);\n      return <Polyline key={i} {...componentAtts}>{childs}</Polyline>;\n    case 'text':\n      componentAtts = this.obtainComponentAtts(node, TEXT_ATTS);\n      if (componentAtts.y) {\n        componentAtts.y = fixYPosition(componentAtts.y, node)\n      }\n      return <Text key={i} {...componentAtts}>{childs}</Text>;\n    case 'tspan':\n      componentAtts = this.obtainComponentAtts(node, TEXT_ATTS);\n      if (componentAtts.y) {\n        componentAtts.y = fixYPosition(componentAtts.y, node)\n      }\n      return <TSpan key={i} {...componentAtts}>{childs}</TSpan>;\n    default:\n      return null;\n    }\n  }\n\n  obtainComponentAtts({attributes}, enabledAttributes) {\n    const styleAtts = {};\n    Array.from(attributes).forEach(({nodeName, nodeValue}) => {\n      Object.assign(styleAtts, utils.transformStyle({\n        nodeName,\n        nodeValue,\n        fillProp: this.state.fill\n      }));\n    });\n\n     const componentAtts =  Array.from(attributes)\n      .map(utils.camelCaseNodeName)\n      .map(utils.removePixelsFromNodeValue)\n      .filter(utils.getEnabledAttributes(enabledAttributes.concat(COMMON_ATTS)))\n      .reduce((acc, {nodeName, nodeValue}) => {\n        acc[nodeName] = (this.state.fill && nodeName === 'fill' && nodeValue !== 'none') ? this.state.fill : nodeValue\n        return acc\n      }, {});\n    Object.assign(componentAtts, styleAtts);\n\n    return componentAtts;\n  }\n\n  inspectNode(node){\n    // Only process accepted elements\n    if (!ACCEPTED_SVG_ELEMENTS.includes(node.nodeName)) {\n      return null;\n    }\n\n    // Process the xml node\n    const arrayElements = [];\n\n    // if have children process them.\n    // Recursive function.\n    if (node.childNodes && node.childNodes.length > 0){\n        for (let i = 0; i < node.childNodes.length; i++){\n          const isTextValue = node.childNodes[i].nodeValue\n          if (isTextValue) {\n            arrayElements.push(node.childNodes[i].nodeValue)\n          } else {\n            const nodo = this.inspectNode(node.childNodes[i]);\n            if (nodo != null) {\n              arrayElements.push(nodo);\n            }\n          }\n        }\n    }\n\n    return this.createSVGElement(node, arrayElements);\n  }\n\n  render () {\n    try {\n      if (this.state.svgXmlData == null) {\n        return null;\n      }\n\n      const inputSVG = this.state.svgXmlData.substring(\n        this.state.svgXmlData.indexOf(\"<svg \"),\n        (this.state.svgXmlData.indexOf(\"</svg>\") + 6)\n      );\n\n      const doc = new xmldom.DOMParser().parseFromString(inputSVG);\n\n      const rootSVG = this.inspectNode(doc.childNodes[0]);\n\n      return(\n          <View style={this.props.style}>\n            {rootSVG}\n          </View>\n      );\n    } catch(e){\n      console.error(\"ERROR SVG\", e);\n      return null;\n    }\n  }\n}\n\nSvgUri.propTypes = {\n  style: PropTypes.object,\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  svgXmlData: PropTypes.string,\n  source: PropTypes.any,\n  fill: PropTypes.string,\n}\n\nmodule.exports = SvgUri;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}