{"ast":null,"code":"export let EventTypes;\n(function (EventTypes) {\n  EventTypes[EventTypes[\"DOWN\"] = 0] = \"DOWN\";\n  EventTypes[EventTypes[\"ADDITIONAL_POINTER_DOWN\"] = 1] = \"ADDITIONAL_POINTER_DOWN\";\n  EventTypes[EventTypes[\"UP\"] = 2] = \"UP\";\n  EventTypes[EventTypes[\"ADDITIONAL_POINTER_UP\"] = 3] = \"ADDITIONAL_POINTER_UP\";\n  EventTypes[EventTypes[\"MOVE\"] = 4] = \"MOVE\";\n  EventTypes[EventTypes[\"ENTER\"] = 5] = \"ENTER\";\n  EventTypes[EventTypes[\"LEAVE\"] = 6] = \"LEAVE\";\n  EventTypes[EventTypes[\"CANCEL\"] = 7] = \"CANCEL\";\n})(EventTypes || (EventTypes = {}));\nexport let TouchEventType;\n(function (TouchEventType) {\n  TouchEventType[TouchEventType[\"UNDETERMINED\"] = 0] = \"UNDETERMINED\";\n  TouchEventType[TouchEventType[\"DOWN\"] = 1] = \"DOWN\";\n  TouchEventType[TouchEventType[\"MOVE\"] = 2] = \"MOVE\";\n  TouchEventType[TouchEventType[\"UP\"] = 3] = \"UP\";\n  TouchEventType[TouchEventType[\"CANCELLED\"] = 4] = \"CANCELLED\";\n})(TouchEventType || (TouchEventType = {}));","map":{"version":3,"names":["EventTypes","TouchEventType"],"sources":["C:\\Users\\DinhPhongIUH\\Desktop\\nhap\\Yanuo_mobile_Redux\\node_modules\\react-native-gesture-handler\\lib\\module\\web\\interfaces.ts"],"sourcesContent":["import {\n  UserSelect,\n  ActiveCursor,\n  MouseButton,\n  TouchAction,\n} from '../handlers/gestureHandlerCommon';\nimport { Directions } from '../Directions';\nimport { State } from '../State';\nimport { PointerType } from '../PointerType';\n\nexport interface HitSlop {\n  left?: number;\n  right?: number;\n  top?: number;\n  bottom?: number;\n  horizontal?: number;\n  vertical?: number;\n  width?: number;\n  height?: number;\n}\n\nexport interface Handler {\n  handlerTag: number;\n}\n\ntype ConfigArgs =\n  | number\n  | boolean\n  | HitSlop\n  | UserSelect\n  | TouchAction\n  | ActiveCursor\n  | Directions\n  | Handler[]\n  | null\n  | undefined;\n\nexport interface Config extends Record<string, ConfigArgs> {\n  enabled?: boolean;\n  simultaneousHandlers?: Handler[] | null;\n  waitFor?: Handler[] | null;\n  blocksHandlers?: Handler[] | null;\n  hitSlop?: HitSlop;\n  shouldCancelWhenOutside?: boolean;\n  userSelect?: UserSelect;\n  activeCursor?: ActiveCursor;\n  mouseButton?: MouseButton;\n  enableContextMenu?: boolean;\n  touchAction?: TouchAction;\n  manualActivation?: boolean;\n\n  activateAfterLongPress?: number;\n  failOffsetXStart?: number;\n  failOffsetYStart?: number;\n  failOffsetXEnd?: number;\n  failOffsetYEnd?: number;\n  activeOffsetXStart?: number;\n  activeOffsetXEnd?: number;\n  activeOffsetYStart?: number;\n  activeOffsetYEnd?: number;\n  minPointers?: number;\n  maxPointers?: number;\n  minDist?: number;\n  minDistSq?: number;\n  minVelocity?: number;\n  minVelocityX?: number;\n  minVelocityY?: number;\n  minVelocitySq?: number;\n  maxDist?: number;\n  maxDistSq?: number;\n  numberOfPointers?: number;\n  minDurationMs?: number;\n  numberOfTaps?: number;\n  maxDurationMs?: number;\n  maxDelayMs?: number;\n  maxDeltaX?: number;\n  maxDeltaY?: number;\n  shouldActivateOnStart?: boolean;\n  disallowInterruption?: boolean;\n  direction?: Directions;\n}\n\ntype NativeEventArgs = number | State | boolean | undefined;\ninterface NativeEvent extends Record<string, NativeEventArgs> {\n  numberOfPointers: number;\n  state: State;\n  pointerInside: boolean | undefined;\n  handlerTag: number;\n  target: number;\n  oldState?: State;\n  pointerType: PointerType;\n}\n\nexport interface Point {\n  x: number;\n  y: number;\n}\n\nexport interface PointerData {\n  id: number;\n  x: number;\n  y: number;\n  absoluteX: number;\n  absoluteY: number;\n}\n\ntype TouchNativeArgs = number | State | TouchEventType | PointerData[];\n\ninterface NativeTouchEvent extends Record<string, TouchNativeArgs> {\n  handlerTag: number;\n  state: State;\n  eventType: TouchEventType;\n  changedTouches: PointerData[];\n  allTouches: PointerData[];\n  numberOfTouches: number;\n}\n\nexport interface ResultEvent extends Record<string, NativeEvent | number> {\n  nativeEvent: NativeEvent;\n  timeStamp: number;\n}\n\nexport interface ResultTouchEvent\n  extends Record<string, NativeTouchEvent | number> {\n  nativeEvent: NativeTouchEvent;\n  timeStamp: number;\n}\n\nexport interface PropsRef {\n  onGestureHandlerEvent: () => void;\n  onGestureHandlerStateChange: () => void;\n}\n\nexport interface AdaptedEvent {\n  x: number;\n  y: number;\n  offsetX: number;\n  offsetY: number;\n  pointerId: number;\n  eventType: EventTypes;\n  pointerType: PointerType;\n  time: number;\n  button?: MouseButton;\n  allTouches?: TouchList;\n  changedTouches?: TouchList;\n  touchEventType?: TouchEventType;\n}\n\nexport enum EventTypes {\n  DOWN,\n  ADDITIONAL_POINTER_DOWN,\n  UP,\n  ADDITIONAL_POINTER_UP,\n  MOVE,\n  ENTER,\n  LEAVE,\n  CANCEL,\n}\n\nexport enum TouchEventType {\n  UNDETERMINED,\n  DOWN,\n  MOVE,\n  UP,\n  CANCELLED,\n}\n"],"mappings":"AAoJA,WAAYA,UAAZ;WAAYA,U;EAAAA,U,CAAAA,U;EAAAA,U,CAAAA,U;EAAAA,U,CAAAA,U;EAAAA,U,CAAAA,U;EAAAA,U,CAAAA,U;EAAAA,U,CAAAA,U;EAAAA,U,CAAAA,U;EAAAA,U,CAAAA,U;GAAAA,U,KAAAA,U;AAWZ,WAAYC,cAAZ;WAAYA,c;EAAAA,c,CAAAA,c;EAAAA,c,CAAAA,c;EAAAA,c,CAAAA,c;EAAAA,c,CAAAA,c;EAAAA,c,CAAAA,c;GAAAA,c,KAAAA,c","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}