{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport CircularBuffer from './CircularBuffer';\nimport LeastSquareSolver from './LeastSquareSolver';\nexport default class VelocityTracker {\n  constructor() {\n    _defineProperty(this, \"assumePointerMoveStoppedMilliseconds\", 40);\n    _defineProperty(this, \"historySize\", 20);\n    _defineProperty(this, \"horizonMilliseconds\", 300);\n    _defineProperty(this, \"minSampleSize\", 3);\n    _defineProperty(this, \"samples\", void 0);\n    this.samples = new CircularBuffer(this.historySize);\n  }\n  add(event) {\n    this.samples.push(event);\n  }\n  getVelocityEstimate() {\n    const x = [];\n    const y = [];\n    const w = [];\n    const time = [];\n    let sampleCount = 0;\n    let index = this.samples.size - 1;\n    const newestSample = this.samples.get(index);\n    if (!newestSample) {\n      return null;\n    }\n    let previousSample = newestSample;\n    while (sampleCount < this.samples.size) {\n      const sample = this.samples.get(index);\n      const age = newestSample.time - sample.time;\n      const delta = Math.abs(sample.time - previousSample.time);\n      previousSample = sample;\n      if (age > this.horizonMilliseconds || delta > this.assumePointerMoveStoppedMilliseconds) {\n        break;\n      }\n      x.push(sample.x);\n      y.push(sample.y);\n      w.push(1);\n      time.push(-age);\n      sampleCount++;\n      index--;\n    }\n    if (sampleCount >= this.minSampleSize) {\n      const xSolver = new LeastSquareSolver(time, x, w);\n      const xFit = xSolver.solve(2);\n      if (xFit !== null) {\n        const ySolver = new LeastSquareSolver(time, y, w);\n        const yFit = ySolver.solve(2);\n        if (yFit !== null) {\n          const xVelocity = xFit.coefficients[1] * 1000;\n          const yVelocity = yFit.coefficients[1] * 1000;\n          return [xVelocity, yVelocity];\n        }\n      }\n    }\n    return null;\n  }\n  getVelocity() {\n    const estimate = this.getVelocityEstimate();\n    if (estimate !== null) {\n      return estimate;\n    }\n    return [0, 0];\n  }\n  reset() {\n    this.samples.clear();\n  }\n}","map":{"version":3,"names":["CircularBuffer","LeastSquareSolver","VelocityTracker","constructor","_defineProperty","samples","historySize","add","event","push","getVelocityEstimate","x","y","w","time","sampleCount","index","size","newestSample","get","previousSample","sample","age","delta","Math","abs","horizonMilliseconds","assumePointerMoveStoppedMilliseconds","minSampleSize","xSolver","xFit","solve","ySolver","yFit","xVelocity","coefficients","yVelocity","getVelocity","estimate","reset","clear"],"sources":["C:\\Users\\DinhPhongIUH\\Desktop\\nhap\\Yanuo_mobile_Redux\\node_modules\\react-native-gesture-handler\\lib\\module\\web\\tools\\VelocityTracker.ts"],"sourcesContent":["import { AdaptedEvent } from '../interfaces';\nimport CircularBuffer from './CircularBuffer';\nimport LeastSquareSolver from './LeastSquareSolver';\n\nexport default class VelocityTracker {\n  private assumePointerMoveStoppedMilliseconds = 40;\n  private historySize = 20;\n  private horizonMilliseconds = 300;\n  private minSampleSize = 3;\n\n  private samples: CircularBuffer<AdaptedEvent>;\n\n  constructor() {\n    this.samples = new CircularBuffer<AdaptedEvent>(this.historySize);\n  }\n\n  public add(event: AdaptedEvent): void {\n    this.samples.push(event);\n  }\n\n  /// Returns an estimate of the velocity of the object being tracked by the\n  /// tracker given the current information available to the tracker.\n  ///\n  /// Information is added using [addPosition].\n  ///\n  /// Returns null if there is no data on which to base an estimate.\n  private getVelocityEstimate(): [number, number] | null {\n    const x = [];\n    const y = [];\n    const w = [];\n    const time = [];\n\n    let sampleCount = 0;\n    let index = this.samples.size - 1;\n    const newestSample = this.samples.get(index);\n    if (!newestSample) {\n      return null;\n    }\n\n    let previousSample = newestSample;\n\n    // Starting with the most recent PointAtTime sample, iterate backwards while\n    // the samples represent continuous motion.\n    while (sampleCount < this.samples.size) {\n      const sample = this.samples.get(index);\n\n      const age = newestSample.time - sample.time;\n      const delta = Math.abs(sample.time - previousSample.time);\n      previousSample = sample;\n\n      if (\n        age > this.horizonMilliseconds ||\n        delta > this.assumePointerMoveStoppedMilliseconds\n      ) {\n        break;\n      }\n\n      x.push(sample.x);\n      y.push(sample.y);\n      w.push(1);\n      time.push(-age);\n\n      sampleCount++;\n      index--;\n    }\n\n    if (sampleCount >= this.minSampleSize) {\n      const xSolver = new LeastSquareSolver(time, x, w);\n      const xFit = xSolver.solve(2);\n\n      if (xFit !== null) {\n        const ySolver = new LeastSquareSolver(time, y, w);\n        const yFit = ySolver.solve(2);\n\n        if (yFit !== null) {\n          const xVelocity = xFit.coefficients[1] * 1000;\n          const yVelocity = yFit.coefficients[1] * 1000;\n\n          return [xVelocity, yVelocity];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  public getVelocity(): [number, number] {\n    const estimate = this.getVelocityEstimate();\n    if (estimate !== null) {\n      return estimate;\n    }\n    return [0, 0];\n  }\n\n  public reset(): void {\n    this.samples.clear();\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}