{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport { Component } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { State } from '../../State';\nimport { BaseButton } from '../GestureButtons';\nexport const TOUCHABLE_STATE = {\n  UNDETERMINED: 0,\n  BEGAN: 1,\n  MOVED_OUTSIDE: 2\n};\nexport default class GenericTouchable extends Component {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"pressInTimeout\", void 0);\n    _defineProperty(this, \"pressOutTimeout\", void 0);\n    _defineProperty(this, \"longPressTimeout\", void 0);\n    _defineProperty(this, \"longPressDetected\", false);\n    _defineProperty(this, \"pointerInside\", true);\n    _defineProperty(this, \"STATE\", TOUCHABLE_STATE.UNDETERMINED);\n    _defineProperty(this, \"onGestureEvent\", ({\n      nativeEvent: {\n        pointerInside\n      }\n    }) => {\n      if (this.pointerInside !== pointerInside) {\n        if (pointerInside) {\n          this.onMoveIn();\n        } else {\n          this.onMoveOut();\n        }\n      }\n      this.pointerInside = pointerInside;\n    });\n    _defineProperty(this, \"onHandlerStateChange\", ({\n      nativeEvent\n    }) => {\n      const {\n        state\n      } = nativeEvent;\n      if (state === State.CANCELLED || state === State.FAILED) {\n        this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n      } else if (state === (Platform.OS !== 'android' ? State.ACTIVE : State.BEGAN) && this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n        this.handlePressIn();\n      } else if (state === State.END) {\n        const shouldCallOnPress = !this.longPressDetected && this.STATE !== TOUCHABLE_STATE.MOVED_OUTSIDE && this.pressOutTimeout === null;\n        this.handleGoToUndetermined();\n        if (shouldCallOnPress) {\n          var _this$props$onPress, _this$props;\n          (_this$props$onPress = (_this$props = this.props).onPress) === null || _this$props$onPress === void 0 ? void 0 : _this$props$onPress.call(_this$props);\n        }\n      }\n    });\n    _defineProperty(this, \"onLongPressDetected\", () => {\n      var _this$props$onLongPre, _this$props2;\n      this.longPressDetected = true;\n      (_this$props$onLongPre = (_this$props2 = this.props).onLongPress) === null || _this$props$onLongPre === void 0 ? void 0 : _this$props$onLongPre.call(_this$props2);\n    });\n  }\n  handlePressIn() {\n    if (this.props.delayPressIn) {\n      this.pressInTimeout = setTimeout(() => {\n        this.moveToState(TOUCHABLE_STATE.BEGAN);\n        this.pressInTimeout = null;\n      }, this.props.delayPressIn);\n    } else {\n      this.moveToState(TOUCHABLE_STATE.BEGAN);\n    }\n    if (this.props.onLongPress) {\n      const time = (this.props.delayPressIn || 0) + (this.props.delayLongPress || 0);\n      this.longPressTimeout = setTimeout(this.onLongPressDetected, time);\n    }\n  }\n  handleMoveOutside() {\n    if (this.props.delayPressOut) {\n      this.pressOutTimeout = this.pressOutTimeout || setTimeout(() => {\n        this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);\n        this.pressOutTimeout = null;\n      }, this.props.delayPressOut);\n    } else {\n      this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);\n    }\n  }\n  handleGoToUndetermined() {\n    clearTimeout(this.pressOutTimeout);\n    if (this.props.delayPressOut) {\n      this.pressOutTimeout = setTimeout(() => {\n        if (this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n          this.moveToState(TOUCHABLE_STATE.BEGAN);\n        }\n        this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n        this.pressOutTimeout = null;\n      }, this.props.delayPressOut);\n    } else {\n      if (this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n        this.moveToState(TOUCHABLE_STATE.BEGAN);\n      }\n      this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n    }\n  }\n  componentDidMount() {\n    this.reset();\n  }\n  reset() {\n    this.longPressDetected = false;\n    this.pointerInside = true;\n    clearTimeout(this.pressInTimeout);\n    clearTimeout(this.pressOutTimeout);\n    clearTimeout(this.longPressTimeout);\n    this.pressOutTimeout = null;\n    this.longPressTimeout = null;\n    this.pressInTimeout = null;\n  }\n  moveToState(newState) {\n    var _this$props$onStateCh, _this$props6;\n    if (newState === this.STATE) {\n      return;\n    }\n    if (newState === TOUCHABLE_STATE.BEGAN) {\n      var _this$props$onPressIn, _this$props3;\n      (_this$props$onPressIn = (_this$props3 = this.props).onPressIn) === null || _this$props$onPressIn === void 0 ? void 0 : _this$props$onPressIn.call(_this$props3);\n    } else if (newState === TOUCHABLE_STATE.MOVED_OUTSIDE) {\n      var _this$props$onPressOu, _this$props4;\n      (_this$props$onPressOu = (_this$props4 = this.props).onPressOut) === null || _this$props$onPressOu === void 0 ? void 0 : _this$props$onPressOu.call(_this$props4);\n    } else if (newState === TOUCHABLE_STATE.UNDETERMINED) {\n      this.reset();\n      if (this.STATE === TOUCHABLE_STATE.BEGAN) {\n        var _this$props$onPressOu2, _this$props5;\n        (_this$props$onPressOu2 = (_this$props5 = this.props).onPressOut) === null || _this$props$onPressOu2 === void 0 ? void 0 : _this$props$onPressOu2.call(_this$props5);\n      }\n    }\n    (_this$props$onStateCh = (_this$props6 = this.props).onStateChange) === null || _this$props$onStateCh === void 0 ? void 0 : _this$props$onStateCh.call(_this$props6, this.STATE, newState);\n    this.STATE = newState;\n  }\n  componentWillUnmount() {\n    this.reset();\n  }\n  onMoveIn() {\n    if (this.STATE === TOUCHABLE_STATE.MOVED_OUTSIDE) {\n      this.moveToState(TOUCHABLE_STATE.BEGAN);\n    }\n  }\n  onMoveOut() {\n    clearTimeout(this.longPressTimeout);\n    this.longPressTimeout = null;\n    if (this.STATE === TOUCHABLE_STATE.BEGAN) {\n      this.handleMoveOutside();\n    }\n  }\n  render() {\n    var _ref, _this$props$touchSoun;\n    const hitSlop = (_ref = typeof this.props.hitSlop === 'number' ? {\n      top: this.props.hitSlop,\n      left: this.props.hitSlop,\n      bottom: this.props.hitSlop,\n      right: this.props.hitSlop\n    } : this.props.hitSlop) !== null && _ref !== void 0 ? _ref : undefined;\n    const coreProps = {\n      accessible: this.props.accessible !== false,\n      accessibilityLabel: this.props.accessibilityLabel,\n      accessibilityHint: this.props.accessibilityHint,\n      accessibilityRole: this.props.accessibilityRole,\n      accessibilityState: this.props.accessibilityState,\n      accessibilityActions: this.props.accessibilityActions,\n      onAccessibilityAction: this.props.onAccessibilityAction,\n      nativeID: this.props.nativeID,\n      onLayout: this.props.onLayout\n    };\n    return React.createElement(BaseButton, _extends({\n      style: this.props.containerStyle,\n      onHandlerStateChange: this.props.disabled ? undefined : this.onHandlerStateChange,\n      onGestureEvent: this.onGestureEvent,\n      hitSlop: hitSlop,\n      userSelect: this.props.userSelect,\n      shouldActivateOnStart: this.props.shouldActivateOnStart,\n      disallowInterruption: this.props.disallowInterruption,\n      testID: this.props.testID,\n      touchSoundDisabled: (_this$props$touchSoun = this.props.touchSoundDisabled) !== null && _this$props$touchSoun !== void 0 ? _this$props$touchSoun : false,\n      enabled: !this.props.disabled\n    }, this.props.extraButtonProps), React.createElement(Animated.View, _extends({}, coreProps, {\n      style: this.props.style\n    }), this.props.children));\n  }\n}\n_defineProperty(GenericTouchable, \"defaultProps\", {\n  delayLongPress: 600,\n  extraButtonProps: {\n    rippleColor: 'transparent',\n    exclusive: true\n  }\n});","map":{"version":3,"names":["React","Component","Animated","Platform","State","BaseButton","TOUCHABLE_STATE","UNDETERMINED","BEGAN","MOVED_OUTSIDE","GenericTouchable","constructor","args","_defineProperty","nativeEvent","pointerInside","onMoveIn","onMoveOut","state","CANCELLED","FAILED","moveToState","OS","ACTIVE","STATE","handlePressIn","END","shouldCallOnPress","longPressDetected","pressOutTimeout","handleGoToUndetermined","_this$props$onPress","_this$props","props","onPress","call","_this$props$onLongPre","_this$props2","onLongPress","delayPressIn","pressInTimeout","setTimeout","time","delayLongPress","longPressTimeout","onLongPressDetected","handleMoveOutside","delayPressOut","clearTimeout","componentDidMount","reset","newState","_this$props$onStateCh","_this$props6","_this$props$onPressIn","_this$props3","onPressIn","_this$props$onPressOu","_this$props4","onPressOut","_this$props$onPressOu2","_this$props5","onStateChange","componentWillUnmount","render","_ref","_this$props$touchSoun","hitSlop","top","left","bottom","right","undefined","coreProps","accessible","accessibilityLabel","accessibilityHint","accessibilityRole","accessibilityState","accessibilityActions","onAccessibilityAction","nativeID","onLayout","createElement","_extends","style","containerStyle","onHandlerStateChange","disabled","onGestureEvent","userSelect","shouldActivateOnStart","disallowInterruption","testID","touchSoundDisabled","enabled","extraButtonProps","View","children","rippleColor","exclusive"],"sources":["C:\\Users\\DinhPhongIUH\\Desktop\\nhap\\Yanuo_mobile_Redux\\node_modules\\react-native-gesture-handler\\lib\\module\\components\\touchables\\GenericTouchable.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Component } from 'react';\nimport {\n  Animated,\n  Platform,\n  StyleProp,\n  ViewStyle,\n  TouchableWithoutFeedbackProps,\n  Insets,\n} from 'react-native';\n\nimport { State } from '../../State';\nimport { BaseButton } from '../GestureButtons';\n\nimport {\n  GestureEvent,\n  HandlerStateChangeEvent,\n  UserSelect,\n} from '../../handlers/gestureHandlerCommon';\nimport { NativeViewGestureHandlerPayload } from '../../handlers/NativeViewGestureHandler';\nimport { TouchableNativeFeedbackExtraProps } from './TouchableNativeFeedback.android';\n\n/**\n * Each touchable is a states' machine which preforms transitions.\n * On very beginning (and on the very end or recognition) touchable is\n * UNDETERMINED. Then it moves to BEGAN. If touchable recognizes that finger\n * travel outside it transits to special MOVED_OUTSIDE state. Gesture recognition\n * finishes in UNDETERMINED state.\n */\nexport const TOUCHABLE_STATE = {\n  UNDETERMINED: 0,\n  BEGAN: 1,\n  MOVED_OUTSIDE: 2,\n} as const;\n\ntype TouchableState = typeof TOUCHABLE_STATE[keyof typeof TOUCHABLE_STATE];\n\nexport interface GenericTouchableProps\n  extends Omit<TouchableWithoutFeedbackProps, 'hitSlop'> {\n  // Decided to drop not used fields from RN's implementation.\n  // e.g. onBlur and onFocus as well as deprecated props. - TODO: this comment may be unuseful in this moment\n\n  // TODO: in RN these events get native event parameter, which prolly could be used in our implementation too\n  onPress?: () => void;\n  onPressIn?: () => void;\n  onPressOut?: () => void;\n  onLongPress?: () => void;\n\n  nativeID?: string;\n  shouldActivateOnStart?: boolean;\n  disallowInterruption?: boolean;\n\n  containerStyle?: StyleProp<ViewStyle>;\n  hitSlop?: Insets | number;\n  userSelect?: UserSelect;\n}\n\ninterface InternalProps {\n  extraButtonProps: TouchableNativeFeedbackExtraProps;\n  onStateChange?: (oldState: TouchableState, newState: TouchableState) => void;\n}\n\n// TODO: maybe can be better\n// TODO: all clearTimeout have ! added, maybe they shouldn't ?\ntype Timeout = ReturnType<typeof setTimeout> | null | undefined;\n\n/**\n * GenericTouchable is not intented to be used as it is.\n * Should be treated as a source for the rest of touchables\n */\n\nexport default class GenericTouchable extends Component<\n  GenericTouchableProps & InternalProps\n> {\n  static defaultProps = {\n    delayLongPress: 600,\n    extraButtonProps: {\n      rippleColor: 'transparent',\n      exclusive: true,\n    },\n  };\n\n  // timeout handlers\n  pressInTimeout: Timeout;\n  pressOutTimeout: Timeout;\n  longPressTimeout: Timeout;\n\n  // This flag is required since recognition of longPress implies not-invoking onPress\n  longPressDetected = false;\n\n  pointerInside = true;\n\n  // State of touchable\n  STATE: TouchableState = TOUCHABLE_STATE.UNDETERMINED;\n\n  // handlePressIn in called on first touch on traveling inside component.\n  // Handles state transition with delay.\n  handlePressIn() {\n    if (this.props.delayPressIn) {\n      this.pressInTimeout = setTimeout(() => {\n        this.moveToState(TOUCHABLE_STATE.BEGAN);\n        this.pressInTimeout = null;\n      }, this.props.delayPressIn);\n    } else {\n      this.moveToState(TOUCHABLE_STATE.BEGAN);\n    }\n    if (this.props.onLongPress) {\n      const time =\n        (this.props.delayPressIn || 0) + (this.props.delayLongPress || 0);\n      this.longPressTimeout = setTimeout(this.onLongPressDetected, time);\n    }\n  }\n  // handleMoveOutside in called on traveling outside component.\n  // Handles state transition with delay.\n  handleMoveOutside() {\n    if (this.props.delayPressOut) {\n      this.pressOutTimeout =\n        this.pressOutTimeout ||\n        setTimeout(() => {\n          this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);\n          this.pressOutTimeout = null;\n        }, this.props.delayPressOut);\n    } else {\n      this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);\n    }\n  }\n\n  // handleGoToUndetermined transits to UNDETERMINED state with proper delay\n  handleGoToUndetermined() {\n    clearTimeout(this.pressOutTimeout!); // TODO: maybe it can be undefined\n    if (this.props.delayPressOut) {\n      this.pressOutTimeout = setTimeout(() => {\n        if (this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n          this.moveToState(TOUCHABLE_STATE.BEGAN);\n        }\n        this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n        this.pressOutTimeout = null;\n      }, this.props.delayPressOut);\n    } else {\n      if (this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n        this.moveToState(TOUCHABLE_STATE.BEGAN);\n      }\n      this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n    }\n  }\n\n  componentDidMount() {\n    this.reset();\n  }\n  // reset timeout to prevent memory leaks.\n  reset() {\n    this.longPressDetected = false;\n    this.pointerInside = true;\n    clearTimeout(this.pressInTimeout!);\n    clearTimeout(this.pressOutTimeout!);\n    clearTimeout(this.longPressTimeout!);\n    this.pressOutTimeout = null;\n    this.longPressTimeout = null;\n    this.pressInTimeout = null;\n  }\n\n  // All states' transitions are defined here.\n  moveToState(newState: TouchableState) {\n    if (newState === this.STATE) {\n      // Ignore dummy transitions\n      return;\n    }\n    if (newState === TOUCHABLE_STATE.BEGAN) {\n      // First touch and moving inside\n      this.props.onPressIn?.();\n    } else if (newState === TOUCHABLE_STATE.MOVED_OUTSIDE) {\n      // Moving outside\n      this.props.onPressOut?.();\n    } else if (newState === TOUCHABLE_STATE.UNDETERMINED) {\n      // Need to reset each time on transition to UNDETERMINED\n      this.reset();\n      if (this.STATE === TOUCHABLE_STATE.BEGAN) {\n        // ... and if it happens inside button.\n        this.props.onPressOut?.();\n      }\n    }\n    // Finally call lister (used by subclasses)\n    this.props.onStateChange?.(this.STATE, newState);\n    // ... and make transition.\n    this.STATE = newState;\n  }\n\n  onGestureEvent = ({\n    nativeEvent: { pointerInside },\n  }: GestureEvent<NativeViewGestureHandlerPayload>) => {\n    if (this.pointerInside !== pointerInside) {\n      if (pointerInside) {\n        this.onMoveIn();\n      } else {\n        this.onMoveOut();\n      }\n    }\n    this.pointerInside = pointerInside;\n  };\n\n  onHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<NativeViewGestureHandlerPayload>) => {\n    const { state } = nativeEvent;\n    if (state === State.CANCELLED || state === State.FAILED) {\n      // Need to handle case with external cancellation (e.g. by ScrollView)\n      this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n    } else if (\n      // This platform check is an implication of slightly different behavior of handlers on different platform.\n      // And Android \"Active\" state is achieving on first move of a finger, not on press in.\n      // On iOS event on \"Began\" is not delivered.\n      state === (Platform.OS !== 'android' ? State.ACTIVE : State.BEGAN) &&\n      this.STATE === TOUCHABLE_STATE.UNDETERMINED\n    ) {\n      // Moving inside requires\n      this.handlePressIn();\n    } else if (state === State.END) {\n      const shouldCallOnPress =\n        !this.longPressDetected &&\n        this.STATE !== TOUCHABLE_STATE.MOVED_OUTSIDE &&\n        this.pressOutTimeout === null;\n      this.handleGoToUndetermined();\n      if (shouldCallOnPress) {\n        // Calls only inside component whether no long press was called previously\n        this.props.onPress?.();\n      }\n    }\n  };\n\n  onLongPressDetected = () => {\n    this.longPressDetected = true;\n    // checked for in the caller of `onLongPressDetected`, but better to check twice\n    this.props.onLongPress?.();\n  };\n\n  componentWillUnmount() {\n    // to prevent memory leaks\n    this.reset();\n  }\n\n  onMoveIn() {\n    if (this.STATE === TOUCHABLE_STATE.MOVED_OUTSIDE) {\n      // This call is not throttled with delays (like in RN's implementation).\n      this.moveToState(TOUCHABLE_STATE.BEGAN);\n    }\n  }\n\n  onMoveOut() {\n    // long press should no longer be detected\n    clearTimeout(this.longPressTimeout!);\n    this.longPressTimeout = null;\n    if (this.STATE === TOUCHABLE_STATE.BEGAN) {\n      this.handleMoveOutside();\n    }\n  }\n\n  render() {\n    const hitSlop =\n      (typeof this.props.hitSlop === 'number'\n        ? {\n            top: this.props.hitSlop,\n            left: this.props.hitSlop,\n            bottom: this.props.hitSlop,\n            right: this.props.hitSlop,\n          }\n        : this.props.hitSlop) ?? undefined;\n\n    const coreProps = {\n      accessible: this.props.accessible !== false,\n      accessibilityLabel: this.props.accessibilityLabel,\n      accessibilityHint: this.props.accessibilityHint,\n      accessibilityRole: this.props.accessibilityRole,\n      // TODO: check if changed to no 's' correctly, also removed 2 props that are no longer available: `accessibilityComponentType` and `accessibilityTraits`,\n      // would be good to check if it is ok for sure, see: https://github.com/facebook/react-native/issues/24016\n      accessibilityState: this.props.accessibilityState,\n      accessibilityActions: this.props.accessibilityActions,\n      onAccessibilityAction: this.props.onAccessibilityAction,\n      nativeID: this.props.nativeID,\n      onLayout: this.props.onLayout,\n    };\n\n    return (\n      <BaseButton\n        style={this.props.containerStyle}\n        onHandlerStateChange={\n          // TODO: not sure if it can be undefined instead of null\n          this.props.disabled ? undefined : this.onHandlerStateChange\n        }\n        onGestureEvent={this.onGestureEvent}\n        hitSlop={hitSlop}\n        userSelect={this.props.userSelect}\n        shouldActivateOnStart={this.props.shouldActivateOnStart}\n        disallowInterruption={this.props.disallowInterruption}\n        testID={this.props.testID}\n        touchSoundDisabled={this.props.touchSoundDisabled ?? false}\n        enabled={!this.props.disabled}\n        {...this.props.extraButtonProps}>\n        <Animated.View {...coreProps} style={this.props.style}>\n          {this.props.children}\n        </Animated.View>\n      </BaseButton>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}