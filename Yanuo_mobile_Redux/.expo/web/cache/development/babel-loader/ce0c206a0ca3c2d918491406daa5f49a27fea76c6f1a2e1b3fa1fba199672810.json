{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { EventEmitter, Platform, UnavailabilityError } from 'expo-modules-core';\nimport { throwIfAudioIsDisabled } from './AudioAvailability';\nimport { PlaybackMixin, assertStatusValuesInBounds, getNativeSourceAndFullInitialStatusForLoadAsync, getUnloadedStatus } from '../AV';\nimport ExponentAV from '../ExponentAV';\nexport class Sound {\n  _loaded = false;\n  _loading = false;\n  _key = null;\n  _lastStatusUpdate = null;\n  _lastStatusUpdateTime = null;\n  _subscriptions = [];\n  _eventEmitter = new EventEmitter(ExponentAV);\n  _coalesceStatusUpdatesInMillis = 100;\n  _onPlaybackStatusUpdate = null;\n  _onMetadataUpdate = null;\n  _onAudioSampleReceived = null;\n  static create = async (source, initialStatus = {}, onPlaybackStatusUpdate = null, downloadFirst = true) => {\n    console.warn(`Sound.create is deprecated in favor of Sound.createAsync with the same API except for the new method name`);\n    return Sound.createAsync(source, initialStatus, onPlaybackStatusUpdate, downloadFirst);\n  };\n  static createAsync = async (source, initialStatus = {}, onPlaybackStatusUpdate = null, downloadFirst = true) => {\n    const sound = new Sound();\n    sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n    const status = await sound.loadAsync(source, initialStatus, downloadFirst);\n    return {\n      sound,\n      status\n    };\n  };\n  _callOnPlaybackStatusUpdateForNewStatus(status) {\n    const shouldDismissBasedOnCoalescing = this._lastStatusUpdateTime && JSON.stringify(status) === this._lastStatusUpdate && Date.now() - this._lastStatusUpdateTime.getTime() < this._coalesceStatusUpdatesInMillis;\n    if (this._onPlaybackStatusUpdate != null && !shouldDismissBasedOnCoalescing) {\n      this._onPlaybackStatusUpdate(status);\n      this._lastStatusUpdateTime = new Date();\n      this._lastStatusUpdate = JSON.stringify(status);\n    }\n  }\n  async _performOperationAndHandleStatusAsync(operation) {\n    throwIfAudioIsDisabled();\n    if (this._loaded) {\n      const status = await operation();\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n      return status;\n    } else {\n      throw new Error('Cannot complete operation because sound is not loaded.');\n    }\n  }\n  _updateAudioSampleReceivedCallback() {\n    if (globalThis.__EXAV_setOnAudioSampleReceivedCallback == null) {\n      if (Platform.OS === 'ios' || Platform.OS === 'android') {\n        console.warn('expo-av: Failed to set up Audio Sample Buffer callback. ' + \"Do you have 'Remote Debugging' enabled in your app's Developer Menu (https://docs.expo.dev/workflow/debugging)? \" + 'Audio Sample Buffer callbacks are not supported while using Remote Debugging, you will need to disable it to use them.');\n        return;\n      } else {\n        throw new UnavailabilityError('expo-av', 'setOnAudioSampleReceived');\n      }\n    }\n    if (this._key == null) {\n      throw new Error('Cannot set Audio Sample Buffer callback when the Sound instance has not been successfully loaded/initialized!');\n    }\n    if (typeof this._key !== 'number') {\n      throw new Error(`Cannot set Audio Sample Buffer callback when Sound instance key is of type ${typeof this._key}! (expected: number)`);\n    }\n    globalThis.__EXAV_setOnAudioSampleReceivedCallback(this._key, this._onAudioSampleReceived);\n  }\n  _internalStatusUpdateCallback = ({\n    key,\n    status\n  }) => {\n    if (this._key === key) {\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n    }\n  };\n  _internalMetadataUpdateCallback = ({\n    key,\n    metadata\n  }) => {\n    if (this._key === key) {\n      this._onMetadataUpdate?.(metadata);\n    }\n  };\n  _internalErrorCallback = ({\n    key,\n    error\n  }) => {\n    if (this._key === key) {\n      this._errorCallback(error);\n    }\n  };\n  _subscribeToNativeEvents() {\n    if (this._loaded) {\n      this._subscriptions.push(this._eventEmitter.addListener('didUpdatePlaybackStatus', this._internalStatusUpdateCallback), this._eventEmitter.addListener('didUpdateMetadata', this._internalMetadataUpdateCallback));\n      this._subscriptions.push(this._eventEmitter.addListener('ExponentAV.onError', this._internalErrorCallback));\n    }\n  }\n  _clearSubscriptions() {\n    this._subscriptions.forEach(e => e.remove());\n    this._subscriptions = [];\n  }\n  _errorCallback = error => {\n    this._clearSubscriptions();\n    this._loaded = false;\n    this._key = null;\n    this._callOnPlaybackStatusUpdateForNewStatus(getUnloadedStatus(error));\n  };\n  getStatusAsync = async () => {\n    if (this._loaded) {\n      return this._performOperationAndHandleStatusAsync(() => ExponentAV.getStatusForSound(this._key));\n    }\n    const status = getUnloadedStatus();\n    this._callOnPlaybackStatusUpdateForNewStatus(status);\n    return status;\n  };\n  setOnPlaybackStatusUpdate(onPlaybackStatusUpdate) {\n    this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n    this.getStatusAsync();\n  }\n  setOnMetadataUpdate(onMetadataUpdate) {\n    this._onMetadataUpdate = onMetadataUpdate;\n  }\n  setOnAudioSampleReceived(callback) {\n    this._onAudioSampleReceived = callback;\n    if (this._key != null) {\n      this._updateAudioSampleReceivedCallback();\n    }\n  }\n  async loadAsync(source, initialStatus = {}, downloadFirst = true) {\n    throwIfAudioIsDisabled();\n    if (this._loading) {\n      throw new Error('The Sound is already loading.');\n    }\n    if (!this._loaded) {\n      this._loading = true;\n      const {\n        nativeSource,\n        fullInitialStatus\n      } = await getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst);\n      return new Promise((resolve, reject) => {\n        const loadSuccess = result => {\n          const [key, status] = result;\n          this._key = key;\n          this._loaded = true;\n          this._loading = false;\n          this._subscribeToNativeEvents();\n          this._callOnPlaybackStatusUpdateForNewStatus(status);\n          resolve(status);\n        };\n        const loadError = error => {\n          this._loading = false;\n          reject(error);\n        };\n        ExponentAV.loadForSound(nativeSource, fullInitialStatus).then(loadSuccess).catch(loadError);\n      });\n    } else {\n      throw new Error('The Sound is already loaded.');\n    }\n  }\n  async unloadAsync() {\n    if (this._loaded) {\n      this._loaded = false;\n      const key = this._key;\n      this._key = null;\n      const status = await ExponentAV.unloadForSound(key);\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n      this._clearSubscriptions();\n      return status;\n    } else {\n      return this.getStatusAsync();\n    }\n  }\n  async setStatusAsync(status) {\n    assertStatusValuesInBounds(status);\n    return this._performOperationAndHandleStatusAsync(() => ExponentAV.setStatusForSound(this._key, status));\n  }\n  async replayAsync(status = {}) {\n    if (status.positionMillis && status.positionMillis !== 0) {\n      throw new Error('Requested position after replay has to be 0.');\n    }\n    return this._performOperationAndHandleStatusAsync(() => ExponentAV.replaySound(this._key, _objectSpread(_objectSpread({}, status), {}, {\n      positionMillis: 0,\n      shouldPlay: true\n    })));\n  }\n}\nObject.assign(Sound.prototype, PlaybackMixin);","map":{"version":3,"names":["EventEmitter","Platform","UnavailabilityError","throwIfAudioIsDisabled","PlaybackMixin","assertStatusValuesInBounds","getNativeSourceAndFullInitialStatusForLoadAsync","getUnloadedStatus","ExponentAV","Sound","_loaded","_loading","_key","_lastStatusUpdate","_lastStatusUpdateTime","_subscriptions","_eventEmitter","_coalesceStatusUpdatesInMillis","_onPlaybackStatusUpdate","_onMetadataUpdate","_onAudioSampleReceived","create","source","initialStatus","onPlaybackStatusUpdate","downloadFirst","console","warn","createAsync","sound","setOnPlaybackStatusUpdate","status","loadAsync","_callOnPlaybackStatusUpdateForNewStatus","shouldDismissBasedOnCoalescing","JSON","stringify","Date","now","getTime","_performOperationAndHandleStatusAsync","operation","Error","_updateAudioSampleReceivedCallback","globalThis","__EXAV_setOnAudioSampleReceivedCallback","OS","_internalStatusUpdateCallback","key","_internalMetadataUpdateCallback","metadata","_internalErrorCallback","error","_errorCallback","_subscribeToNativeEvents","push","addListener","_clearSubscriptions","forEach","e","remove","getStatusAsync","getStatusForSound","setOnMetadataUpdate","onMetadataUpdate","setOnAudioSampleReceived","callback","nativeSource","fullInitialStatus","Promise","resolve","reject","loadSuccess","result","loadError","loadForSound","then","catch","unloadAsync","unloadForSound","setStatusAsync","setStatusForSound","replayAsync","positionMillis","replaySound","_objectSpread","shouldPlay","Object","assign","prototype"],"sources":["C:\\Users\\DinhPhongIUH\\Desktop\\nhap\\Yanuo_mobile_Redux\\node_modules\\expo-av\\src\\Audio\\Sound.ts"],"sourcesContent":["import { EventEmitter, Platform, UnavailabilityError } from 'expo-modules-core';\n\nimport { throwIfAudioIsDisabled } from './AudioAvailability';\nimport {\n  Playback,\n  PlaybackMixin,\n  AVPlaybackSource,\n  AVMetadata,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n  assertStatusValuesInBounds,\n  getNativeSourceAndFullInitialStatusForLoadAsync,\n  getUnloadedStatus,\n  AVPlaybackTolerance,\n} from '../AV';\nimport { PitchCorrectionQuality } from '../Audio';\nimport ExponentAV from '../ExponentAV';\n\n// @needsAudit\nexport type AudioChannel = {\n  /**\n   * All samples for this specific Audio Channel in PCM Buffer format (-1 to 1).\n   */\n  frames: number[];\n};\n\n// @needsAudit\n/**\n * Object passed to the `onAudioSampleReceived` function. Represents a single sample from an audio source.\n * The sample contains all frames (PCM Buffer values) for each channel of the audio, so if the audio is _stereo_ (interleaved),\n * there will be two channels, one for left and one for right audio.\n */\nexport type AudioSample = {\n  /**\n   * An array representing the data from each channel in PCM Buffer format. Array elements are objects in the following format: `{ frames: number[] }`,\n   * where each frame is a number in PCM Buffer format (`-1` to `1` range).\n   */\n  channels: AudioChannel[];\n  /**\n   * A number representing the timestamp of the current sample in seconds, relative to the audio track's timeline.\n   * > **Known issue:** When using the `ExoPlayer` Android implementation, the timestamp is always `-1`.\n   */\n  timestamp: number;\n};\n\n// @needsAudit\nexport type SoundObject = {\n  /**\n   * The newly created and loaded `Sound` object.\n   */\n  sound: Sound;\n  /**\n   * The `PlaybackStatus` of the `Sound` object. See the [AV documentation](/versions/latest/sdk/av) for further information.\n   */\n  status: AVPlaybackStatus;\n};\n\ntype AudioInstance = number | HTMLMediaElement | null;\ntype AudioSampleCallback = ((sample: AudioSample) => void) | null;\n\ndeclare global {\n  interface Global {\n    __EXAV_setOnAudioSampleReceivedCallback:\n      | ((key: number, callback: AudioSampleCallback) => void)\n      | undefined;\n  }\n}\n\n// @needsAudit\n/**\n * This class represents a sound corresponding to an Asset or URL.\n * @return A newly constructed instance of `Audio.Sound`.\n *\n * @example\n * ```ts\n * const sound = new Audio.Sound();\n * try {\n *   await sound.loadAsync(require('./assets/sounds/hello.mp3'));\n *   await sound.playAsync();\n *   // Your sound is playing!\n *\n *   // Don't forget to unload the sound from memory\n *   // when you are done using the Sound object\n *   await sound.unloadAsync();\n * } catch (error) {\n *   // An error occurred!\n * }\n * ```\n *\n * > Method not described below and the rest of the API for `Audio.Sound` is the same as the imperative playback API for `Video`.\n * > See the [AV documentation](/versions/latest/sdk/av) for further information.\n */\nexport class Sound implements Playback {\n  _loaded: boolean = false;\n  _loading: boolean = false;\n  _key: AudioInstance = null;\n  _lastStatusUpdate: string | null = null;\n  _lastStatusUpdateTime: Date | null = null;\n  _subscriptions: { remove: () => void }[] = [];\n  _eventEmitter: EventEmitter = new EventEmitter(ExponentAV);\n  _coalesceStatusUpdatesInMillis: number = 100;\n  _onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null;\n  _onMetadataUpdate: ((metadata: AVMetadata) => void) | null = null;\n  _onAudioSampleReceived: AudioSampleCallback = null;\n\n  /** @deprecated Use `Sound.createAsync()` instead */\n  static create = async (\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null,\n    downloadFirst: boolean = true\n  ): Promise<SoundObject> => {\n    console.warn(\n      `Sound.create is deprecated in favor of Sound.createAsync with the same API except for the new method name`\n    );\n    return Sound.createAsync(source, initialStatus, onPlaybackStatusUpdate, downloadFirst);\n  };\n\n  /**\n   * Creates and loads a sound from source.\n   *\n   * ```ts\n   * const { sound } = await Audio.Sound.createAsync(\n   *   source,\n   *   initialStatus,\n   *   onPlaybackStatusUpdate,\n   *   downloadFirst\n   * );\n   *\n   * // Which is equivalent to the following:\n   * const sound = new Audio.Sound();\n   * sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n   * await sound.loadAsync(source, initialStatus, downloadFirst);\n   * ```\n   *\n   * @param source The source of the sound. See the [AV documentation](/versions/latest/sdk/av/#playback-api) for details on the possible `source` values.\n   *\n   * @param initialStatus The initial intended `PlaybackStatusToSet` of the sound, whose values will override the default initial playback status.\n   * This value defaults to `{}` if no parameter is passed. See the [AV documentation](/versions/latest/sdk/av) for details on `PlaybackStatusToSet` and the default\n   * initial playback status.\n   *\n   * @param onPlaybackStatusUpdate A function taking a single parameter `PlaybackStatus`. This value defaults to `null` if no parameter is passed.\n   * See the [AV documentation](/versions/latest/sdk/av) for details on the functionality provided by `onPlaybackStatusUpdate`\n   *\n   * @param downloadFirst If set to true, the system will attempt to download the resource to the device before loading. This value defaults to `true`.\n   * Note that at the moment, this will only work for `source`s of the form `require('path/to/file')` or `Asset` objects.\n   *\n   * @example\n   * ```ts\n   * try {\n   *   const { sound: soundObject, status } = await Audio.Sound.createAsync(\n   *     require('./assets/sounds/hello.mp3'),\n   *     { shouldPlay: true }\n   *   );\n   *   // Your sound is playing!\n   * } catch (error) {\n   *   // An error occurred!\n   * }\n   * ```\n   *\n   * @return A `Promise` that is rejected if creation failed, or fulfilled with the `SoundObject` if creation succeeded.\n   */\n  static createAsync = async (\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null,\n    downloadFirst: boolean = true\n  ): Promise<SoundObject> => {\n    const sound: Sound = new Sound();\n    sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n    const status: AVPlaybackStatus = await sound.loadAsync(source, initialStatus, downloadFirst);\n    return { sound, status };\n  };\n\n  // Internal methods\n\n  _callOnPlaybackStatusUpdateForNewStatus(status: AVPlaybackStatus) {\n    const shouldDismissBasedOnCoalescing =\n      this._lastStatusUpdateTime &&\n      JSON.stringify(status) === this._lastStatusUpdate &&\n      Date.now() - this._lastStatusUpdateTime.getTime() < this._coalesceStatusUpdatesInMillis;\n\n    if (this._onPlaybackStatusUpdate != null && !shouldDismissBasedOnCoalescing) {\n      this._onPlaybackStatusUpdate(status);\n      this._lastStatusUpdateTime = new Date();\n      this._lastStatusUpdate = JSON.stringify(status);\n    }\n  }\n\n  async _performOperationAndHandleStatusAsync(\n    operation: () => Promise<AVPlaybackStatus>\n  ): Promise<AVPlaybackStatus> {\n    throwIfAudioIsDisabled();\n    if (this._loaded) {\n      const status = await operation();\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n      return status;\n    } else {\n      throw new Error('Cannot complete operation because sound is not loaded.');\n    }\n  }\n\n  private _updateAudioSampleReceivedCallback() {\n    if (globalThis.__EXAV_setOnAudioSampleReceivedCallback == null) {\n      if (Platform.OS === 'ios' || Platform.OS === 'android') {\n        console.warn(\n          'expo-av: Failed to set up Audio Sample Buffer callback. ' +\n            \"Do you have 'Remote Debugging' enabled in your app's Developer Menu (https://docs.expo.dev/workflow/debugging)? \" +\n            'Audio Sample Buffer callbacks are not supported while using Remote Debugging, you will need to disable it to use them.'\n        );\n        return;\n      } else {\n        throw new UnavailabilityError('expo-av', 'setOnAudioSampleReceived');\n      }\n    }\n    if (this._key == null) {\n      throw new Error(\n        'Cannot set Audio Sample Buffer callback when the Sound instance has not been successfully loaded/initialized!'\n      );\n    }\n    if (typeof this._key !== 'number') {\n      throw new Error(\n        `Cannot set Audio Sample Buffer callback when Sound instance key is of type ${typeof this\n          ._key}! (expected: number)`\n      );\n    }\n\n    globalThis.__EXAV_setOnAudioSampleReceivedCallback(this._key, this._onAudioSampleReceived);\n  }\n\n  _internalStatusUpdateCallback = ({\n    key,\n    status,\n  }: {\n    key: AudioInstance;\n    status: AVPlaybackStatus;\n  }) => {\n    if (this._key === key) {\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n    }\n  };\n\n  _internalMetadataUpdateCallback = ({\n    key,\n    metadata,\n  }: {\n    key: AudioInstance;\n    metadata: AVMetadata;\n  }) => {\n    if (this._key === key) {\n      this._onMetadataUpdate?.(metadata);\n    }\n  };\n\n  _internalErrorCallback = ({ key, error }: { key: AudioInstance; error: string }) => {\n    if (this._key === key) {\n      this._errorCallback(error);\n    }\n  };\n\n  // TODO: We can optimize by only using time observer on native if (this._onPlaybackStatusUpdate).\n  _subscribeToNativeEvents() {\n    if (this._loaded) {\n      this._subscriptions.push(\n        this._eventEmitter.addListener(\n          'didUpdatePlaybackStatus',\n          this._internalStatusUpdateCallback\n        ),\n        this._eventEmitter.addListener('didUpdateMetadata', this._internalMetadataUpdateCallback)\n      );\n\n      this._subscriptions.push(\n        this._eventEmitter.addListener('ExponentAV.onError', this._internalErrorCallback)\n      );\n    }\n  }\n\n  _clearSubscriptions() {\n    this._subscriptions.forEach((e) => e.remove());\n    this._subscriptions = [];\n  }\n\n  _errorCallback = (error: string) => {\n    this._clearSubscriptions();\n    this._loaded = false;\n    this._key = null;\n    this._callOnPlaybackStatusUpdateForNewStatus(getUnloadedStatus(error));\n  };\n\n  // ### Unified playback API ### (consistent with Video.js)\n  // All calls automatically call onPlaybackStatusUpdate as a side effect.\n\n  // Get status API\n\n  getStatusAsync = async (): Promise<AVPlaybackStatus> => {\n    if (this._loaded) {\n      return this._performOperationAndHandleStatusAsync(() =>\n        ExponentAV.getStatusForSound(this._key)\n      );\n    }\n    const status: AVPlaybackStatus = getUnloadedStatus();\n    this._callOnPlaybackStatusUpdateForNewStatus(status);\n    return status;\n  };\n\n  /**\n   * Sets a function to be called regularly with the `AVPlaybackStatus` of the playback object.\n   *\n   * `onPlaybackStatusUpdate` will be called whenever a call to the API for this playback object completes\n   * (such as `setStatusAsync()`, `getStatusAsync()`, or `unloadAsync()`), nd will also be called at regular intervals\n   * while the media is in the loaded state.\n   *\n   * Set `progressUpdateIntervalMillis` via `setStatusAsync()` or `setProgressUpdateIntervalAsync()` to modify\n   * the interval with which `onPlaybackStatusUpdate` is called while loaded.\n   *\n   * @param onPlaybackStatusUpdate A function taking a single parameter `AVPlaybackStatus`.\n   */\n  setOnPlaybackStatusUpdate(onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null) {\n    this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n    this.getStatusAsync();\n  }\n\n  /**\n   * Sets a function to be called whenever the metadata of the sound object changes, if one is set.\n   * @param onMetadataUpdate A function taking a single object of type `AVMetadata` as a parameter.\n   * @platform ios\n   */\n  setOnMetadataUpdate(onMetadataUpdate: (metadata: AVMetadata) => void) {\n    this._onMetadataUpdate = onMetadataUpdate;\n  }\n\n  /**\n   * Sets a function to be called during playback, receiving the audio sample as parameter.\n   * @param callback A function taking the `AudioSampleCallback` as parameter.\n   */\n  setOnAudioSampleReceived(callback: AudioSampleCallback) {\n    this._onAudioSampleReceived = callback;\n    if (this._key != null) {\n      this._updateAudioSampleReceivedCallback();\n    }\n  }\n\n  // Loading / unloading API\n\n  async loadAsync(\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    downloadFirst: boolean = true\n  ): Promise<AVPlaybackStatus> {\n    throwIfAudioIsDisabled();\n    if (this._loading) {\n      throw new Error('The Sound is already loading.');\n    }\n    if (!this._loaded) {\n      this._loading = true;\n\n      const { nativeSource, fullInitialStatus } =\n        await getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst);\n\n      // This is a workaround, since using load with resolve / reject seems to not work.\n      return new Promise<AVPlaybackStatus>((resolve, reject) => {\n        const loadSuccess = (result: [AudioInstance, AVPlaybackStatus]) => {\n          const [key, status] = result;\n          this._key = key;\n          this._loaded = true;\n          this._loading = false;\n          this._subscribeToNativeEvents();\n          this._callOnPlaybackStatusUpdateForNewStatus(status);\n          resolve(status);\n        };\n\n        const loadError = (error: Error) => {\n          this._loading = false;\n          reject(error);\n        };\n\n        ExponentAV.loadForSound(nativeSource, fullInitialStatus).then(loadSuccess).catch(loadError);\n      });\n    } else {\n      throw new Error('The Sound is already loaded.');\n    }\n  }\n\n  async unloadAsync(): Promise<AVPlaybackStatus> {\n    if (this._loaded) {\n      this._loaded = false;\n      const key = this._key;\n      this._key = null;\n      const status = await ExponentAV.unloadForSound(key);\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n      this._clearSubscriptions();\n      return status;\n    } else {\n      return this.getStatusAsync(); // Automatically calls onPlaybackStatusUpdate.\n    }\n  }\n\n  // Set status API (only available while isLoaded = true)\n\n  async setStatusAsync(status: AVPlaybackStatusToSet): Promise<AVPlaybackStatus> {\n    assertStatusValuesInBounds(status);\n    return this._performOperationAndHandleStatusAsync(() =>\n      ExponentAV.setStatusForSound(this._key, status)\n    );\n  }\n\n  async replayAsync(status: AVPlaybackStatusToSet = {}): Promise<AVPlaybackStatus> {\n    if (status.positionMillis && status.positionMillis !== 0) {\n      throw new Error('Requested position after replay has to be 0.');\n    }\n\n    return this._performOperationAndHandleStatusAsync(() =>\n      ExponentAV.replaySound(this._key, {\n        ...status,\n        positionMillis: 0,\n        shouldPlay: true,\n      })\n    );\n  }\n\n  // Methods of the Playback interface that are set via PlaybackMixin\n  playAsync!: () => Promise<AVPlaybackStatus>;\n  playFromPositionAsync!: (\n    positionMillis: number,\n    tolerances?: AVPlaybackTolerance\n  ) => Promise<AVPlaybackStatus>;\n  pauseAsync!: () => Promise<AVPlaybackStatus>;\n  stopAsync!: () => Promise<AVPlaybackStatus>;\n  setPositionAsync!: (\n    positionMillis: number,\n    tolerances?: AVPlaybackTolerance\n  ) => Promise<AVPlaybackStatus>;\n  setRateAsync!: (\n    rate: number,\n    shouldCorrectPitch: boolean,\n    pitchCorrectionQuality?: PitchCorrectionQuality\n  ) => Promise<AVPlaybackStatus>;\n  setVolumeAsync!: (volume: number, audioPan?: number) => Promise<AVPlaybackStatus>;\n  setIsMutedAsync!: (isMuted: boolean) => Promise<AVPlaybackStatus>;\n  setIsLoopingAsync!: (isLooping: boolean) => Promise<AVPlaybackStatus>;\n  setProgressUpdateIntervalAsync!: (\n    progressUpdateIntervalMillis: number\n  ) => Promise<AVPlaybackStatus>;\n}\n\nObject.assign(Sound.prototype, PlaybackMixin);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}