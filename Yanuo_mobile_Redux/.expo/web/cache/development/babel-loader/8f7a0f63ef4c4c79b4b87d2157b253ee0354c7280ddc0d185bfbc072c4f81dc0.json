{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:\\Users\\Zalo 0981915665\\Desktop\\FixBug\\Yanuo\\node_modules\\react-native-element-dropdown\\src\\components\\Dropdown\\model.ts"],"sourcesContent":["import type {\n  StyleProp,\n  TextStyle,\n  ViewStyle,\n  TextProps,\n  ImageStyle,\n  FlatListProps,\n} from 'react-native';\n\nexport type IDropdownRef = {\n  open: () => void;\n  close: () => void;\n};\n\nexport interface DropdownProps<T> {\n  ref?:\n    | React.RefObject<IDropdownRef>\n    | React.MutableRefObject<IDropdownRef>\n    | null\n    | undefined;\n  testID?: string;\n  itemTestIDField?: string;\n  style?: StyleProp<ViewStyle>;\n  containerStyle?: StyleProp<ViewStyle>;\n  placeholderStyle?: StyleProp<TextStyle>;\n  selectedTextStyle?: StyleProp<TextStyle>;\n  selectedTextProps?: TextProps;\n  itemContainerStyle?: StyleProp<ViewStyle>;\n  itemTextStyle?: StyleProp<TextStyle>;\n  inputSearchStyle?: StyleProp<TextStyle>;\n  iconStyle?: StyleProp<ImageStyle>;\n  maxHeight?: number;\n  minHeight?: number;\n  fontFamily?: string;\n  iconColor?: string;\n  activeColor?: string;\n  data: T[];\n  value?: T | string | null | undefined;\n  placeholder?: string;\n  labelField: keyof T;\n  valueField: keyof T;\n  searchField?: keyof T;\n  search?: boolean;\n  searchPlaceholder?: string;\n  disable?: boolean;\n  autoScroll?: boolean;\n  showsVerticalScrollIndicator?: boolean;\n  dropdownPosition?: 'auto' | 'top' | 'bottom';\n  flatListProps?: Omit<FlatListProps<any>, 'renderItem' | 'data'>;\n  keyboardAvoiding?: boolean;\n  backgroundColor?: string;\n  confirmSelectItem?: boolean;\n  accessibilityLabel?: string;\n  itemAccessibilityLabelField?: string;\n  inverted?: boolean;\n  mode?: 'default' | 'modal' | 'auto';\n  onChange: (item: T) => void;\n  renderLeftIcon?: (visible?: boolean) => JSX.Element | null | undefined;\n  renderRightIcon?: (visible?: boolean) => JSX.Element | null | undefined;\n  renderItem?: (item: T, selected?: boolean) => JSX.Element | null | undefined;\n  renderInputSearch?: (\n    onSearch: (text: string) => void\n  ) => JSX.Element | null | undefined;\n  onFocus?: () => void;\n  onBlur?: () => void;\n  searchQuery?: (keyword: string, labelValue: string) => boolean;\n  onChangeText?: (search: string) => void;\n  onConfirmSelectItem?: (item: T) => void;\n}\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}