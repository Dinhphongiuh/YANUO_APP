{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\DinhPhongIUH\\\\Desktop\\\\nhap\\\\Yanuo_mobile_Redux\\\\node_modules\\\\expo-av\\\\build\\\\Video.js\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport * as React from 'react';\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { assertStatusValuesInBounds, getNativeSourceAndFullInitialStatusForLoadAsync, getNativeSourceFromSource, getUnloadedStatus, PlaybackMixin } from './AV';\nimport ExpoVideoManager from './ExpoVideoManager';\nimport ExponentAV from './ExponentAV';\nimport ExponentVideo from './ExponentVideo';\nimport { ResizeMode } from './Video.types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst _STYLES = StyleSheet.create({\n  base: {\n    overflow: 'hidden',\n    pointerEvents: 'box-none'\n  },\n  poster: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    resizeMode: 'contain'\n  },\n  video: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0\n  }\n});\nconst ExpoVideoManagerConstants = ExpoVideoManager;\nconst ExpoVideoViewManager = ExpoVideoManager;\nclass Video extends React.Component {\n  _nativeRef = React.createRef();\n  _onPlaybackStatusUpdate = null;\n  constructor(props) {\n    super(props);\n    this.state = {\n      showPoster: !!props.usePoster\n    };\n  }\n  setNativeProps(nativeProps) {\n    const nativeVideo = this._nativeRef.current;\n    if (!nativeVideo) throw new Error(`native video reference is not defined.`);\n    nativeVideo.setNativeProps(nativeProps);\n  }\n  _handleNewStatus = status => {\n    if (this.state.showPoster && status.isLoaded && (status.isPlaying || status.positionMillis !== 0)) {\n      this.setState({\n        showPoster: false\n      });\n    }\n    if (this.props.onPlaybackStatusUpdate) {\n      this.props.onPlaybackStatusUpdate(status);\n    }\n    if (this._onPlaybackStatusUpdate) {\n      this._onPlaybackStatusUpdate(status);\n    }\n  };\n  _performOperationAndHandleStatusAsync = async operation => {\n    const video = this._nativeRef.current;\n    if (!video) {\n      throw new Error(`Cannot complete operation because the Video component has not yet loaded`);\n    }\n    const handle = findNodeHandle(this._nativeRef.current);\n    const status = await operation(handle);\n    this._handleNewStatus(status);\n    return status;\n  };\n  _setFullscreen = async value => {\n    return this._performOperationAndHandleStatusAsync(tag => ExpoVideoViewManager.setFullscreen(tag, value));\n  };\n  presentFullscreenPlayer = async () => {\n    return this._setFullscreen(true);\n  };\n  dismissFullscreenPlayer = async () => {\n    return this._setFullscreen(false);\n  };\n  getStatusAsync = async () => {\n    return this._performOperationAndHandleStatusAsync(tag => ExponentAV.getStatusForVideo(tag));\n  };\n  loadAsync = async (source, initialStatus = {}, downloadFirst = true) => {\n    const {\n      nativeSource,\n      fullInitialStatus\n    } = await getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst);\n    return this._performOperationAndHandleStatusAsync(tag => ExponentAV.loadForVideo(tag, nativeSource, fullInitialStatus));\n  };\n  unloadAsync = async () => {\n    return this._performOperationAndHandleStatusAsync(tag => ExponentAV.unloadForVideo(tag));\n  };\n  componentWillUnmount() {\n    this.unloadAsync().catch(() => {});\n  }\n  setStatusAsync = async status => {\n    assertStatusValuesInBounds(status);\n    return this._performOperationAndHandleStatusAsync(tag => ExponentAV.setStatusForVideo(tag, status));\n  };\n  replayAsync = async (status = {}) => {\n    if (status.positionMillis && status.positionMillis !== 0) {\n      throw new Error('Requested position after replay has to be 0.');\n    }\n    return this._performOperationAndHandleStatusAsync(tag => ExponentAV.replayVideo(tag, _objectSpread(_objectSpread({}, status), {}, {\n      positionMillis: 0,\n      shouldPlay: true\n    })));\n  };\n  setOnPlaybackStatusUpdate(onPlaybackStatusUpdate) {\n    this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n    this.getStatusAsync();\n  }\n  _nativeOnPlaybackStatusUpdate = event => {\n    this._handleNewStatus(event.nativeEvent);\n  };\n  _nativeOnLoadStart = () => {\n    if (this.props.onLoadStart) {\n      this.props.onLoadStart();\n    }\n  };\n  _nativeOnLoad = event => {\n    if (this.props.onLoad) {\n      this.props.onLoad(event.nativeEvent);\n    }\n    this._handleNewStatus(event.nativeEvent);\n  };\n  _nativeOnError = event => {\n    const error = event.nativeEvent.error;\n    if (this.props.onError) {\n      this.props.onError(error);\n    }\n    this._handleNewStatus(getUnloadedStatus(error));\n  };\n  _nativeOnReadyForDisplay = event => {\n    if (this.props.onReadyForDisplay) {\n      this.props.onReadyForDisplay(event.nativeEvent);\n    }\n  };\n  _nativeOnFullscreenUpdate = event => {\n    if (this.props.onFullscreenUpdate) {\n      this.props.onFullscreenUpdate(event.nativeEvent);\n    }\n  };\n  _renderPoster = () => {\n    const PosterComponent = this.props.PosterComponent ?? Image;\n    return this.props.usePoster && this.state.showPoster ? _jsxDEV(PosterComponent, {\n      style: [_STYLES.poster, this.props.posterStyle],\n      source: this.props.posterSource\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 65\n    }, this) : null;\n  };\n  render() {\n    const source = getNativeSourceFromSource(this.props.source) || undefined;\n    let nativeResizeMode = ExpoVideoManagerConstants.ScaleNone;\n    if (this.props.resizeMode) {\n      const resizeMode = this.props.resizeMode;\n      if (resizeMode === ResizeMode.STRETCH) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleToFill;\n      } else if (resizeMode === ResizeMode.CONTAIN) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFit;\n      } else if (resizeMode === ResizeMode.COVER) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFill;\n      }\n    }\n    const status = _objectSpread({}, this.props.status);\n    ['progressUpdateIntervalMillis', 'positionMillis', 'shouldPlay', 'rate', 'shouldCorrectPitch', 'volume', 'isMuted', 'isLooping'].forEach(prop => {\n      if (prop in this.props) {\n        status[prop] = this.props[prop];\n      }\n    });\n    const nativeProps = _objectSpread(_objectSpread({}, omit(this.props, ['source', 'onPlaybackStatusUpdate', 'usePoster', 'posterSource', 'posterStyle', ...Object.keys(status)])), {}, {\n      style: [_STYLES.base, this.props.style],\n      videoStyle: [_STYLES.video, this.props.videoStyle],\n      source,\n      resizeMode: nativeResizeMode,\n      status,\n      onStatusUpdate: this._nativeOnPlaybackStatusUpdate,\n      onLoadStart: this._nativeOnLoadStart,\n      onLoad: this._nativeOnLoad,\n      onError: this._nativeOnError,\n      onReadyForDisplay: this._nativeOnReadyForDisplay,\n      onFullscreenUpdate: this._nativeOnFullscreenUpdate\n    });\n    return _jsxDEV(View, {\n      style: nativeProps.style,\n      children: [_jsxDEV(ExponentVideo, _objectSpread(_objectSpread({\n        ref: this._nativeRef\n      }, nativeProps), {}, {\n        style: nativeProps.videoStyle\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this), this._renderPoster()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 17\n    }, this);\n  }\n}\nfunction omit(props, propNames) {\n  const copied = _objectSpread({}, props);\n  for (const propName of propNames) {\n    delete copied[propName];\n  }\n  return copied;\n}\nObject.assign(Video.prototype, PlaybackMixin);\nexport default Video;","map":{"version":3,"names":["React","findNodeHandle","Image","StyleSheet","View","assertStatusValuesInBounds","getNativeSourceAndFullInitialStatusForLoadAsync","getNativeSourceFromSource","getUnloadedStatus","PlaybackMixin","ExpoVideoManager","ExponentAV","ExponentVideo","ResizeMode","jsxDEV","_jsxDEV","_STYLES","create","base","overflow","pointerEvents","poster","position","left","top","right","bottom","resizeMode","video","ExpoVideoManagerConstants","ExpoVideoViewManager","Video","Component","_nativeRef","createRef","_onPlaybackStatusUpdate","constructor","props","state","showPoster","usePoster","setNativeProps","nativeProps","nativeVideo","current","Error","_handleNewStatus","status","isLoaded","isPlaying","positionMillis","setState","onPlaybackStatusUpdate","_performOperationAndHandleStatusAsync","operation","handle","_setFullscreen","value","tag","setFullscreen","presentFullscreenPlayer","dismissFullscreenPlayer","getStatusAsync","getStatusForVideo","loadAsync","source","initialStatus","downloadFirst","nativeSource","fullInitialStatus","loadForVideo","unloadAsync","unloadForVideo","componentWillUnmount","catch","setStatusAsync","setStatusForVideo","replayAsync","replayVideo","_objectSpread","shouldPlay","setOnPlaybackStatusUpdate","_nativeOnPlaybackStatusUpdate","event","nativeEvent","_nativeOnLoadStart","onLoadStart","_nativeOnLoad","onLoad","_nativeOnError","error","onError","_nativeOnReadyForDisplay","onReadyForDisplay","_nativeOnFullscreenUpdate","onFullscreenUpdate","_renderPoster","PosterComponent","style","posterStyle","posterSource","fileName","_jsxFileName","lineNumber","columnNumber","render","undefined","nativeResizeMode","ScaleNone","STRETCH","ScaleToFill","CONTAIN","ScaleAspectFit","COVER","ScaleAspectFill","forEach","prop","omit","Object","keys","videoStyle","onStatusUpdate","children","ref","propNames","copied","propName","assign","prototype"],"sources":["C:\\Users\\DinhPhongIUH\\Desktop\\nhap\\Yanuo_mobile_Redux\\node_modules\\expo-av\\src\\Video.tsx"],"sourcesContent":["import * as React from 'react';\nimport { findNodeHandle, Image, NativeMethods, StyleSheet, View } from 'react-native';\n\nimport {\n  assertStatusValuesInBounds,\n  getNativeSourceAndFullInitialStatusForLoadAsync,\n  getNativeSourceFromSource,\n  getUnloadedStatus,\n  Playback,\n  PlaybackMixin,\n  AVPlaybackSource,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n  AVPlaybackTolerance,\n  PitchCorrectionQuality,\n} from './AV';\nimport ExpoVideoManager from './ExpoVideoManager';\nimport ExponentAV from './ExponentAV';\nimport ExponentVideo from './ExponentVideo';\nimport {\n  ExponentVideoComponent,\n  VideoFullscreenUpdateEvent,\n  VideoNativeProps,\n  VideoProps,\n  VideoReadyForDisplayEvent,\n  ResizeMode,\n  VideoState,\n} from './Video.types';\n\nconst _STYLES = StyleSheet.create({\n  base: {\n    overflow: 'hidden',\n    pointerEvents: 'box-none',\n  },\n  poster: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    resizeMode: 'contain',\n  },\n  video: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n  },\n});\n\n// On a real device UIManager should be present, however when running offline tests with jest-expo\n// we have to use the provided native module mock to access constants\nconst ExpoVideoManagerConstants = ExpoVideoManager;\nconst ExpoVideoViewManager = ExpoVideoManager;\n\nclass Video extends React.Component<VideoProps, VideoState> implements Playback {\n  _nativeRef = React.createRef<InstanceType<ExponentVideoComponent> & NativeMethods>();\n  _onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null;\n\n  constructor(props: VideoProps) {\n    super(props);\n    this.state = {\n      showPoster: !!props.usePoster,\n    };\n  }\n\n  /**\n   * @hidden\n   */\n  setNativeProps(nativeProps: VideoNativeProps) {\n    const nativeVideo = this._nativeRef.current;\n    if (!nativeVideo) throw new Error(`native video reference is not defined.`);\n    nativeVideo.setNativeProps(nativeProps);\n  }\n\n  // Internal methods\n\n  _handleNewStatus = (status: AVPlaybackStatus) => {\n    if (\n      this.state.showPoster &&\n      status.isLoaded &&\n      (status.isPlaying || status.positionMillis !== 0)\n    ) {\n      this.setState({ showPoster: false });\n    }\n\n    if (this.props.onPlaybackStatusUpdate) {\n      this.props.onPlaybackStatusUpdate(status);\n    }\n    if (this._onPlaybackStatusUpdate) {\n      this._onPlaybackStatusUpdate(status);\n    }\n  };\n\n  _performOperationAndHandleStatusAsync = async (\n    operation: (tag: number) => Promise<AVPlaybackStatus>\n  ): Promise<AVPlaybackStatus> => {\n    const video = this._nativeRef.current;\n    if (!video) {\n      throw new Error(`Cannot complete operation because the Video component has not yet loaded`);\n    }\n\n    const handle = findNodeHandle(this._nativeRef.current)!;\n    const status: AVPlaybackStatus = await operation(handle);\n    this._handleNewStatus(status);\n    return status;\n  };\n\n  // Fullscreening API\n\n  _setFullscreen = async (value: boolean): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExpoVideoViewManager.setFullscreen(tag, value)\n    );\n  };\n\n  /**\n   * This presents a fullscreen view of your video component on top of your app's UI. Note that even if `useNativeControls` is set to `false`,\n   * native controls will be visible in fullscreen mode.\n   * @return A `Promise` that is fulfilled with the `AVPlaybackStatus` of the video once the fullscreen player has finished presenting,\n   * or rejects if there was an error, or if this was called on an Android device.\n   */\n  presentFullscreenPlayer = async (): Promise<AVPlaybackStatus> => {\n    return this._setFullscreen(true);\n  };\n\n  /**\n   * This dismisses the fullscreen video view.\n   * @return A `Promise` that is fulfilled with the `AVPlaybackStatus` of the video once the fullscreen player has finished dismissing,\n   * or rejects if there was an error, or if this was called on an Android device.\n   */\n  dismissFullscreenPlayer = async (): Promise<AVPlaybackStatus> => {\n    return this._setFullscreen(false);\n  };\n\n  // ### Unified playback API ### (consistent with Audio.js)\n  // All calls automatically call onPlaybackStatusUpdate as a side effect.\n\n  /**\n   * @hidden\n   */\n  getStatusAsync = async (): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.getStatusForVideo(tag)\n    );\n  };\n\n  /**\n   * @hidden\n   */\n  loadAsync = async (\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    downloadFirst: boolean = true\n  ): Promise<AVPlaybackStatus> => {\n    const { nativeSource, fullInitialStatus } =\n      await getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst);\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.loadForVideo(tag, nativeSource, fullInitialStatus)\n    );\n  };\n\n  /**\n   * Equivalent to setting URI to `null`.\n   * @hidden\n   */\n  unloadAsync = async (): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.unloadForVideo(tag)\n    );\n  };\n\n  componentWillUnmount() {\n    // Auto unload video to perform necessary cleanup safely\n    this.unloadAsync().catch(() => {\n      // Ignored rejection. Sometimes the unloadAsync code is executed when video is already unloaded.\n      // In such cases, it throws:\n      // \"[Unhandled promise rejection: Error: Invalid view returned from registry,\n      //  expecting EXVideo, got: (null)]\"\n    });\n  }\n\n  /**\n   * Set status API, only available while `isLoaded = true`.\n   * @hidden\n   */\n  setStatusAsync = async (status: AVPlaybackStatusToSet): Promise<AVPlaybackStatus> => {\n    assertStatusValuesInBounds(status);\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.setStatusForVideo(tag, status)\n    );\n  };\n\n  /**\n   * @hidden\n   */\n  replayAsync = async (status: AVPlaybackStatusToSet = {}): Promise<AVPlaybackStatus> => {\n    if (status.positionMillis && status.positionMillis !== 0) {\n      throw new Error('Requested position after replay has to be 0.');\n    }\n\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.replayVideo(tag, {\n        ...status,\n        positionMillis: 0,\n        shouldPlay: true,\n      })\n    );\n  };\n\n  /**\n   * Sets a function to be called regularly with the `AVPlaybackStatus` of the playback object.\n   *\n   * `onPlaybackStatusUpdate` will be called whenever a call to the API for this playback object completes\n   * (such as `setStatusAsync()`, `getStatusAsync()`, or `unloadAsync()`), nd will also be called at regular intervals\n   * while the media is in the loaded state.\n   *\n   * Set `progressUpdateIntervalMillis` via `setStatusAsync()` or `setProgressUpdateIntervalAsync()` to modify\n   * the interval with which `onPlaybackStatusUpdate` is called while loaded.\n   *\n   * @param onPlaybackStatusUpdate A function taking a single parameter `AVPlaybackStatus`.\n   */\n  setOnPlaybackStatusUpdate(onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null) {\n    this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n    this.getStatusAsync();\n  }\n\n  // Methods of the Playback interface that are set via PlaybackMixin\n  playAsync!: () => Promise<AVPlaybackStatus>;\n  playFromPositionAsync!: (\n    positionMillis: number,\n    tolerances?: AVPlaybackTolerance\n  ) => Promise<AVPlaybackStatus>;\n  pauseAsync!: () => Promise<AVPlaybackStatus>;\n  stopAsync!: () => Promise<AVPlaybackStatus>;\n  setPositionAsync!: (\n    positionMillis: number,\n    tolerances?: AVPlaybackTolerance\n  ) => Promise<AVPlaybackStatus>;\n  setRateAsync!: (\n    rate: number,\n    shouldCorrectPitch: boolean,\n    pitchCorrectionQuality?: PitchCorrectionQuality\n  ) => Promise<AVPlaybackStatus>;\n  setVolumeAsync!: (volume: number, audioPan?: number) => Promise<AVPlaybackStatus>;\n  setIsMutedAsync!: (isMuted: boolean) => Promise<AVPlaybackStatus>;\n  setIsLoopingAsync!: (isLooping: boolean) => Promise<AVPlaybackStatus>;\n  setProgressUpdateIntervalAsync!: (\n    progressUpdateIntervalMillis: number\n  ) => Promise<AVPlaybackStatus>;\n\n  // Callback wrappers\n\n  _nativeOnPlaybackStatusUpdate = (event: { nativeEvent: AVPlaybackStatus }) => {\n    this._handleNewStatus(event.nativeEvent);\n  };\n\n  // TODO make sure we are passing the right stuff\n  _nativeOnLoadStart = () => {\n    if (this.props.onLoadStart) {\n      this.props.onLoadStart();\n    }\n  };\n\n  _nativeOnLoad = (event: { nativeEvent: AVPlaybackStatus }) => {\n    if (this.props.onLoad) {\n      this.props.onLoad(event.nativeEvent);\n    }\n    this._handleNewStatus(event.nativeEvent);\n  };\n\n  _nativeOnError = (event: { nativeEvent: { error: string } }) => {\n    const error: string = event.nativeEvent.error;\n    if (this.props.onError) {\n      this.props.onError(error);\n    }\n    this._handleNewStatus(getUnloadedStatus(error));\n  };\n\n  _nativeOnReadyForDisplay = (event: { nativeEvent: VideoReadyForDisplayEvent }) => {\n    if (this.props.onReadyForDisplay) {\n      this.props.onReadyForDisplay(event.nativeEvent);\n    }\n  };\n\n  _nativeOnFullscreenUpdate = (event: { nativeEvent: VideoFullscreenUpdateEvent }) => {\n    if (this.props.onFullscreenUpdate) {\n      this.props.onFullscreenUpdate(event.nativeEvent);\n    }\n  };\n\n  _renderPoster = () => {\n    const PosterComponent = this.props.PosterComponent ?? Image;\n\n    return this.props.usePoster && this.state.showPoster ? (\n      <PosterComponent\n        style={[_STYLES.poster, this.props.posterStyle]}\n        source={this.props.posterSource!}\n      />\n    ) : null;\n  };\n\n  render() {\n    const source = getNativeSourceFromSource(this.props.source) || undefined;\n\n    let nativeResizeMode = ExpoVideoManagerConstants.ScaleNone;\n    if (this.props.resizeMode) {\n      const resizeMode = this.props.resizeMode;\n      if (resizeMode === ResizeMode.STRETCH) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleToFill;\n      } else if (resizeMode === ResizeMode.CONTAIN) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFit;\n      } else if (resizeMode === ResizeMode.COVER) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFill;\n      }\n    }\n\n    // Set status via individual props\n    const status: AVPlaybackStatusToSet = { ...this.props.status };\n    [\n      'progressUpdateIntervalMillis',\n      'positionMillis',\n      'shouldPlay',\n      'rate',\n      'shouldCorrectPitch',\n      'volume',\n      'isMuted',\n      'isLooping',\n    ].forEach((prop) => {\n      if (prop in this.props) {\n        status[prop] = this.props[prop];\n      }\n    });\n\n    // Replace selected native props\n    const nativeProps: VideoNativeProps = {\n      ...omit(this.props, [\n        'source',\n        'onPlaybackStatusUpdate',\n        'usePoster',\n        'posterSource',\n        'posterStyle',\n        ...Object.keys(status),\n      ]),\n      style: [_STYLES.base, this.props.style],\n      videoStyle: [_STYLES.video, this.props.videoStyle],\n      source,\n      resizeMode: nativeResizeMode,\n      status,\n      onStatusUpdate: this._nativeOnPlaybackStatusUpdate,\n      onLoadStart: this._nativeOnLoadStart,\n      onLoad: this._nativeOnLoad,\n      onError: this._nativeOnError,\n      onReadyForDisplay: this._nativeOnReadyForDisplay,\n      onFullscreenUpdate: this._nativeOnFullscreenUpdate,\n    };\n\n    return (\n      <View style={nativeProps.style}>\n        <ExponentVideo ref={this._nativeRef} {...nativeProps} style={nativeProps.videoStyle} />\n        {this._renderPoster()}\n      </View>\n    );\n  }\n}\n\nfunction omit(props: Record<string, any>, propNames: string[]) {\n  const copied = { ...props };\n  for (const propName of propNames) {\n    delete copied[propName];\n  }\n  return copied;\n}\n\nObject.assign(Video.prototype, PlaybackMixin);\n\n// note(simek): TypeDoc cannot resolve correctly name of inline and default exported class\nexport default Video;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}