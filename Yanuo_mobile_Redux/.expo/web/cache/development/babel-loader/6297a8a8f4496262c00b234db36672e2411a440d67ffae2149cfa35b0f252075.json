{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport EventManager from './EventManager';\nimport { MouseButton } from '../../handlers/gestureHandlerCommon';\nimport { EventTypes } from '../interfaces';\nimport { PointerTypeMapping, isPointerInBounds } from '../utils';\nimport { PointerType } from '../../PointerType';\nconst POINTER_CAPTURE_EXCLUDE_LIST = new Set(['SELECT', 'INPUT']);\nconst PointerTypes = {\n  Touch: 'touch',\n  Stylus: 'pen'\n};\nexport default class PointerEventManager extends EventManager {\n  constructor(view) {\n    super(view);\n    _defineProperty(this, \"trackedPointers\", new Set());\n    _defineProperty(this, \"mouseButtonsMapper\", new Map());\n    _defineProperty(this, \"lastPosition\", void 0);\n    _defineProperty(this, \"pointerDownCallback\", event => {\n      if (event.pointerType === PointerTypes.Touch) {\n        return;\n      }\n      if (!isPointerInBounds(this.view, {\n        x: event.clientX,\n        y: event.clientY\n      })) {\n        return;\n      }\n      const adaptedEvent = this.mapEvent(event, EventTypes.DOWN);\n      const target = event.target;\n      if (!POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)) {\n        target.setPointerCapture(adaptedEvent.pointerId);\n      }\n      this.markAsInBounds(adaptedEvent.pointerId);\n      this.trackedPointers.add(adaptedEvent.pointerId);\n      if (++this.activePointersCounter > 1) {\n        adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_DOWN;\n        this.onPointerAdd(adaptedEvent);\n      } else {\n        this.onPointerDown(adaptedEvent);\n      }\n    });\n    _defineProperty(this, \"pointerUpCallback\", event => {\n      if (event.pointerType === PointerTypes.Touch) {\n        return;\n      }\n      if (this.activePointersCounter === 0) {\n        return;\n      }\n      const adaptedEvent = this.mapEvent(event, EventTypes.UP);\n      const target = event.target;\n      if (!POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)) {\n        target.releasePointerCapture(adaptedEvent.pointerId);\n      }\n      this.markAsOutOfBounds(adaptedEvent.pointerId);\n      this.trackedPointers.delete(adaptedEvent.pointerId);\n      if (--this.activePointersCounter > 0) {\n        adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_UP;\n        this.onPointerRemove(adaptedEvent);\n      } else {\n        this.onPointerUp(adaptedEvent);\n      }\n    });\n    _defineProperty(this, \"pointerMoveCallback\", event => {\n      if (event.pointerType === PointerTypes.Touch) {\n        return;\n      }\n      if (event.pointerType === PointerTypes.Stylus && event.x === this.lastPosition.x && event.y === this.lastPosition.y) {\n        return;\n      }\n      const adaptedEvent = this.mapEvent(event, EventTypes.MOVE);\n      const target = event.target;\n      if (!target.hasPointerCapture(event.pointerId) && !POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)) {\n        target.setPointerCapture(event.pointerId);\n      }\n      const inBounds = isPointerInBounds(this.view, {\n        x: adaptedEvent.x,\n        y: adaptedEvent.y\n      });\n      const pointerIndex = this.pointersInBounds.indexOf(adaptedEvent.pointerId);\n      if (inBounds) {\n        if (pointerIndex < 0) {\n          adaptedEvent.eventType = EventTypes.ENTER;\n          this.onPointerEnter(adaptedEvent);\n          this.markAsInBounds(adaptedEvent.pointerId);\n        } else {\n          this.onPointerMove(adaptedEvent);\n        }\n      } else {\n        if (pointerIndex >= 0) {\n          adaptedEvent.eventType = EventTypes.LEAVE;\n          this.onPointerLeave(adaptedEvent);\n          this.markAsOutOfBounds(adaptedEvent.pointerId);\n        } else {\n          this.onPointerOutOfBounds(adaptedEvent);\n        }\n      }\n      this.lastPosition.x = event.x;\n      this.lastPosition.y = event.y;\n    });\n    _defineProperty(this, \"pointerCancelCallback\", event => {\n      if (event.pointerType === PointerTypes.Touch) {\n        return;\n      }\n      const adaptedEvent = this.mapEvent(event, EventTypes.CANCEL);\n      this.onPointerCancel(adaptedEvent);\n      this.markAsOutOfBounds(adaptedEvent.pointerId);\n      this.activePointersCounter = 0;\n      this.trackedPointers.clear();\n    });\n    _defineProperty(this, \"pointerEnterCallback\", event => {\n      if (event.pointerType === PointerTypes.Touch) {\n        return;\n      }\n      const adaptedEvent = this.mapEvent(event, EventTypes.ENTER);\n      this.onPointerMoveOver(adaptedEvent);\n    });\n    _defineProperty(this, \"pointerLeaveCallback\", event => {\n      if (event.pointerType === PointerTypes.Touch) {\n        return;\n      }\n      const adaptedEvent = this.mapEvent(event, EventTypes.LEAVE);\n      this.onPointerMoveOut(adaptedEvent);\n    });\n    _defineProperty(this, \"lostPointerCaptureCallback\", event => {\n      const adaptedEvent = this.mapEvent(event, EventTypes.CANCEL);\n      if (this.trackedPointers.has(adaptedEvent.pointerId)) {\n        this.onPointerCancel(adaptedEvent);\n        this.activePointersCounter = 0;\n        this.trackedPointers.clear();\n      }\n    });\n    this.mouseButtonsMapper.set(0, MouseButton.LEFT);\n    this.mouseButtonsMapper.set(1, MouseButton.MIDDLE);\n    this.mouseButtonsMapper.set(2, MouseButton.RIGHT);\n    this.mouseButtonsMapper.set(3, MouseButton.BUTTON_4);\n    this.mouseButtonsMapper.set(4, MouseButton.BUTTON_5);\n    this.lastPosition = {\n      x: -Infinity,\n      y: -Infinity\n    };\n  }\n  registerListeners() {\n    this.view.addEventListener('pointerdown', this.pointerDownCallback);\n    this.view.addEventListener('pointerup', this.pointerUpCallback);\n    this.view.addEventListener('pointermove', this.pointerMoveCallback);\n    this.view.addEventListener('pointercancel', this.pointerCancelCallback);\n    this.view.addEventListener('pointerenter', this.pointerEnterCallback);\n    this.view.addEventListener('pointerleave', this.pointerLeaveCallback);\n    this.view.addEventListener('lostpointercapture', this.lostPointerCaptureCallback);\n  }\n  unregisterListeners() {\n    this.view.removeEventListener('pointerdown', this.pointerDownCallback);\n    this.view.removeEventListener('pointerup', this.pointerUpCallback);\n    this.view.removeEventListener('pointermove', this.pointerMoveCallback);\n    this.view.removeEventListener('pointercancel', this.pointerCancelCallback);\n    this.view.removeEventListener('pointerenter', this.pointerEnterCallback);\n    this.view.removeEventListener('pointerleave', this.pointerLeaveCallback);\n    this.view.removeEventListener('lostpointercapture', this.lostPointerCaptureCallback);\n  }\n  mapEvent(event, eventType) {\n    var _PointerTypeMapping$g;\n    return {\n      x: event.clientX,\n      y: event.clientY,\n      offsetX: event.offsetX,\n      offsetY: event.offsetY,\n      pointerId: event.pointerId,\n      eventType: eventType,\n      pointerType: (_PointerTypeMapping$g = PointerTypeMapping.get(event.pointerType)) !== null && _PointerTypeMapping$g !== void 0 ? _PointerTypeMapping$g : PointerType.OTHER,\n      button: this.mouseButtonsMapper.get(event.button),\n      time: event.timeStamp\n    };\n  }\n  resetManager() {\n    super.resetManager();\n    this.trackedPointers.clear();\n  }\n}","map":{"version":3,"names":["EventManager","MouseButton","EventTypes","PointerTypeMapping","isPointerInBounds","PointerType","POINTER_CAPTURE_EXCLUDE_LIST","Set","PointerTypes","Touch","Stylus","PointerEventManager","constructor","view","_defineProperty","Map","event","pointerType","x","clientX","y","clientY","adaptedEvent","mapEvent","DOWN","target","has","tagName","setPointerCapture","pointerId","markAsInBounds","trackedPointers","add","activePointersCounter","eventType","ADDITIONAL_POINTER_DOWN","onPointerAdd","onPointerDown","UP","releasePointerCapture","markAsOutOfBounds","delete","ADDITIONAL_POINTER_UP","onPointerRemove","onPointerUp","lastPosition","MOVE","hasPointerCapture","inBounds","pointerIndex","pointersInBounds","indexOf","ENTER","onPointerEnter","onPointerMove","LEAVE","onPointerLeave","onPointerOutOfBounds","CANCEL","onPointerCancel","clear","onPointerMoveOver","onPointerMoveOut","mouseButtonsMapper","set","LEFT","MIDDLE","RIGHT","BUTTON_4","BUTTON_5","Infinity","registerListeners","addEventListener","pointerDownCallback","pointerUpCallback","pointerMoveCallback","pointerCancelCallback","pointerEnterCallback","pointerLeaveCallback","lostPointerCaptureCallback","unregisterListeners","removeEventListener","_PointerTypeMapping$g","offsetX","offsetY","get","OTHER","button","time","timeStamp","resetManager"],"sources":["C:\\Users\\DinhPhongIUH\\Desktop\\nhap\\Yanuo_mobile_Redux\\node_modules\\react-native-gesture-handler\\lib\\module\\web\\tools\\PointerEventManager.ts"],"sourcesContent":["import EventManager from './EventManager';\nimport { MouseButton } from '../../handlers/gestureHandlerCommon';\nimport { AdaptedEvent, EventTypes, Point } from '../interfaces';\nimport { PointerTypeMapping, isPointerInBounds } from '../utils';\nimport { PointerType } from '../../PointerType';\n\nconst POINTER_CAPTURE_EXCLUDE_LIST = new Set<string>(['SELECT', 'INPUT']);\nconst PointerTypes = {\n  Touch: 'touch',\n  Stylus: 'pen',\n};\n\nexport default class PointerEventManager extends EventManager<HTMLElement> {\n  private trackedPointers = new Set<number>();\n  private readonly mouseButtonsMapper = new Map<number, MouseButton>();\n  private lastPosition: Point;\n\n  constructor(view: HTMLElement) {\n    super(view);\n\n    this.mouseButtonsMapper.set(0, MouseButton.LEFT);\n    this.mouseButtonsMapper.set(1, MouseButton.MIDDLE);\n    this.mouseButtonsMapper.set(2, MouseButton.RIGHT);\n    this.mouseButtonsMapper.set(3, MouseButton.BUTTON_4);\n    this.mouseButtonsMapper.set(4, MouseButton.BUTTON_5);\n\n    this.lastPosition = {\n      x: -Infinity,\n      y: -Infinity,\n    };\n  }\n\n  private pointerDownCallback = (event: PointerEvent) => {\n    if (event.pointerType === PointerTypes.Touch) {\n      return;\n    }\n    if (!isPointerInBounds(this.view, { x: event.clientX, y: event.clientY })) {\n      return;\n    }\n\n    const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.DOWN);\n    const target = event.target as HTMLElement;\n\n    if (!POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)) {\n      target.setPointerCapture(adaptedEvent.pointerId);\n    }\n\n    this.markAsInBounds(adaptedEvent.pointerId);\n    this.trackedPointers.add(adaptedEvent.pointerId);\n\n    if (++this.activePointersCounter > 1) {\n      adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_DOWN;\n      this.onPointerAdd(adaptedEvent);\n    } else {\n      this.onPointerDown(adaptedEvent);\n    }\n  };\n\n  private pointerUpCallback = (event: PointerEvent) => {\n    if (event.pointerType === PointerTypes.Touch) {\n      return;\n    }\n\n    // When we call reset on gesture handlers, it also resets their event managers\n    // In some handlers (like RotationGestureHandler) reset is called before all pointers leave view\n    // This means, that activePointersCounter will be set to 0, while there are still remaining pointers on view\n    // Removing them will end in activePointersCounter going below 0, therefore handlers won't behave properly\n    if (this.activePointersCounter === 0) {\n      return;\n    }\n\n    const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.UP);\n    const target = event.target as HTMLElement;\n\n    if (!POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)) {\n      target.releasePointerCapture(adaptedEvent.pointerId);\n    }\n\n    this.markAsOutOfBounds(adaptedEvent.pointerId);\n    this.trackedPointers.delete(adaptedEvent.pointerId);\n\n    if (--this.activePointersCounter > 0) {\n      adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_UP;\n      this.onPointerRemove(adaptedEvent);\n    } else {\n      this.onPointerUp(adaptedEvent);\n    }\n  };\n\n  private pointerMoveCallback = (event: PointerEvent) => {\n    if (event.pointerType === PointerTypes.Touch) {\n      return;\n    }\n\n    // Stylus triggers `pointermove` event when it detects changes in pressure. Since it is very sensitive to those changes,\n    // it constantly sends events, even though there was no change in position. To fix that we check whether\n    // pointer has actually moved and if not, we do not send event.\n    if (\n      event.pointerType === PointerTypes.Stylus &&\n      event.x === this.lastPosition.x &&\n      event.y === this.lastPosition.y\n    ) {\n      return;\n    }\n\n    const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.MOVE);\n    const target = event.target as HTMLElement;\n\n    // You may be wondering why are we setting pointer capture here, when we\n    // already set it in `pointerdown` handler. Well, that's a great question,\n    // for which I don't have an answer. Specification (https://www.w3.org/TR/pointerevents2/#dom-element-setpointercapture)\n    // says that the requirement for `setPointerCapture` to work is that pointer\n    // must be in 'active buttons state`, otherwise it will fail silently, which\n    // is lovely. Obviously, when `pointerdown` is fired, one of the buttons\n    // (when using mouse) is pressed, but that doesn't mean that `setPointerCapture`\n    // will succeed, for some reason. Since it fails silently, we don't actually know\n    // if it worked or not (there's `gotpointercapture` event, but the complexity of\n    // incorporating it here seems stupid), so we just call it again here, every time\n    // pointer moves until it succeeds.\n    // God, I do love web development.\n    if (\n      !target.hasPointerCapture(event.pointerId) &&\n      !POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)\n    ) {\n      target.setPointerCapture(event.pointerId);\n    }\n\n    const inBounds: boolean = isPointerInBounds(this.view, {\n      x: adaptedEvent.x,\n      y: adaptedEvent.y,\n    });\n\n    const pointerIndex: number = this.pointersInBounds.indexOf(\n      adaptedEvent.pointerId\n    );\n\n    if (inBounds) {\n      if (pointerIndex < 0) {\n        adaptedEvent.eventType = EventTypes.ENTER;\n        this.onPointerEnter(adaptedEvent);\n        this.markAsInBounds(adaptedEvent.pointerId);\n      } else {\n        this.onPointerMove(adaptedEvent);\n      }\n    } else {\n      if (pointerIndex >= 0) {\n        adaptedEvent.eventType = EventTypes.LEAVE;\n        this.onPointerLeave(adaptedEvent);\n        this.markAsOutOfBounds(adaptedEvent.pointerId);\n      } else {\n        this.onPointerOutOfBounds(adaptedEvent);\n      }\n    }\n\n    this.lastPosition.x = event.x;\n    this.lastPosition.y = event.y;\n  };\n\n  private pointerCancelCallback = (event: PointerEvent) => {\n    if (event.pointerType === PointerTypes.Touch) {\n      return;\n    }\n\n    const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.CANCEL);\n\n    this.onPointerCancel(adaptedEvent);\n    this.markAsOutOfBounds(adaptedEvent.pointerId);\n    this.activePointersCounter = 0;\n    this.trackedPointers.clear();\n  };\n\n  private pointerEnterCallback = (event: PointerEvent) => {\n    if (event.pointerType === PointerTypes.Touch) {\n      return;\n    }\n\n    const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.ENTER);\n\n    this.onPointerMoveOver(adaptedEvent);\n  };\n\n  private pointerLeaveCallback = (event: PointerEvent) => {\n    if (event.pointerType === PointerTypes.Touch) {\n      return;\n    }\n\n    const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.LEAVE);\n\n    this.onPointerMoveOut(adaptedEvent);\n  };\n\n  private lostPointerCaptureCallback = (event: PointerEvent) => {\n    const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.CANCEL);\n\n    if (this.trackedPointers.has(adaptedEvent.pointerId)) {\n      // in some cases the `pointerup` event is not fired, but `lostpointercapture` is\n      // we simulate the `pointercancel` event here to make sure the gesture handler stops tracking it\n      this.onPointerCancel(adaptedEvent);\n\n      this.activePointersCounter = 0;\n      this.trackedPointers.clear();\n    }\n  };\n\n  public registerListeners(): void {\n    this.view.addEventListener('pointerdown', this.pointerDownCallback);\n    this.view.addEventListener('pointerup', this.pointerUpCallback);\n    this.view.addEventListener('pointermove', this.pointerMoveCallback);\n    this.view.addEventListener('pointercancel', this.pointerCancelCallback);\n\n    // onPointerEnter and onPointerLeave are triggered by a custom logic responsible for\n    // handling shouldCancelWhenOutside flag, and are unreliable unless the pointer is down.\n    // We therefore use pointerenter and pointerleave events to handle the hover gesture,\n    // mapping them to onPointerMoveOver and onPointerMoveOut respectively.\n    this.view.addEventListener('pointerenter', this.pointerEnterCallback);\n    this.view.addEventListener('pointerleave', this.pointerLeaveCallback);\n    this.view.addEventListener(\n      'lostpointercapture',\n      this.lostPointerCaptureCallback\n    );\n  }\n\n  public unregisterListeners(): void {\n    this.view.removeEventListener('pointerdown', this.pointerDownCallback);\n    this.view.removeEventListener('pointerup', this.pointerUpCallback);\n    this.view.removeEventListener('pointermove', this.pointerMoveCallback);\n    this.view.removeEventListener('pointercancel', this.pointerCancelCallback);\n    this.view.removeEventListener('pointerenter', this.pointerEnterCallback);\n    this.view.removeEventListener('pointerleave', this.pointerLeaveCallback);\n    this.view.removeEventListener(\n      'lostpointercapture',\n      this.lostPointerCaptureCallback\n    );\n  }\n\n  protected mapEvent(event: PointerEvent, eventType: EventTypes): AdaptedEvent {\n    return {\n      x: event.clientX,\n      y: event.clientY,\n      offsetX: event.offsetX,\n      offsetY: event.offsetY,\n      pointerId: event.pointerId,\n      eventType: eventType,\n      pointerType:\n        PointerTypeMapping.get(event.pointerType) ?? PointerType.OTHER,\n      button: this.mouseButtonsMapper.get(event.button),\n      time: event.timeStamp,\n    };\n  }\n\n  public resetManager(): void {\n    super.resetManager();\n    this.trackedPointers.clear();\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}