{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport GestureHandler from './GestureHandler';\nimport { TEST_MAX_IF_NOT_NAN } from './utils';\nclass DiscreteGestureHandler extends GestureHandler {\n  get isDiscrete() {\n    return true;\n  }\n  get shouldEnableGestureOnSetup() {\n    return true;\n  }\n  shouldFailUnderCustomCriteria({\n    x,\n    y,\n    deltaX,\n    deltaY\n  }, {\n    maxDeltaX,\n    maxDeltaY,\n    maxDistSq,\n    shouldCancelWhenOutside\n  }) {\n    if (shouldCancelWhenOutside) {\n      if (!this.isPointInView({\n        x,\n        y\n      })) {\n        return true;\n      }\n    }\n    return TEST_MAX_IF_NOT_NAN(Math.abs(deltaX), maxDeltaX) || TEST_MAX_IF_NOT_NAN(Math.abs(deltaY), maxDeltaY) || TEST_MAX_IF_NOT_NAN(Math.abs(deltaY * deltaY + deltaX * deltaX), maxDistSq);\n  }\n  transformNativeEvent({\n    center: {\n      x,\n      y\n    }\n  }) {\n    const rect = this.view.getBoundingClientRect();\n    return {\n      absoluteX: x,\n      absoluteY: y,\n      x: x - rect.left,\n      y: y - rect.top\n    };\n  }\n  isGestureEnabledForEvent({\n    minPointers,\n    maxPointers,\n    maxDeltaX,\n    maxDeltaY,\n    maxDistSq,\n    shouldCancelWhenOutside\n  }, _recognizer, {\n    maxPointers: pointerLength,\n    center,\n    deltaX,\n    deltaY\n  }) {\n    const validPointerCount = pointerLength >= minPointers && pointerLength <= maxPointers;\n    if (this.shouldFailUnderCustomCriteria(_objectSpread(_objectSpread({}, center), {}, {\n      deltaX,\n      deltaY\n    }), {\n      maxDeltaX,\n      maxDeltaY,\n      maxDistSq,\n      shouldCancelWhenOutside\n    }) || !validPointerCount && this.isGestureRunning) {\n      return {\n        failed: true\n      };\n    }\n    return {\n      success: validPointerCount\n    };\n  }\n}\nexport default DiscreteGestureHandler;","map":{"version":3,"names":["GestureHandler","TEST_MAX_IF_NOT_NAN","DiscreteGestureHandler","isDiscrete","shouldEnableGestureOnSetup","shouldFailUnderCustomCriteria","x","y","deltaX","deltaY","maxDeltaX","maxDeltaY","maxDistSq","shouldCancelWhenOutside","isPointInView","Math","abs","transformNativeEvent","center","rect","view","getBoundingClientRect","absoluteX","absoluteY","left","top","isGestureEnabledForEvent","minPointers","maxPointers","_recognizer","pointerLength","validPointerCount","_objectSpread","isGestureRunning","failed","success"],"sources":["C:\\Users\\DinhPhongIUH\\Desktop\\nhap\\Yanuo_mobile_Redux\\node_modules\\react-native-gesture-handler\\lib\\module\\web_hammer\\DiscreteGestureHandler.ts"],"sourcesContent":["/* eslint-disable eslint-comments/no-unlimited-disable */\n/* eslint-disable */\nimport GestureHandler from './GestureHandler';\nimport { TEST_MAX_IF_NOT_NAN } from './utils';\n\nabstract class DiscreteGestureHandler extends GestureHandler {\n  get isDiscrete() {\n    return true;\n  }\n\n  get shouldEnableGestureOnSetup() {\n    return true;\n  }\n\n  shouldFailUnderCustomCriteria(\n    { x, y, deltaX, deltaY }: any,\n    { maxDeltaX, maxDeltaY, maxDistSq, shouldCancelWhenOutside }: any\n  ) {\n    if (shouldCancelWhenOutside) {\n      if (!this.isPointInView({ x, y })) {\n        return true;\n      }\n    }\n    return (\n      TEST_MAX_IF_NOT_NAN(Math.abs(deltaX), maxDeltaX) ||\n      TEST_MAX_IF_NOT_NAN(Math.abs(deltaY), maxDeltaY) ||\n      TEST_MAX_IF_NOT_NAN(\n        Math.abs(deltaY * deltaY + deltaX * deltaX),\n        maxDistSq\n      )\n    );\n  }\n\n  transformNativeEvent({ center: { x, y } }: any) {\n    // @ts-ignore FIXME(TS)\n    const rect = this.view!.getBoundingClientRect();\n\n    return {\n      absoluteX: x,\n      absoluteY: y,\n      x: x - rect.left,\n      y: y - rect.top,\n    };\n  }\n\n  isGestureEnabledForEvent(\n    {\n      minPointers,\n      maxPointers,\n      maxDeltaX,\n      maxDeltaY,\n      maxDistSq,\n      shouldCancelWhenOutside,\n    }: any,\n    _recognizer: any,\n    { maxPointers: pointerLength, center, deltaX, deltaY }: any\n  ) {\n    const validPointerCount =\n      pointerLength >= minPointers && pointerLength <= maxPointers;\n\n    if (\n      this.shouldFailUnderCustomCriteria(\n        { ...center, deltaX, deltaY },\n        {\n          maxDeltaX,\n          maxDeltaY,\n          maxDistSq,\n          shouldCancelWhenOutside,\n        }\n      ) ||\n      // A user probably won't land a multi-pointer tap on the first tick (so we cannot just cancel each time)\n      // but if the gesture is running and the user adds or subtracts another pointer then it should fail.\n      (!validPointerCount && this.isGestureRunning)\n    ) {\n      return { failed: true };\n    }\n\n    return { success: validPointerCount };\n  }\n}\n\nexport default DiscreteGestureHandler;\n"],"mappings":";;;AAEA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,SAASC,mBAAT,QAAoC,SAApC;AAEA,MAAeC,sBAAf,SAA8CF,cAA9C,CAA6D;EAC7C,IAAVG,UAAUA,CAAA,EAAG;IACf,OAAO,IAAP;EACD;EAE6B,IAA1BC,0BAA0BA,CAAA,EAAG;IAC/B,OAAO,IAAP;EACD;EAEDC,6BAA6BA,CAC3B;IAAEC,CAAF;IAAKC,CAAL;IAAQC,MAAR;IAAgBC;EAAhB,CAD2B,EAE3B;IAAEC,SAAF;IAAaC,SAAb;IAAwBC,SAAxB;IAAmCC;EAAnC,CAF2B,EAG3B;IACA,IAAIA,uBAAJ,EAA6B;MAC3B,IAAI,CAAC,KAAKC,aAAL,CAAmB;QAAER,CAAF;QAAKC;MAAL,CAAnB,CAAL,EAAmC;QACjC,OAAO,IAAP;MACD;IACF;IACD,OACEN,mBAAmB,CAACc,IAAI,CAACC,GAAL,CAASR,MAAT,CAAD,EAAmBE,SAAnB,CAAnB,IACAT,mBAAmB,CAACc,IAAI,CAACC,GAAL,CAASP,MAAT,CAAD,EAAmBE,SAAnB,CADnB,IAEAV,mBAAmB,CACjBc,IAAI,CAACC,GAAL,CAASP,MAAM,GAAGA,MAAT,GAAkBD,MAAM,GAAGA,MAApC,CADiB,EAEjBI,SAFiB,CAHrB;EAQD;EAEDK,oBAAoBA,CAAC;IAAEC,MAAM,EAAE;MAAEZ,CAAF;MAAKC;IAAL;EAAV,CAAD,EAA4B;IAE9C,MAAMY,IAAI,GAAG,KAAKC,IAAL,CAAWC,qBAAX,EAAb;IAEA,OAAO;MACLC,SAAS,EAAEhB,CADN;MAELiB,SAAS,EAAEhB,CAFN;MAGLD,CAAC,EAAEA,CAAC,GAAGa,IAAI,CAACK,IAHP;MAILjB,CAAC,EAAEA,CAAC,GAAGY,IAAI,CAACM;IAJP,CAAP;EAMD;EAEDC,wBAAwBA,CACtB;IACEC,WADF;IAEEC,WAFF;IAGElB,SAHF;IAIEC,SAJF;IAKEC,SALF;IAMEC;EANF,CADsB,EAStBgB,WATsB,EAUtB;IAAED,WAAW,EAAEE,aAAf;IAA8BZ,MAA9B;IAAsCV,MAAtC;IAA8CC;EAA9C,CAVsB,EAWtB;IACA,MAAMsB,iBAAiB,GACrBD,aAAa,IAAIH,WAAjB,IAAgCG,aAAa,IAAIF,WADnD;IAGA,IACE,KAAKvB,6BAAL,CAAA2B,aAAA,CAAAA,aAAA,KACOd,MAAL;MAAaV,MAAb;MAAqBC;IAAA,IACrB;MACEC,SADF;MAEEC,SAFF;MAGEC,SAHF;MAIEC;IAJF,CAFF,KAWC,CAACkB,iBAAD,IAAsB,KAAKE,gBAZ9B,EAaE;MACA,OAAO;QAAEC,MAAM,EAAE;MAAV,CAAP;IACD;IAED,OAAO;MAAEC,OAAO,EAAEJ;IAAX,CAAP;EACD;AAzE0D;AA4E7D,eAAe7B,sBAAf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}