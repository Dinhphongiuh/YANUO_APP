{"ast":null,"code":"const digitCharacters = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '#', '$', '%', '*', '+', ',', '-', '.', ':', ';', '=', '?', '@', '[', ']', '^', '_', '{', '|', '}', '~'];\nexport const decode83 = str => {\n  let value = 0;\n  for (let i = 0; i < str.length; i++) {\n    const c = str[i];\n    const digit = digitCharacters.indexOf(c);\n    value = value * 83 + digit;\n  }\n  return value;\n};\nexport const encode83 = (n, length) => {\n  let result = '';\n  for (let i = 1; i <= length; i++) {\n    const digit = Math.floor(n) / Math.pow(83, length - i) % 83;\n    result += digitCharacters[Math.floor(digit)];\n  }\n  return result;\n};","map":{"version":3,"names":["digitCharacters","decode83","str","value","i","length","c","digit","indexOf","encode83","n","result","Math","floor","pow"],"sources":["C:\\Users\\DinhPhongIUH\\Desktop\\nhap\\Yanuo_mobile_Redux\\node_modules\\expo-image\\src\\utils\\blurhash\\base83.ts"],"sourcesContent":["const digitCharacters = [\n  '0',\n  '1',\n  '2',\n  '3',\n  '4',\n  '5',\n  '6',\n  '7',\n  '8',\n  '9',\n  'A',\n  'B',\n  'C',\n  'D',\n  'E',\n  'F',\n  'G',\n  'H',\n  'I',\n  'J',\n  'K',\n  'L',\n  'M',\n  'N',\n  'O',\n  'P',\n  'Q',\n  'R',\n  'S',\n  'T',\n  'U',\n  'V',\n  'W',\n  'X',\n  'Y',\n  'Z',\n  'a',\n  'b',\n  'c',\n  'd',\n  'e',\n  'f',\n  'g',\n  'h',\n  'i',\n  'j',\n  'k',\n  'l',\n  'm',\n  'n',\n  'o',\n  'p',\n  'q',\n  'r',\n  's',\n  't',\n  'u',\n  'v',\n  'w',\n  'x',\n  'y',\n  'z',\n  '#',\n  '$',\n  '%',\n  '*',\n  '+',\n  ',',\n  '-',\n  '.',\n  ':',\n  ';',\n  '=',\n  '?',\n  '@',\n  '[',\n  ']',\n  '^',\n  '_',\n  '{',\n  '|',\n  '}',\n  '~',\n];\n\nexport const decode83 = (str: string) => {\n  let value = 0;\n  for (let i = 0; i < str.length; i++) {\n    const c = str[i];\n    const digit = digitCharacters.indexOf(c);\n    value = value * 83 + digit;\n  }\n  return value;\n};\n\nexport const encode83 = (n: number, length: number): string => {\n  let result = '';\n  for (let i = 1; i <= length; i++) {\n    const digit = (Math.floor(n) / Math.pow(83, length - i)) % 83;\n    result += digitCharacters[Math.floor(digit)];\n  }\n  return result;\n};\n"],"mappings":"AAAA,MAAMA,eAAe,GAAG,CACttC,IAAIC,KAAK,GAAG,CAAC;EACb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,GAAG,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;IACnC,MAAME,CAAC,GAAGJ,GAAG,CAACE,CAAC,CAAC;IAChB,MAAMG,KAAK,GAAGP,eAAe,CAACQ,OAAO,CAACF,CAAC,CAAC;IACxCH,KAAK,GAAGA,KAAK,GAAG,EAAE,GAAGI,KAAK;;EAE5B,OAAOJ,KAAK;AACd,CAAC;AAED,OAAO,MAAMM,QAAQ,GAAGA,CAACC,CAAS,EAAEL,MAAc,KAAY;EAC5D,IAAIM,MAAM,GAAG,EAAE;EACf,KAAK,IAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIC,MAAM,EAAED,CAAC,EAAE,EAAE;IAChC,MAAMG,KAAK,GAAIK,IAAI,CAACC,KAAK,CAACH,CAAC,CAAC,GAAGE,IAAI,CAACE,GAAG,CAAC,EAAE,EAAET,MAAM,GAAGD,CAAC,CAAC,GAAI,EAAE;IAC7DO,MAAM,IAAIX,eAAe,CAACY,IAAI,CAACC,KAAK,CAACN,KAAK,CAAC,CAAC;;EAE9C,OAAOI,MAAM;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}