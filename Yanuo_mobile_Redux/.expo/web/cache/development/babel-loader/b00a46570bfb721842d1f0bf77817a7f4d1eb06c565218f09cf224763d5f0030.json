{"ast":null,"code":"export function rgbaToThumbHash(w, h, rgba) {\n  if (w > 100 || h > 100) throw new Error(`${w}x${h} doesn't fit in 100x100`);\n  const {\n    PI,\n    round,\n    max,\n    cos,\n    abs\n  } = Math;\n  let avg_r = 0,\n    avg_g = 0,\n    avg_b = 0,\n    avg_a = 0;\n  for (let i = 0, j = 0; i < w * h; i++, j += 4) {\n    const alpha = rgba[j + 3] / 255;\n    avg_r += alpha / 255 * rgba[j];\n    avg_g += alpha / 255 * rgba[j + 1];\n    avg_b += alpha / 255 * rgba[j + 2];\n    avg_a += alpha;\n  }\n  if (avg_a) {\n    avg_r /= avg_a;\n    avg_g /= avg_a;\n    avg_b /= avg_a;\n  }\n  const hasAlpha = avg_a < w * h;\n  const l_limit = hasAlpha ? 5 : 7;\n  const lx = max(1, round(l_limit * w / max(w, h)));\n  const ly = max(1, round(l_limit * h / max(w, h)));\n  const l = [];\n  const p = [];\n  const q = [];\n  const a = [];\n  for (let i = 0, j = 0; i < w * h; i++, j += 4) {\n    const alpha = rgba[j + 3] / 255;\n    const r = avg_r * (1 - alpha) + alpha / 255 * rgba[j];\n    const g = avg_g * (1 - alpha) + alpha / 255 * rgba[j + 1];\n    const b = avg_b * (1 - alpha) + alpha / 255 * rgba[j + 2];\n    l[i] = (r + g + b) / 3;\n    p[i] = (r + g) / 2 - b;\n    q[i] = r - g;\n    a[i] = alpha;\n  }\n  const encodeChannel = (channel, nx, ny) => {\n    let dc = 0;\n    const ac = [];\n    let scale = 0;\n    const fx = [];\n    for (let cy = 0; cy < ny; cy++) {\n      for (let cx = 0; cx * ny < nx * (ny - cy); cx++) {\n        let f = 0;\n        for (let x = 0; x < w; x++) fx[x] = cos(PI / w * cx * (x + 0.5));\n        for (let y = 0; y < h; y++) for (let x = 0, fy = cos(PI / h * cy * (y + 0.5)); x < w; x++) f += channel[x + y * w] * fx[x] * fy;\n        f /= w * h;\n        if (cx || cy) {\n          ac.push(f);\n          scale = max(scale, abs(f));\n        } else {\n          dc = f;\n        }\n      }\n    }\n    if (scale) for (let i = 0; i < ac.length; i++) ac[i] = 0.5 + 0.5 / scale * ac[i];\n    return [dc, ac, scale];\n  };\n  const [l_dc, l_ac, l_scale] = encodeChannel(l, max(3, lx), max(3, ly));\n  const [p_dc, p_ac, p_scale] = encodeChannel(p, 3, 3);\n  const [q_dc, q_ac, q_scale] = encodeChannel(q, 3, 3);\n  const [a_dc, a_ac, a_scale] = hasAlpha ? encodeChannel(a, 5, 5) : [];\n  const isLandscape = w > h;\n  const header24 = round(63 * l_dc) | round(31.5 + 31.5 * p_dc) << 6 | round(31.5 + 31.5 * q_dc) << 12 | round(31 * l_scale) << 18 | (hasAlpha ? 1 : 0) << 23;\n  const header16 = (isLandscape ? ly : lx) | round(63 * p_scale) << 3 | round(63 * q_scale) << 9 | (isLandscape ? 1 : 0) << 15;\n  const hash = [header24 & 255, header24 >> 8 & 255, header24 >> 16, header16 & 255, header16 >> 8];\n  const ac_start = hasAlpha ? 6 : 5;\n  let ac_index = 0;\n  if (hasAlpha) hash.push(round(15 * a_dc) | round(15 * a_scale) << 4);\n  for (const ac of hasAlpha ? [l_ac, p_ac, q_ac, a_ac] : [l_ac, p_ac, q_ac]) for (const f of ac) hash[ac_start + (ac_index >> 1)] |= round(15 * f) << ((ac_index++ & 1) << 2);\n  return new Uint8Array(hash);\n}\nexport function thumbHashToRGBA(hash) {\n  const {\n    PI,\n    min,\n    max,\n    cos,\n    round\n  } = Math;\n  const header24 = hash[0] | hash[1] << 8 | hash[2] << 16;\n  const header16 = hash[3] | hash[4] << 8;\n  const l_dc = (header24 & 63) / 63;\n  const p_dc = (header24 >> 6 & 63) / 31.5 - 1;\n  const q_dc = (header24 >> 12 & 63) / 31.5 - 1;\n  const l_scale = (header24 >> 18 & 31) / 31;\n  const hasAlpha = header24 >> 23;\n  const p_scale = (header16 >> 3 & 63) / 63;\n  const q_scale = (header16 >> 9 & 63) / 63;\n  const isLandscape = header16 >> 15;\n  const lx = max(3, isLandscape ? hasAlpha ? 5 : 7 : header16 & 7);\n  const ly = max(3, isLandscape ? header16 & 7 : hasAlpha ? 5 : 7);\n  const a_dc = hasAlpha ? (hash[5] & 15) / 15 : 1;\n  const a_scale = (hash[5] >> 4) / 15;\n  const ac_start = hasAlpha ? 6 : 5;\n  let ac_index = 0;\n  const decodeChannel = (nx, ny, scale) => {\n    const ac = [];\n    for (let cy = 0; cy < ny; cy++) for (let cx = cy ? 0 : 1; cx * ny < nx * (ny - cy); cx++) ac.push(((hash[ac_start + (ac_index >> 1)] >> ((ac_index++ & 1) << 2) & 15) / 7.5 - 1) * scale);\n    return ac;\n  };\n  const l_ac = decodeChannel(lx, ly, l_scale);\n  const p_ac = decodeChannel(3, 3, p_scale * 1.25);\n  const q_ac = decodeChannel(3, 3, q_scale * 1.25);\n  const a_ac = hasAlpha && decodeChannel(5, 5, a_scale);\n  const ratio = thumbHashToApproximateAspectRatio(hash);\n  const w = round(ratio > 1 ? 32 : 32 * ratio);\n  const h = round(ratio > 1 ? 32 / ratio : 32);\n  const rgba = new Uint8Array(w * h * 4),\n    fx = [],\n    fy = [];\n  for (let y = 0, i = 0; y < h; y++) {\n    for (let x = 0; x < w; x++, i += 4) {\n      let l = l_dc,\n        p = p_dc,\n        q = q_dc,\n        a = a_dc;\n      for (let cx = 0, n = max(lx, hasAlpha ? 5 : 3); cx < n; cx++) fx[cx] = cos(PI / w * (x + 0.5) * cx);\n      for (let cy = 0, n = max(ly, hasAlpha ? 5 : 3); cy < n; cy++) fy[cy] = cos(PI / h * (y + 0.5) * cy);\n      for (let cy = 0, j = 0; cy < ly; cy++) for (let cx = cy ? 0 : 1, fy2 = fy[cy] * 2; cx * ly < lx * (ly - cy); cx++, j++) l += l_ac[j] * fx[cx] * fy2;\n      for (let cy = 0, j = 0; cy < 3; cy++) {\n        for (let cx = cy ? 0 : 1, fy2 = fy[cy] * 2; cx < 3 - cy; cx++, j++) {\n          const f = fx[cx] * fy2;\n          p += p_ac[j] * f;\n          q += q_ac[j] * f;\n        }\n      }\n      if (hasAlpha) for (let cy = 0, j = 0; cy < 5; cy++) for (let cx = cy ? 0 : 1, fy2 = fy[cy] * 2; cx < 5 - cy; cx++, j++) a += a_ac[j] * fx[cx] * fy2;\n      const b = l - 2 / 3 * p;\n      const r = (3 * l - b + q) / 2;\n      const g = r - q;\n      rgba[i] = max(0, 255 * min(1, r));\n      rgba[i + 1] = max(0, 255 * min(1, g));\n      rgba[i + 2] = max(0, 255 * min(1, b));\n      rgba[i + 3] = max(0, 255 * min(1, a));\n    }\n  }\n  return {\n    w,\n    h,\n    rgba\n  };\n}\nexport function thumbHashToAverageRGBA(hash) {\n  const {\n    min,\n    max\n  } = Math;\n  const header = hash[0] | hash[1] << 8 | hash[2] << 16;\n  const l = (header & 63) / 63;\n  const p = (header >> 6 & 63) / 31.5 - 1;\n  const q = (header >> 12 & 63) / 31.5 - 1;\n  const hasAlpha = header >> 23;\n  const a = hasAlpha ? (hash[5] & 15) / 15 : 1;\n  const b = l - 2 / 3 * p;\n  const r = (3 * l - b + q) / 2;\n  const g = r - q;\n  return {\n    r: max(0, min(1, r)),\n    g: max(0, min(1, g)),\n    b: max(0, min(1, b)),\n    a\n  };\n}\nexport function thumbHashToApproximateAspectRatio(hash) {\n  const header = hash[3];\n  const hasAlpha = hash[2] & 0x80;\n  const isLandscape = hash[4] & 0x80;\n  const lx = isLandscape ? hasAlpha ? 5 : 7 : header & 7;\n  const ly = isLandscape ? header & 7 : hasAlpha ? 5 : 7;\n  return lx / ly;\n}\nexport function rgbaToDataURL(w, h, rgba) {\n  const row = w * 4 + 1;\n  const idat = 6 + h * (5 + row);\n  const bytes = [137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, w >> 8, w & 255, 0, 0, h >> 8, h & 255, 8, 6, 0, 0, 0, 0, 0, 0, 0, idat >>> 24, idat >> 16 & 255, idat >> 8 & 255, idat & 255, 73, 68, 65, 84, 120, 1];\n  const table = [0, 498536548, 997073096, 651767980, 1994146192, 1802195444, 1303535960, 1342533948, -306674912, -267414716, -690576408, -882789492, -1687895376, -2032938284, -1609899400, -1111625188];\n  let a = 1,\n    b = 0;\n  for (let y = 0, i = 0, end = row - 1; y < h; y++, end += row - 1) {\n    bytes.push(y + 1 < h ? 0 : 1, row & 255, row >> 8, ~row & 255, row >> 8 ^ 255, 0);\n    for (b = (b + a) % 65521; i < end; i++) {\n      const u = rgba[i] & 255;\n      bytes.push(u);\n      a = (a + u) % 65521;\n      b = (b + a) % 65521;\n    }\n  }\n  bytes.push(b >> 8, b & 255, a >> 8, a & 255, 0, 0, 0, 0, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130);\n  for (let [start, end] of [[12, 29], [37, 41 + idat]]) {\n    let c = ~0;\n    for (let i = start; i < end; i++) {\n      c ^= bytes[i];\n      c = c >>> 4 ^ table[c & 15];\n      c = c >>> 4 ^ table[c & 15];\n    }\n    c = ~c;\n    bytes[end++] = c >>> 24;\n    bytes[end++] = c >> 16 & 255;\n    bytes[end++] = c >> 8 & 255;\n    bytes[end++] = c & 255;\n  }\n  return 'data:image/png;base64,' + btoa(String.fromCharCode(...bytes));\n}\nexport function thumbHashToDataURL(hash) {\n  const image = thumbHashToRGBA(hash);\n  return rgbaToDataURL(image.w, image.h, image.rgba);\n}\nexport function thumbHashStringToDataURL(thumbhash) {\n  const hash = Uint8Array.from(atob(thumbhash), c => c.charCodeAt(0));\n  return thumbHashToDataURL(hash);\n}","map":{"version":3,"names":["rgbaToThumbHash","w","h","rgba","Error","PI","round","max","cos","abs","Math","avg_r","avg_g","avg_b","avg_a","i","j","alpha","hasAlpha","l_limit","lx","ly","l","p","q","a","r","g","b","encodeChannel","channel","nx","ny","dc","ac","scale","fx","cy","cx","f","x","y","fy","push","length","l_dc","l_ac","l_scale","p_dc","p_ac","p_scale","q_dc","q_ac","q_scale","a_dc","a_ac","a_scale","isLandscape","header24","header16","hash","ac_start","ac_index","Uint8Array","thumbHashToRGBA","min","decodeChannel","ratio","thumbHashToApproximateAspectRatio","n","fy2","thumbHashToAverageRGBA","header","rgbaToDataURL","row","idat","bytes","table","end","u","start","c","btoa","String","fromCharCode","thumbHashToDataURL","image","thumbHashStringToDataURL","thumbhash","from","atob","charCodeAt"],"sources":["C:\\Users\\DinhPhongIUH\\Desktop\\nhap\\Yanuo_mobile_Redux\\node_modules\\expo-image\\src\\utils\\thumbhash\\thumbhash.ts"],"sourcesContent":["// Code copied and slightly modified from https://github.com/evanw/thumbhash\n\n/**\n * Encodes an RGBA image to a ThumbHash. RGB should not be premultiplied by A.\n *\n * @param w The width of the input image. Must be ≤100px.\n * @param h The height of the input image. Must be ≤100px.\n * @param rgba The pixels in the input image, row-by-row. Must have w*h*4 elements.\n * @returns The ThumbHash as a Uint8Array.\n */\n\nexport function rgbaToThumbHash(w: number, h: number, rgba: Uint8Array) {\n  // Encoding an image larger than 100x100 is slow with no benefit\n  if (w > 100 || h > 100) throw new Error(`${w}x${h} doesn't fit in 100x100`);\n  const { PI, round, max, cos, abs } = Math;\n\n  // Determine the average color\n  let avg_r = 0,\n    avg_g = 0,\n    avg_b = 0,\n    avg_a = 0;\n  for (let i = 0, j = 0; i < w * h; i++, j += 4) {\n    const alpha = rgba[j + 3] / 255;\n    avg_r += (alpha / 255) * rgba[j];\n    avg_g += (alpha / 255) * rgba[j + 1];\n    avg_b += (alpha / 255) * rgba[j + 2];\n    avg_a += alpha;\n  }\n  if (avg_a) {\n    avg_r /= avg_a;\n    avg_g /= avg_a;\n    avg_b /= avg_a;\n  }\n\n  const hasAlpha = avg_a < w * h;\n  const l_limit = hasAlpha ? 5 : 7; // Use fewer luminance bits if there's alpha\n  const lx = max(1, round((l_limit * w) / max(w, h)));\n  const ly = max(1, round((l_limit * h) / max(w, h)));\n  const l: number[] = []; // luminance\n  const p: number[] = []; // yellow - blue\n  const q: number[] = []; // red - green\n  const a: number[] = []; // alpha\n\n  // Convert the image from RGBA to LPQA (composite atop the average color)\n  for (let i = 0, j = 0; i < w * h; i++, j += 4) {\n    const alpha = rgba[j + 3] / 255;\n    const r = avg_r * (1 - alpha) + (alpha / 255) * rgba[j];\n    const g = avg_g * (1 - alpha) + (alpha / 255) * rgba[j + 1];\n    const b = avg_b * (1 - alpha) + (alpha / 255) * rgba[j + 2];\n    l[i] = (r + g + b) / 3;\n    p[i] = (r + g) / 2 - b;\n    q[i] = r - g;\n    a[i] = alpha;\n  }\n\n  // Encode using the DCT into DC (constant) and normalized AC (varying) terms\n  const encodeChannel = (channel, nx, ny) => {\n    let dc = 0;\n    const ac: number[] = [];\n    let scale = 0;\n    const fx: number[] = [];\n    for (let cy = 0; cy < ny; cy++) {\n      for (let cx = 0; cx * ny < nx * (ny - cy); cx++) {\n        let f = 0;\n        for (let x = 0; x < w; x++) fx[x] = cos((PI / w) * cx * (x + 0.5));\n        for (let y = 0; y < h; y++)\n          for (let x = 0, fy = cos((PI / h) * cy * (y + 0.5)); x < w; x++)\n            f += channel[x + y * w] * fx[x] * fy;\n        f /= w * h;\n        if (cx || cy) {\n          ac.push(f);\n          scale = max(scale, abs(f));\n        } else {\n          dc = f;\n        }\n      }\n    }\n    if (scale) for (let i = 0; i < ac.length; i++) ac[i] = 0.5 + (0.5 / scale) * ac[i];\n    return [dc, ac, scale];\n  };\n  const [l_dc, l_ac, l_scale] = encodeChannel(l, max(3, lx), max(3, ly));\n  const [p_dc, p_ac, p_scale] = encodeChannel(p, 3, 3);\n  const [q_dc, q_ac, q_scale] = encodeChannel(q, 3, 3);\n  const [a_dc, a_ac, a_scale] = hasAlpha ? encodeChannel(a, 5, 5) : [];\n\n  // Write the constants\n  const isLandscape = w > h;\n  const header24 =\n    round(63 * (l_dc as number)) |\n    (round(31.5 + 31.5 * (p_dc as number)) << 6) |\n    (round(31.5 + 31.5 * (q_dc as number)) << 12) |\n    (round(31 * (l_scale as number)) << 18) |\n    ((hasAlpha ? 1 : 0) << 23);\n  const header16 =\n    (isLandscape ? ly : lx) |\n    (round(63 * (p_scale as number)) << 3) |\n    (round(63 * (q_scale as number)) << 9) |\n    ((isLandscape ? 1 : 0) << 15);\n  const hash = [\n    header24 & 255,\n    (header24 >> 8) & 255,\n    header24 >> 16,\n    header16 & 255,\n    header16 >> 8,\n  ];\n  const ac_start = hasAlpha ? 6 : 5;\n  let ac_index = 0;\n  if (hasAlpha) hash.push(round(15 * (a_dc as number)) | (round(15 * (a_scale as number)) << 4));\n\n  // Write the varying factors\n  for (const ac of hasAlpha ? [l_ac, p_ac, q_ac, a_ac] : [l_ac, p_ac, q_ac])\n    for (const f of ac as number[])\n      hash[ac_start + (ac_index >> 1)] |= round(15 * f) << ((ac_index++ & 1) << 2);\n  return new Uint8Array(hash);\n}\n\n/**\n * Decodes a ThumbHash to an RGBA image. RGB is not be premultiplied by A.\n *\n * @param hash The bytes of the ThumbHash.\n * @returns The width, height, and pixels of the rendered placeholder image.\n */\nexport function thumbHashToRGBA(hash: Uint8Array) {\n  const { PI, min, max, cos, round } = Math;\n\n  // Read the constants\n  const header24 = hash[0] | (hash[1] << 8) | (hash[2] << 16);\n  const header16 = hash[3] | (hash[4] << 8);\n  const l_dc = (header24 & 63) / 63;\n  const p_dc = ((header24 >> 6) & 63) / 31.5 - 1;\n  const q_dc = ((header24 >> 12) & 63) / 31.5 - 1;\n  const l_scale = ((header24 >> 18) & 31) / 31;\n  const hasAlpha = header24 >> 23;\n  const p_scale = ((header16 >> 3) & 63) / 63;\n  const q_scale = ((header16 >> 9) & 63) / 63;\n  const isLandscape = header16 >> 15;\n  const lx = max(3, isLandscape ? (hasAlpha ? 5 : 7) : header16 & 7);\n  const ly = max(3, isLandscape ? header16 & 7 : hasAlpha ? 5 : 7);\n  const a_dc = hasAlpha ? (hash[5] & 15) / 15 : 1;\n  const a_scale = (hash[5] >> 4) / 15;\n\n  // Read the varying factors (boost saturation by 1.25x to compensate for quantization)\n  const ac_start = hasAlpha ? 6 : 5;\n  let ac_index = 0;\n  const decodeChannel = (nx, ny, scale) => {\n    const ac: number[] = [];\n    for (let cy = 0; cy < ny; cy++)\n      for (let cx = cy ? 0 : 1; cx * ny < nx * (ny - cy); cx++)\n        ac.push(\n          (((hash[ac_start + (ac_index >> 1)] >> ((ac_index++ & 1) << 2)) & 15) / 7.5 - 1) * scale\n        );\n    return ac;\n  };\n  const l_ac = decodeChannel(lx, ly, l_scale);\n  const p_ac = decodeChannel(3, 3, p_scale * 1.25);\n  const q_ac = decodeChannel(3, 3, q_scale * 1.25);\n  const a_ac = hasAlpha && decodeChannel(5, 5, a_scale);\n\n  // Decode using the DCT into RGB\n  const ratio = thumbHashToApproximateAspectRatio(hash);\n  const w = round(ratio > 1 ? 32 : 32 * ratio);\n  const h = round(ratio > 1 ? 32 / ratio : 32);\n  const rgba = new Uint8Array(w * h * 4),\n    fx: number[] = [],\n    fy: number[] = [];\n  for (let y = 0, i = 0; y < h; y++) {\n    for (let x = 0; x < w; x++, i += 4) {\n      let l = l_dc,\n        p = p_dc,\n        q = q_dc,\n        a = a_dc;\n\n      // Precompute the coefficients\n      for (let cx = 0, n = max(lx, hasAlpha ? 5 : 3); cx < n; cx++)\n        fx[cx] = cos((PI / w) * (x + 0.5) * cx);\n      for (let cy = 0, n = max(ly, hasAlpha ? 5 : 3); cy < n; cy++)\n        fy[cy] = cos((PI / h) * (y + 0.5) * cy);\n\n      // Decode L\n      for (let cy = 0, j = 0; cy < ly; cy++)\n        for (let cx = cy ? 0 : 1, fy2 = fy[cy] * 2; cx * ly < lx * (ly - cy); cx++, j++)\n          l += l_ac[j] * fx[cx] * fy2;\n\n      // Decode P and Q\n      for (let cy = 0, j = 0; cy < 3; cy++) {\n        for (let cx = cy ? 0 : 1, fy2 = fy[cy] * 2; cx < 3 - cy; cx++, j++) {\n          const f = fx[cx] * fy2;\n          p += p_ac[j] * f;\n          q += q_ac[j] * f;\n        }\n      }\n\n      // Decode A\n      if (hasAlpha)\n        for (let cy = 0, j = 0; cy < 5; cy++)\n          for (let cx = cy ? 0 : 1, fy2 = fy[cy] * 2; cx < 5 - cy; cx++, j++)\n            a += a_ac[j] * fx[cx] * fy2;\n\n      // Convert to RGB\n      const b = l - (2 / 3) * p;\n      const r = (3 * l - b + q) / 2;\n      const g = r - q;\n      rgba[i] = max(0, 255 * min(1, r));\n      rgba[i + 1] = max(0, 255 * min(1, g));\n      rgba[i + 2] = max(0, 255 * min(1, b));\n      rgba[i + 3] = max(0, 255 * min(1, a));\n    }\n  }\n  return { w, h, rgba };\n}\n\n/**\n * Extracts the average color from a ThumbHash. RGB is not be premultiplied by A.\n *\n * @param hash The bytes of the ThumbHash.\n * @returns The RGBA values for the average color. Each value ranges from 0 to 1.\n */\nexport function thumbHashToAverageRGBA(hash: Uint8Array) {\n  const { min, max } = Math;\n  const header = hash[0] | (hash[1] << 8) | (hash[2] << 16);\n  const l = (header & 63) / 63;\n  const p = ((header >> 6) & 63) / 31.5 - 1;\n  const q = ((header >> 12) & 63) / 31.5 - 1;\n  const hasAlpha = header >> 23;\n  const a = hasAlpha ? (hash[5] & 15) / 15 : 1;\n  const b = l - (2 / 3) * p;\n  const r = (3 * l - b + q) / 2;\n  const g = r - q;\n  return {\n    r: max(0, min(1, r)),\n    g: max(0, min(1, g)),\n    b: max(0, min(1, b)),\n    a,\n  };\n}\n\n/**\n * Extracts the approximate aspect ratio of the original image.\n *\n * @param hash The bytes of the ThumbHash.\n * @returns The approximate aspect ratio (i.e. width / height).\n */\nexport function thumbHashToApproximateAspectRatio(hash: Uint8Array) {\n  const header = hash[3];\n  const hasAlpha = hash[2] & 0x80;\n  const isLandscape = hash[4] & 0x80;\n  const lx = isLandscape ? (hasAlpha ? 5 : 7) : header & 7;\n  const ly = isLandscape ? header & 7 : hasAlpha ? 5 : 7;\n  return lx / ly;\n}\n\n/**\n * Encodes an RGBA image to a PNG data URL. RGB should not be premultiplied by\n * A. This is optimized for speed and simplicity and does not optimize for size\n * at all. This doesn't do any compression (all values are stored uncompressed).\n *\n * @param w The width of the input image. Must be ≤100px.\n * @param h The height of the input image. Must be ≤100px.\n * @param rgba The pixels in the input image, row-by-row. Must have w*h*4 elements.\n * @returns A data URL containing a PNG for the input image.\n */\nexport function rgbaToDataURL(w: number, h: number, rgba: Uint8Array) {\n  const row = w * 4 + 1;\n  const idat = 6 + h * (5 + row);\n  const bytes = [\n    137,\n    80,\n    78,\n    71,\n    13,\n    10,\n    26,\n    10,\n    0,\n    0,\n    0,\n    13,\n    73,\n    72,\n    68,\n    82,\n    0,\n    0,\n    w >> 8,\n    w & 255,\n    0,\n    0,\n    h >> 8,\n    h & 255,\n    8,\n    6,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    idat >>> 24,\n    (idat >> 16) & 255,\n    (idat >> 8) & 255,\n    idat & 255,\n    73,\n    68,\n    65,\n    84,\n    120,\n    1,\n  ];\n  const table = [\n    0, 498536548, 997073096, 651767980, 1994146192, 1802195444, 1303535960, 1342533948, -306674912,\n    -267414716, -690576408, -882789492, -1687895376, -2032938284, -1609899400, -1111625188,\n  ];\n  let a = 1,\n    b = 0;\n  for (let y = 0, i = 0, end = row - 1; y < h; y++, end += row - 1) {\n    bytes.push(y + 1 < h ? 0 : 1, row & 255, row >> 8, ~row & 255, (row >> 8) ^ 255, 0);\n    for (b = (b + a) % 65521; i < end; i++) {\n      const u = rgba[i] & 255;\n      bytes.push(u);\n      a = (a + u) % 65521;\n      b = (b + a) % 65521;\n    }\n  }\n  bytes.push(\n    b >> 8,\n    b & 255,\n    a >> 8,\n    a & 255,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    73,\n    69,\n    78,\n    68,\n    174,\n    66,\n    96,\n    130\n  );\n  for (let [start, end] of [\n    [12, 29],\n    [37, 41 + idat],\n  ]) {\n    let c = ~0;\n    for (let i = start; i < end; i++) {\n      c ^= bytes[i];\n      c = (c >>> 4) ^ table[c & 15];\n      c = (c >>> 4) ^ table[c & 15];\n    }\n    c = ~c;\n    bytes[end++] = c >>> 24;\n    bytes[end++] = (c >> 16) & 255;\n    bytes[end++] = (c >> 8) & 255;\n    bytes[end++] = c & 255;\n  }\n  return 'data:image/png;base64,' + btoa(String.fromCharCode(...bytes));\n}\n\n/**\n * Decodes a ThumbHash to a PNG data URL. This is a convenience function that\n * just calls \"thumbHashToRGBA\" followed by \"rgbaToDataURL\".\n *\n * @param hash The bytes of the ThumbHash.\n * @returns A data URL containing a PNG for the rendered ThumbHash.\n */\nexport function thumbHashToDataURL(hash: Uint8Array): string {\n  const image = thumbHashToRGBA(hash);\n  return rgbaToDataURL(image.w, image.h, image.rgba);\n}\n\n/**\n * Convenience function added to the original thumbhash code, allows generating a thumbhash image directly from\n * thumbhash string.\n * @param thumbhash string from which thumbhashDataURL should be generated\n * @returns A data URL containing a PNG for the rendered ThumbHash\n */\nexport function thumbHashStringToDataURL(thumbhash: string): string {\n  const hash = Uint8Array.from(atob(thumbhash), (c) => c.charCodeAt(0));\n  return thumbHashToDataURL(hash);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}