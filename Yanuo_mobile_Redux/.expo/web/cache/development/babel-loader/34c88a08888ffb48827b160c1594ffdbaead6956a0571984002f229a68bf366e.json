{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nconst _excluded = [\"active\", \"activityState\", \"style\", \"enabled\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nexport * from './types';\nexport { default as useTransitionProgress } from './useTransitionProgress';\nexport { isSearchBarAvailableForCurrentPlatform, isNewBackTitleImplementation, executeNativeBackPress } from './utils';\nlet ENABLE_SCREENS = true;\nexport function enableScreens() {\n  let shouldEnableScreens = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  ENABLE_SCREENS = shouldEnableScreens;\n}\nexport function screensEnabled() {\n  return ENABLE_SCREENS;\n}\nexport function enableFreeze() {\n  let shouldEnableReactFreeze = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n}\nexport class NativeScreen extends React.Component {\n  render() {\n    let _this$props = this.props,\n      {\n        active,\n        activityState,\n        style,\n        enabled = ENABLE_SCREENS\n      } = _this$props,\n      rest = _objectWithoutProperties(_this$props, _excluded);\n    if (enabled) {\n      if (active !== undefined && activityState === undefined) {\n        activityState = active !== 0 ? 2 : 0;\n      }\n      return React.createElement(View, _extends({\n        hidden: activityState === 0,\n        style: [style, {\n          display: activityState !== 0 ? 'flex' : 'none'\n        }]\n      }, rest));\n    }\n    return React.createElement(View, rest);\n  }\n}\nexport const Screen = Animated.createAnimatedComponent(NativeScreen);\nexport const InnerScreen = View;\nexport const ScreenContext = React.createContext(Screen);\nexport const ScreenContainer = View;\nexport const NativeScreenContainer = View;\nexport const NativeScreenNavigationContainer = View;\nexport const ScreenStack = View;\nexport const FullWindowOverlay = View;\nexport const ScreenStackHeaderBackButtonImage = props => React.createElement(View, null, React.createElement(Image, _extends({\n  resizeMode: \"center\",\n  fadeDuration: 0\n}, props)));\nexport const ScreenStackHeaderRightView = props => React.createElement(View, props);\nexport const ScreenStackHeaderLeftView = props => React.createElement(View, props);\nexport const ScreenStackHeaderCenterView = props => React.createElement(View, props);\nexport const ScreenStackHeaderSearchBarView = props => React.createElement(View, props);\nexport const ScreenStackHeaderConfig = props => React.createElement(View, props);\nexport const SearchBar = View;\nexport const ScreenStackHeaderSubview = View;\nexport const shouldUseActivityState = true;","map":{"version":3,"names":["React","Animated","View","Image","default","useTransitionProgress","isSearchBarAvailableForCurrentPlatform","isNewBackTitleImplementation","executeNativeBackPress","ENABLE_SCREENS","enableScreens","shouldEnableScreens","arguments","length","undefined","screensEnabled","enableFreeze","shouldEnableReactFreeze","NativeScreen","Component","render","_this$props","props","active","activityState","style","enabled","rest","_objectWithoutProperties","_excluded","createElement","_extends","hidden","display","Screen","createAnimatedComponent","InnerScreen","ScreenContext","createContext","ScreenContainer","NativeScreenContainer","NativeScreenNavigationContainer","ScreenStack","FullWindowOverlay","ScreenStackHeaderBackButtonImage","resizeMode","fadeDuration","ScreenStackHeaderRightView","ScreenStackHeaderLeftView","ScreenStackHeaderCenterView","ScreenStackHeaderSearchBarView","ScreenStackHeaderConfig","SearchBar","ScreenStackHeaderSubview","shouldUseActivityState"],"sources":["C:\\Users\\DinhPhongIUH\\Desktop\\nhap\\Yanuo_mobile_Redux\\node_modules\\react-native-screens\\lib\\module\\index.tsx"],"sourcesContent":["import React, { ReactNode } from 'react';\nimport { Animated, View, ViewProps, ImageProps, Image } from 'react-native';\nimport {\n  ScreenProps,\n  ScreenContainerProps,\n  ScreenStackProps,\n  ScreenStackHeaderConfigProps,\n  HeaderSubviewTypes,\n  SearchBarProps,\n} from './types';\n\nexport * from './types';\nexport { default as useTransitionProgress } from './useTransitionProgress';\nexport {\n  isSearchBarAvailableForCurrentPlatform,\n  isNewBackTitleImplementation,\n  executeNativeBackPress,\n} from './utils';\n\nlet ENABLE_SCREENS = true;\n\nexport function enableScreens(shouldEnableScreens = true): void {\n  ENABLE_SCREENS = shouldEnableScreens;\n}\n\nexport function screensEnabled(): boolean {\n  return ENABLE_SCREENS;\n}\n\n// @ts-ignore function stub, freezing logic is located in index.native.tsx\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function enableFreeze(shouldEnableReactFreeze = true): void {\n  // noop\n}\n\nexport class NativeScreen extends React.Component<ScreenProps> {\n  render(): JSX.Element {\n    let {\n      active,\n      activityState,\n      style,\n      enabled = ENABLE_SCREENS,\n      ...rest\n    } = this.props;\n\n    if (enabled) {\n      if (active !== undefined && activityState === undefined) {\n        activityState = active !== 0 ? 2 : 0; // change taken from index.native.tsx\n      }\n      return (\n        <View\n          // @ts-expect-error: hidden exists on web, but not in React Native\n          hidden={activityState === 0}\n          style={[style, { display: activityState !== 0 ? 'flex' : 'none' }]}\n          {...rest}\n        />\n      );\n    }\n\n    return <View {...rest} />;\n  }\n}\n\nexport const Screen = Animated.createAnimatedComponent(NativeScreen);\n\nexport const InnerScreen = View;\n\nexport const ScreenContext = React.createContext(Screen);\n\nexport const ScreenContainer: React.ComponentType<ScreenContainerProps> = View;\n\nexport const NativeScreenContainer: React.ComponentType<ScreenContainerProps> =\n  View;\n\nexport const NativeScreenNavigationContainer: React.ComponentType<ScreenContainerProps> =\n  View;\n\nexport const ScreenStack: React.ComponentType<ScreenStackProps> = View;\n\nexport const FullWindowOverlay = View as React.ComponentType<{\n  children: ReactNode;\n}>;\n\nexport const ScreenStackHeaderBackButtonImage = (\n  props: ImageProps\n): JSX.Element => (\n  <View>\n    <Image resizeMode=\"center\" fadeDuration={0} {...props} />\n  </View>\n);\n\nexport const ScreenStackHeaderRightView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderLeftView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderCenterView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderSearchBarView = (\n  props: React.PropsWithChildren<Omit<SearchBarProps, 'ref'>>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderConfig = (\n  props: React.PropsWithChildren<ScreenStackHeaderConfigProps>\n): JSX.Element => <View {...props} />;\n\n// @ts-expect-error: search bar props have no common props with View\nexport const SearchBar: React.ComponentType<SearchBarProps> = View;\n\nexport const ScreenStackHeaderSubview: React.ComponentType<\n  React.PropsWithChildren<ViewProps & { type?: HeaderSubviewTypes }>\n> = View;\n\nexport const shouldUseActivityState = true;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}