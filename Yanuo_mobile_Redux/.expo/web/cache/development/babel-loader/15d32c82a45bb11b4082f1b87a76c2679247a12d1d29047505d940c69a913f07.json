{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { useEffect, useMemo, useState } from 'react';\nimport { useBlurhash } from '../utils/blurhash/useBlurhash';\nimport { isThumbhashString } from '../utils/resolveSources';\nimport { thumbHashStringToDataURL } from '../utils/thumbhash/thumbhash';\nexport function useThumbhash(source) {\n  const isThumbhash = isThumbhashString(source?.uri || '');\n  const strippedThumbhashString = source?.uri?.replace(/thumbhash:\\//, '') ?? '';\n  const thumbhashSource = useMemo(() => isThumbhash ? {\n    uri: thumbHashStringToDataURL(strippedThumbhashString)\n  } : null, [strippedThumbhashString, isThumbhash]);\n  return thumbhashSource;\n}\nexport function useImageHashes(source) {\n  const thumbhash = useThumbhash(source);\n  const blurhash = useBlurhash(source);\n  return useMemo(() => ({\n    resolvedSource: blurhash ?? thumbhash ?? source,\n    isImageHash: !!blurhash || !!thumbhash\n  }), [blurhash, thumbhash]);\n}\nexport function useHeaders(source, cachePolicy, onError) {\n  const [objectURL, setObjectURL] = useState(null);\n  useEffect(() => {\n    (async () => {\n      if (!source?.headers || !source.uri) {\n        return;\n      }\n      try {\n        const result = await fetch(source.uri, {\n          headers: source.headers,\n          cache: cachePolicy === 'none' ? 'no-cache' : 'default',\n          redirect: 'follow'\n        });\n        if (!result.ok) {\n          throw new Error(`Failed to fetch image: ${result.status} ${result.statusText}`);\n        }\n        const blob = await result.blob();\n        setObjectURL(prevObjURL => {\n          if (prevObjURL) {\n            URL.revokeObjectURL(prevObjURL);\n          }\n          return URL.createObjectURL(blob);\n        });\n      } catch (error) {\n        onError?.forEach(e => e?.({\n          source\n        }));\n      }\n    })();\n  }, [source]);\n  if (!source?.headers) {\n    return source;\n  }\n  if (!objectURL) {\n    return null;\n  }\n  return _objectSpread(_objectSpread({}, source), {}, {\n    uri: objectURL\n  });\n}","map":{"version":3,"names":["useEffect","useMemo","useState","useBlurhash","isThumbhashString","thumbHashStringToDataURL","useThumbhash","source","isThumbhash","uri","strippedThumbhashString","replace","thumbhashSource","useImageHashes","thumbhash","blurhash","resolvedSource","isImageHash","useHeaders","cachePolicy","onError","objectURL","setObjectURL","headers","result","fetch","cache","redirect","ok","Error","status","statusText","blob","prevObjURL","URL","revokeObjectURL","createObjectURL","error","forEach","e","_objectSpread"],"sources":["C:\\Users\\DinhPhongIUH\\Desktop\\nhap\\Yanuo_mobile_Redux\\node_modules\\expo-image\\src\\web\\hooks.ts"],"sourcesContent":["import { useEffect, useMemo, useState } from 'react';\n\nimport { OnErrorEvent } from './ImageWrapper.types';\nimport { ImageNativeProps, ImageSource } from '../Image.types';\nimport { useBlurhash } from '../utils/blurhash/useBlurhash';\nimport { isThumbhashString } from '../utils/resolveSources';\nimport { thumbHashStringToDataURL } from '../utils/thumbhash/thumbhash';\n\nexport function useThumbhash(source: ImageSource | null | undefined) {\n  const isThumbhash = isThumbhashString(source?.uri || '');\n  const strippedThumbhashString = source?.uri?.replace(/thumbhash:\\//, '') ?? '';\n  const thumbhashSource = useMemo(\n    () => (isThumbhash ? { uri: thumbHashStringToDataURL(strippedThumbhashString) } : null),\n    [strippedThumbhashString, isThumbhash]\n  );\n  return thumbhashSource;\n}\n\nexport function useImageHashes(source: ImageSource | null | undefined) {\n  const thumbhash = useThumbhash(source);\n  const blurhash = useBlurhash(source);\n  return useMemo(\n    () => ({\n      resolvedSource: blurhash ?? thumbhash ?? source,\n      isImageHash: !!blurhash || !!thumbhash,\n    }),\n    [blurhash, thumbhash]\n  );\n}\n\nexport function useHeaders(\n  source: ImageSource | null | undefined,\n  cachePolicy: ImageNativeProps['cachePolicy'],\n  onError?: OnErrorEvent[]\n): ImageSource | null | undefined {\n  const [objectURL, setObjectURL] = useState<string | null>(null);\n  useEffect(() => {\n    (async () => {\n      if (!source?.headers || !source.uri) {\n        return;\n      }\n      try {\n        const result = await fetch(source.uri, {\n          headers: source.headers,\n          cache: cachePolicy === 'none' ? 'no-cache' : 'default',\n          redirect: 'follow',\n        });\n        if (!result.ok) {\n          throw new Error(`Failed to fetch image: ${result.status} ${result.statusText}`);\n        }\n        const blob = await result.blob();\n        setObjectURL((prevObjURL) => {\n          if (prevObjURL) {\n            URL.revokeObjectURL(prevObjURL);\n          }\n          return URL.createObjectURL(blob);\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      } catch (error) {\n        onError?.forEach((e) => e?.({ source }));\n      }\n    })();\n  }, [source]);\n  if (!source?.headers) {\n    return source;\n  }\n  if (!objectURL) {\n    // Avoid fetching a URL without headers if we have headers\n    return null;\n  }\n  return { ...source, uri: objectURL };\n}\n"],"mappings":";;;AAAA,SAASA,SAAS,EAAEC,OAAO,EAAEC,QAAQ,QAAQ,OAAO;AAIpD,SAASC,WAAW,QAAQ,+BAA+B;AAC3D,SAASC,iBAAiB,QAAQ,yBAAyB;AAC3D,SAASC,wBAAwB,QAAQ,8BAA8B;AAEvE,OAAM,SAAUC,YAAYA,CAACC,MAAsC;EACjE,MAAMC,WAAW,GAAGJ,iBAAiB,CAACG,MAAM,EAAEE,GAAG,IAAI,EAAE,CAAC;EACxD,MAAMC,uBAAuB,GAAGH,MAAM,EAAEE,GAAG,EAAEE,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,IAAI,EAAE;EAC9E,MAAMC,eAAe,GAAGX,OAAO,CAC7B,MAAOO,WAAW,GAAG;IAAEC,GAAG,EAAEJ,wBAAwB,CAACK,uBAAuB;EAAC,CAAE,GAAG,IAAK,EACvF,CAACA,uBAAuB,EAAEF,WAAW,CAAC,CACvC;EACD,OAAOI,eAAe;AACxB;AAEA,OAAM,SAAUC,cAAcA,CAACN,MAAsC;EACnE,MAAMO,SAAS,GAAGR,YAAY,CAACC,MAAM,CAAC;EACtC,MAAMQ,QAAQ,GAAGZ,WAAW,CAACI,MAAM,CAAC;EACpC,OAAON,OAAO,CACZ,OAAO;IACLe,cAAc,EAAED,QAAQ,IAAID,SAAS,IAAIP,MAAM;IAC/CU,WAAW,EAAE,CAAC,CAACF,QAAQ,IAAI,CAAC,CAACD;GAC9B,CAAC,EACF,CAACC,QAAQ,EAAED,SAAS,CAAC,CACtB;AACH;AAEA,OAAM,SAAUI,UAAUA,CACxBX,MAAsC,EACtCY,WAA4C,EAC5CC,OAAwB;EAExB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGpB,QAAQ,CAAgB,IAAI,CAAC;EAC/DF,SAAS,CAAC,MAAK;IACb,CAAC,YAAW;MACV,IAAI,CAACO,MAAM,EAAEgB,OAAO,IAAI,CAAChB,MAAM,CAACE,GAAG,EAAE;QACnC;;MAEF,IAAI;QACF,MAAMe,MAAM,GAAG,MAAMC,KAAK,CAAClB,MAAM,CAACE,GAAG,EAAE;UACrCc,OAAO,EAAEhB,MAAM,CAACgB,OAAO;UACvBG,KAAK,EAAEP,WAAW,KAAK,MAAM,GAAG,UAAU,GAAG,SAAS;UACtDQ,QAAQ,EAAE;SACX,CAAC;QACF,IAAI,CAACH,MAAM,CAACI,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAAC,0BAA0BL,MAAM,CAACM,MAAM,IAAIN,MAAM,CAACO,UAAU,EAAE,CAAC;;QAEjF,MAAMC,IAAI,GAAG,MAAMR,MAAM,CAACQ,IAAI,EAAE;QAChCV,YAAY,CAAEW,UAAU,IAAI;UAC1B,IAAIA,UAAU,EAAE;YACdC,GAAG,CAACC,eAAe,CAACF,UAAU,CAAC;;UAEjC,OAAOC,GAAG,CAACE,eAAe,CAACJ,IAAI,CAAC;QAClC,CAAC,CAAC;OAEH,CAAC,OAAOK,KAAK,EAAE;QACdjB,OAAO,EAAEkB,OAAO,CAAEC,CAAC,IAAKA,CAAC,GAAG;UAAEhC;QAAM,CAAE,CAAC,CAAC;;IAE5C,CAAC,EAAC,CAAE;EACN,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC;EACZ,IAAI,CAACA,MAAM,EAAEgB,OAAO,EAAE;IACpB,OAAOhB,MAAM;;EAEf,IAAI,CAACc,SAAS,EAAE;IAEd,OAAO,IAAI;;EAEb,OAAAmB,aAAA,CAAAA,aAAA,KAAYjC,MAAM;IAAEE,GAAG,EAAEY;EAAS;AACpC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}