{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { ContinousBaseGesture } from './gesture';\nconst _worklet_1266182141109_init_data = {\n  code: \"function changeEventCalculator(current,previous){let changePayload;if(previous===undefined){changePayload={rotationChange:current.rotation};}else{changePayload={rotationChange:current.rotation-previous.rotation};}return{...current,...changePayload};}\",\n  location: \"C:\\\\Users\\\\DinhPhongIUH\\\\Desktop\\\\nhap\\\\Yanuo_mobile_Redux\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\rotationGesture.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"changeEventCalculator\\\",\\\"current\\\",\\\"previous\\\",\\\"changePayload\\\",\\\"undefined\\\",\\\"rotationChange\\\",\\\"rotation\\\"],\\\"sources\\\":[\\\"C:/Users/DinhPhongIUH/Desktop/nhap/Yanuo_mobile_Redux/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/rotationGesture.js\\\"],\\\"mappings\\\":\\\"AAEA,SAAAA,qBAASA,CAAsBC,OAAA,CAAOC,QAAE,CAAQ,CAG9C,GAAI,CAAAC,aAAa,CAEjB,GAAID,QAAQ,GAAKE,SAAS,CAAE,CAC1BD,aAAa,CAAG,CACdE,cAAc,CAAEJ,OAAO,CAACK,QAC1B,CAAC,CACH,CAAC,IAAM,CACLH,aAAa,CAAG,CACdE,cAAc,CAAEJ,OAAO,CAACK,QAAQ,CAAGJ,QAAQ,CAACI,QAC9C,CAAC,CACH,CAEA,MAAO,CAAE,GAAGL,OAAO,CACjB,GAAGE,aACL,CAAC,CACH\\\",\\\"ignoreList\\\":[]}\",\n  version: \"3.10.1\"\n};\nconst changeEventCalculator = function () {\n  const _e = [new global.Error(), 1, -27];\n  const changeEventCalculator = function (current, previous) {\n    let changePayload;\n    if (previous === undefined) {\n      changePayload = {\n        rotationChange: current.rotation\n      };\n    } else {\n      changePayload = {\n        rotationChange: current.rotation - previous.rotation\n      };\n    }\n    return _objectSpread(_objectSpread({}, current), changePayload);\n  };\n  changeEventCalculator.__closure = {};\n  changeEventCalculator.__workletHash = 1266182141109;\n  changeEventCalculator.__initData = _worklet_1266182141109_init_data;\n  changeEventCalculator.__stackDetails = _e;\n  return changeEventCalculator;\n}();\nexport class RotationGesture extends ContinousBaseGesture {\n  constructor() {\n    super();\n    this.handlerName = 'RotationGestureHandler';\n  }\n  onChange(callback) {\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}","map":{"version":3,"names":["ContinousBaseGesture","_worklet_1266182141109_init_data","code","location","sourceMap","version","changeEventCalculator","_e","global","Error","current","previous","changePayload","undefined","rotationChange","rotation","_objectSpread","__closure","__workletHash","__initData","__stackDetails","RotationGesture","constructor","handlerName","onChange","callback","handlers"],"sources":["C:\\Users\\DinhPhongIUH\\Desktop\\nhap\\Yanuo_mobile_Redux\\node_modules\\react-native-gesture-handler\\lib\\module\\handlers\\gestures\\rotationGesture.ts"],"sourcesContent":["import { ContinousBaseGesture } from './gesture';\nimport { RotationGestureHandlerEventPayload } from '../RotationGestureHandler';\nimport { GestureUpdateEvent } from '../gestureHandlerCommon';\n\ntype RotationGestureChangeEventPayload = {\n  rotationChange: number;\n};\n\nfunction changeEventCalculator(\n  current: GestureUpdateEvent<RotationGestureHandlerEventPayload>,\n  previous?: GestureUpdateEvent<RotationGestureHandlerEventPayload>\n) {\n  'worklet';\n  let changePayload: RotationGestureChangeEventPayload;\n  if (previous === undefined) {\n    changePayload = {\n      rotationChange: current.rotation,\n    };\n  } else {\n    changePayload = {\n      rotationChange: current.rotation - previous.rotation,\n    };\n  }\n\n  return { ...current, ...changePayload };\n}\n\nexport class RotationGesture extends ContinousBaseGesture<\n  RotationGestureHandlerEventPayload,\n  RotationGestureChangeEventPayload\n> {\n  constructor() {\n    super();\n\n    this.handlerName = 'RotationGestureHandler';\n  }\n\n  onChange(\n    callback: (\n      event: GestureUpdateEvent<\n        RotationGestureHandlerEventPayload & RotationGestureChangeEventPayload\n      >\n    ) => void\n  ) {\n    // @ts-ignore TS being overprotective, RotationGestureHandlerEventPayload is Record\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}\n\nexport type RotationGestureType = InstanceType<typeof RotationGesture>;\n"],"mappings":";;;AAAA,SAASA,oBAAT,QAAqC,WAArC;AAAA,MAAAC,gCAAA;EAAAC,IAAA;EAAAC,QAAA;EAAAC,SAAA;EAAAC,OAAA;AAAA;AAAA,MAQSC,qBAAT;EAAA,MAAAC,EAAA,QAAAC,MAAA,CAAAC,KAAA;EAAA,MAAAH,qBAAA,YAAAA,CACEI,OADF,EAEEC,QAFF,EAGE;IAEA,IAAIC,aAAJ;IACA,IAAID,QAAQ,KAAKE,SAAjB,EAA4B;MAC1BD,aAAa,GAAG;QACdE,cAAc,EAAEJ,OAAO,CAACK;MADV,CAAhB;IAGD,CAJD,MAIO;MACLH,aAAa,GAAG;QACdE,cAAc,EAAEJ,OAAO,CAACK,QAAR,GAAmBJ,QAAQ,CAACI;MAD9B,CAAhB;IAGD;IAED,OAAAC,aAAA,CAAAA,aAAA,KAAYN,OAAL,GAAiBE,aAAA;EACzB;EAAAN,qBAAA,CAAAW,SAAA;EAAAX,qBAAA,CAAAY,aAAA;EAAAZ,qBAAA,CAAAa,UAAA,GAAAlB,gCAAA;EAAAK,qBAAA,CAAAc,cAAA,GAAAb,EAAA;EAAA,OAAAD,qBAAA;AAAA,CAjBD;AAmBA,OAAO,MAAMe,eAAN,SAA8BrB,oBAA9B,CAGL;EACAsB,WAAWA,CAAA,EAAG;IACZ;IAEA,KAAKC,WAAL,GAAmB,wBAAnB;EACD;EAEDC,QAAQA,CACNC,QADM,EAMN;IAEA,KAAKC,QAAL,CAAcpB,qBAAd,GAAsCA,qBAAtC;IACA,OAAO,MAAMkB,QAAN,CAAeC,QAAf,CAAP;EACD;AAjBD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}