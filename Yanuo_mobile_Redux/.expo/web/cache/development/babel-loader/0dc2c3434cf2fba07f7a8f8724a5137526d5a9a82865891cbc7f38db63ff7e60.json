{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nconst _excluded = [\"shouldCancelWhenOutside\", \"maxDeltaX\", \"maxDeltaY\", \"numberOfTaps\", \"minDurationMs\", \"maxDelayMs\", \"maxDurationMs\", \"maxDist\", \"minPointers\", \"maxPointers\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport Hammer from '@egjs/hammerjs';\nimport DiscreteGestureHandler from './DiscreteGestureHandler';\nimport { isnan } from './utils';\nclass TapGestureHandler extends DiscreteGestureHandler {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"_shouldFireEndEvent\", null);\n    _defineProperty(this, \"_timer\", void 0);\n    _defineProperty(this, \"_multiTapTimer\", void 0);\n    _defineProperty(this, \"onSuccessfulTap\", ev => {\n      if (this._getPendingGestures().length) {\n        this._shouldFireEndEvent = ev;\n        return;\n      }\n      if (ev.eventType === Hammer.INPUT_END) {\n        this.sendEvent(_objectSpread(_objectSpread({}, ev), {}, {\n          eventType: Hammer.INPUT_MOVE\n        }));\n      }\n      this.sendEvent(_objectSpread(_objectSpread({}, ev), {}, {\n        isFinal: true\n      }));\n      this.onGestureEnded(ev);\n    });\n  }\n  get name() {\n    return 'tap';\n  }\n  get NativeGestureClass() {\n    return Hammer.Tap;\n  }\n  get maxDelayMs() {\n    return isnan(this.config.maxDelayMs) ? 300 : this.config.maxDelayMs;\n  }\n  simulateCancelEvent(inputData) {\n    if (this.isGestureRunning) {\n      this.cancelEvent(inputData);\n    }\n  }\n  onGestureActivated(ev) {\n    if (this.isGestureRunning) {\n      this.onSuccessfulTap(ev);\n    }\n  }\n  onRawEvent(ev) {\n    super.onRawEvent(ev);\n    if (!this.hasGestureFailed && !this.isGestureRunning && !ev.isFinal) {\n      const gesture = this.hammer.get(this.name);\n      if (gesture.options.enable(gesture, ev)) {\n        clearTimeout(this._multiTapTimer);\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n    if (ev.isFinal && ev.maxPointers > 1) {\n      setTimeout(() => {\n        if (this.isGestureRunning) {\n          this.cancelEvent(ev);\n        }\n      });\n    }\n    if (this.hasGestureFailed) {\n      return;\n    }\n    if (ev.isFinal) {\n      if (ev.maxPointers > 1) {\n        setTimeout(() => {\n          if (this.isGestureRunning) {\n            this.cancelEvent(ev);\n          }\n        });\n      }\n      clearTimeout(this._timer);\n      this._timer = setTimeout(() => {\n        this.hasGestureFailed = true;\n        this.cancelEvent(ev);\n      }, this.maxDelayMs);\n    } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n      const gesture = this.hammer.get(this.name);\n      if (gesture.options.enable(gesture, ev)) {\n        clearTimeout(this._multiTapTimer);\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n  }\n  getHammerConfig() {\n    return _objectSpread(_objectSpread({}, super.getHammerConfig()), {}, {\n      event: this.name,\n      taps: isnan(this.config.numberOfTaps) ? 1 : this.config.numberOfTaps,\n      interval: this.maxDelayMs,\n      time: isnan(this.config.maxDurationMs) || this.config.maxDurationMs == null ? 250 : this.config.maxDurationMs\n    });\n  }\n  updateGestureConfig(_ref) {\n    let {\n        shouldCancelWhenOutside = true,\n        maxDeltaX = Number.NaN,\n        maxDeltaY = Number.NaN,\n        numberOfTaps = 1,\n        minDurationMs = 525,\n        maxDelayMs = Number.NaN,\n        maxDurationMs = Number.NaN,\n        maxDist = 2,\n        minPointers = 1,\n        maxPointers = 1\n      } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n    return super.updateGestureConfig(_objectSpread({\n      shouldCancelWhenOutside,\n      numberOfTaps,\n      maxDeltaX,\n      maxDeltaY,\n      minDurationMs,\n      maxDelayMs,\n      maxDist,\n      minPointers,\n      maxPointers\n    }, props));\n  }\n  onGestureEnded(...props) {\n    clearTimeout(this._timer);\n    super.onGestureEnded(...props);\n  }\n  onWaitingEnded(_gesture) {\n    if (this._shouldFireEndEvent) {\n      this.onSuccessfulTap(this._shouldFireEndEvent);\n      this._shouldFireEndEvent = null;\n    }\n  }\n}\nexport default TapGestureHandler;","map":{"version":3,"names":["Hammer","DiscreteGestureHandler","isnan","TapGestureHandler","constructor","args","_defineProperty","ev","_getPendingGestures","length","_shouldFireEndEvent","eventType","INPUT_END","sendEvent","_objectSpread","INPUT_MOVE","isFinal","onGestureEnded","name","NativeGestureClass","Tap","maxDelayMs","config","simulateCancelEvent","inputData","isGestureRunning","cancelEvent","onGestureActivated","onSuccessfulTap","onRawEvent","hasGestureFailed","gesture","hammer","get","options","enable","clearTimeout","_multiTapTimer","onStart","maxPointers","setTimeout","_timer","getHammerConfig","event","taps","numberOfTaps","interval","time","maxDurationMs","updateGestureConfig","_ref","shouldCancelWhenOutside","maxDeltaX","Number","NaN","maxDeltaY","minDurationMs","maxDist","minPointers","props","_objectWithoutProperties","_excluded","onWaitingEnded","_gesture"],"sources":["C:\\Users\\DinhPhongIUH\\Desktop\\nhap\\Yanuo_mobile_Redux\\node_modules\\react-native-gesture-handler\\lib\\module\\web_hammer\\TapGestureHandler.ts"],"sourcesContent":["import Hammer from '@egjs/hammerjs';\n\nimport DiscreteGestureHandler from './DiscreteGestureHandler';\nimport { HammerInputExt } from './GestureHandler';\nimport { isnan } from './utils';\n\nclass TapGestureHandler extends DiscreteGestureHandler {\n  private _shouldFireEndEvent: HammerInputExt | null = null;\n  private _timer: any;\n  private _multiTapTimer: any; // TODO unused?\n  get name() {\n    return 'tap';\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Tap;\n  }\n\n  get maxDelayMs() {\n    // @ts-ignore TODO(TS) trace down config\n    return isnan(this.config.maxDelayMs) ? 300 : this.config.maxDelayMs;\n  }\n\n  simulateCancelEvent(inputData: HammerInputExt) {\n    if (this.isGestureRunning) {\n      this.cancelEvent(inputData);\n    }\n  }\n\n  onGestureActivated(ev: HammerInputExt) {\n    if (this.isGestureRunning) {\n      this.onSuccessfulTap(ev);\n    }\n  }\n\n  onSuccessfulTap = (ev: HammerInputExt) => {\n    if (this._getPendingGestures().length) {\n      this._shouldFireEndEvent = ev;\n      return;\n    }\n    if (ev.eventType === Hammer.INPUT_END) {\n      this.sendEvent({ ...ev, eventType: Hammer.INPUT_MOVE });\n    }\n    // When handler gets activated it will turn into State.END immediately.\n    this.sendEvent({ ...ev, isFinal: true });\n    this.onGestureEnded(ev);\n  };\n\n  onRawEvent(ev: HammerInput) {\n    super.onRawEvent(ev);\n\n    // Attempt to create a touch-down event by checking if a valid tap hasn't started yet, then validating the input.\n    if (\n      !this.hasGestureFailed &&\n      !this.isGestureRunning &&\n      // Prevent multi-pointer events from misfiring.\n      !ev.isFinal\n    ) {\n      // Tap Gesture start event\n      const gesture = this.hammer!.get(this.name);\n      // @ts-ignore TODO(TS) trace down config\n      if (gesture.options.enable(gesture, ev)) {\n        clearTimeout(this._multiTapTimer);\n\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n    if (ev.isFinal && ev.maxPointers > 1) {\n      setTimeout(() => {\n        // Handle case where one finger presses slightly\n        // after the first finger on a multi-tap event\n        if (this.isGestureRunning) {\n          this.cancelEvent(ev);\n        }\n      });\n    }\n\n    if (this.hasGestureFailed) {\n      return;\n    }\n    // Hammer doesn't send a `cancel` event for taps.\n    // Manually fail the event.\n    if (ev.isFinal) {\n      // Handle case where one finger presses slightly\n      // after the first finger on a multi-tap event\n      if (ev.maxPointers > 1) {\n        setTimeout(() => {\n          if (this.isGestureRunning) {\n            this.cancelEvent(ev);\n          }\n        });\n      }\n\n      // Clear last timer\n      clearTimeout(this._timer);\n      // Create time out for multi-taps.\n      this._timer = setTimeout(() => {\n        this.hasGestureFailed = true;\n        this.cancelEvent(ev);\n      }, this.maxDelayMs);\n    } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n      // Tap Gesture start event\n      const gesture = this.hammer!.get(this.name);\n      // @ts-ignore TODO(TS) trace down config\n      if (gesture.options.enable(gesture, ev)) {\n        clearTimeout(this._multiTapTimer);\n\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n  }\n\n  getHammerConfig() {\n    return {\n      ...super.getHammerConfig(),\n      event: this.name,\n      // @ts-ignore TODO(TS) trace down config\n      taps: isnan(this.config.numberOfTaps) ? 1 : this.config.numberOfTaps,\n      interval: this.maxDelayMs,\n      time:\n        // @ts-ignore TODO(TS) trace down config\n        isnan(this.config.maxDurationMs) || this.config.maxDurationMs == null\n          ? 250\n          : // @ts-ignore TODO(TS) trace down config\n            this.config.maxDurationMs,\n    };\n  }\n\n  updateGestureConfig({\n    shouldCancelWhenOutside = true,\n    maxDeltaX = Number.NaN,\n    maxDeltaY = Number.NaN,\n    numberOfTaps = 1,\n    minDurationMs = 525,\n    maxDelayMs = Number.NaN,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars -- TODO possibly forgotten to use in updateGestureConfig?\n    maxDurationMs = Number.NaN,\n    maxDist = 2,\n    minPointers = 1,\n    maxPointers = 1,\n    ...props\n  }) {\n    return super.updateGestureConfig({\n      shouldCancelWhenOutside,\n      numberOfTaps,\n      maxDeltaX,\n      maxDeltaY,\n      minDurationMs,\n      maxDelayMs,\n      maxDist,\n      minPointers,\n      maxPointers,\n      ...props,\n    });\n  }\n\n  onGestureEnded(...props: any) {\n    clearTimeout(this._timer);\n    // @ts-ignore TODO(TS) check how onGestureEnded works\n    super.onGestureEnded(...props);\n  }\n\n  onWaitingEnded(_gesture: any) {\n    if (this._shouldFireEndEvent) {\n      this.onSuccessfulTap(this._shouldFireEndEvent);\n      this._shouldFireEndEvent = null;\n    }\n  }\n}\nexport default TapGestureHandler;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}