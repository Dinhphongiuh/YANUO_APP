{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nclass Vector {\n  constructor(length) {\n    _defineProperty(this, \"offset\", void 0);\n    _defineProperty(this, \"length\", void 0);\n    _defineProperty(this, \"elements\", void 0);\n    this.offset = 0;\n    this.length = length;\n    this.elements = new Array(length);\n  }\n  static fromVOL(values, offset, length) {\n    const result = new Vector(0);\n    result.offset = offset;\n    result.length = length;\n    result.elements = values;\n    return result;\n  }\n  get(index) {\n    return this.elements[this.offset + index];\n  }\n  set(index, value) {\n    this.elements[this.offset + index] = value;\n  }\n  dot(other) {\n    let result = 0;\n    for (let i = 0; i < this.length; i++) {\n      result += this.get(i) * other.get(i);\n    }\n    return result;\n  }\n  norm() {\n    return Math.sqrt(this.dot(this));\n  }\n}\nclass Matrix {\n  constructor(rows, columns) {\n    _defineProperty(this, \"columns\", void 0);\n    _defineProperty(this, \"elements\", void 0);\n    this.columns = columns;\n    this.elements = new Array(rows * columns);\n  }\n  get(row, column) {\n    return this.elements[row * this.columns + column];\n  }\n  set(row, column, value) {\n    this.elements[row * this.columns + column] = value;\n  }\n  getRow(row) {\n    return Vector.fromVOL(this.elements, row * this.columns, this.columns);\n  }\n}\nclass PolynomialFit {\n  constructor(degree) {\n    _defineProperty(this, \"coefficients\", void 0);\n    this.coefficients = new Array(degree + 1);\n  }\n}\nconst precisionErrorTolerance = 1e-10;\nexport default class LeastSquareSolver {\n  constructor(x, y, w) {\n    _defineProperty(this, \"x\", void 0);\n    _defineProperty(this, \"y\", void 0);\n    _defineProperty(this, \"w\", void 0);\n    this.x = x;\n    this.y = y;\n    this.w = w;\n  }\n  solve(degree) {\n    if (degree > this.x.length) {\n      return null;\n    }\n    const result = new PolynomialFit(degree);\n    const m = this.x.length;\n    const n = degree + 1;\n    const a = new Matrix(n, m);\n    for (let h = 0; h < m; h++) {\n      a.set(0, h, this.w[h]);\n      for (let i = 1; i < n; i++) {\n        a.set(i, h, a.get(i - 1, h) * this.x[h]);\n      }\n    }\n    const q = new Matrix(n, m);\n    const r = new Matrix(n, m);\n    for (let j = 0; j < n; j += 1) {\n      for (let h = 0; h < m; h += 1) {\n        q.set(j, h, a.get(j, h));\n      }\n      for (let i = 0; i < j; i += 1) {\n        const dot = q.getRow(j).dot(q.getRow(i));\n        for (let h = 0; h < m; h += 1) {\n          q.set(j, h, q.get(j, h) - dot * q.get(i, h));\n        }\n      }\n      const norm = q.getRow(j).norm();\n      if (norm < precisionErrorTolerance) {\n        return null;\n      }\n      const inverseNorm = 1.0 / norm;\n      for (let h = 0; h < m; h += 1) {\n        q.set(j, h, q.get(j, h) * inverseNorm);\n      }\n      for (let i = 0; i < n; i += 1) {\n        r.set(j, i, i < j ? 0.0 : q.getRow(j).dot(a.getRow(i)));\n      }\n    }\n    const wy = new Vector(m);\n    for (let h = 0; h < m; h += 1) {\n      wy.set(h, this.y[h] * this.w[h]);\n    }\n    for (let i = n - 1; i >= 0; i -= 1) {\n      result.coefficients[i] = q.getRow(i).dot(wy);\n      for (let j = n - 1; j > i; j -= 1) {\n        result.coefficients[i] -= r.get(i, j) * result.coefficients[j];\n      }\n      result.coefficients[i] /= r.get(i, i);\n    }\n    return result;\n  }\n}","map":{"version":3,"names":["Vector","constructor","length","_defineProperty","offset","elements","Array","fromVOL","values","result","get","index","set","value","dot","other","i","norm","Math","sqrt","Matrix","rows","columns","row","column","getRow","PolynomialFit","degree","coefficients","precisionErrorTolerance","LeastSquareSolver","x","y","w","solve","m","n","a","h","q","r","j","inverseNorm","wy"],"sources":["C:\\Users\\DinhPhongIUH\\Desktop\\nhap\\Yanuo_mobile_Redux\\node_modules\\react-native-gesture-handler\\lib\\module\\web\\tools\\LeastSquareSolver.ts"],"sourcesContent":["// Implementation taken from Flutter's LeastSquareSolver\n// https://github.com/flutter/flutter/blob/master/packages/flutter/lib/src/gestures/lsq_solver.dart\n\nclass Vector {\n  private offset: number;\n  private length: number;\n  private elements: number[];\n\n  constructor(length: number) {\n    this.offset = 0;\n    this.length = length;\n    this.elements = new Array<number>(length);\n  }\n\n  public static fromVOL(\n    values: number[],\n    offset: number,\n    length: number\n  ): Vector {\n    const result = new Vector(0);\n\n    result.offset = offset;\n    result.length = length;\n    result.elements = values;\n\n    return result;\n  }\n\n  public get(index: number): number {\n    return this.elements[this.offset + index];\n  }\n\n  public set(index: number, value: number): void {\n    this.elements[this.offset + index] = value;\n  }\n\n  public dot(other: Vector): number {\n    let result = 0;\n    for (let i = 0; i < this.length; i++) {\n      result += this.get(i) * other.get(i);\n    }\n    return result;\n  }\n\n  public norm() {\n    return Math.sqrt(this.dot(this));\n  }\n}\n\nclass Matrix {\n  private columns: number;\n  private elements: number[];\n\n  constructor(rows: number, columns: number) {\n    this.columns = columns;\n    this.elements = new Array<number>(rows * columns);\n  }\n\n  public get(row: number, column: number): number {\n    return this.elements[row * this.columns + column];\n  }\n\n  public set(row: number, column: number, value: number): void {\n    this.elements[row * this.columns + column] = value;\n  }\n\n  public getRow(row: number): Vector {\n    return Vector.fromVOL(this.elements, row * this.columns, this.columns);\n  }\n}\n\n/// An nth degree polynomial fit to a dataset.\nclass PolynomialFit {\n  /// The polynomial coefficients of the fit.\n  ///\n  /// For each `i`, the element `coefficients[i]` is the coefficient of\n  /// the `i`-th power of the variable.\n  public coefficients: number[];\n\n  /// Creates a polynomial fit of the given degree.\n  ///\n  /// There are n + 1 coefficients in a fit of degree n.\n  constructor(degree: number) {\n    this.coefficients = new Array<number>(degree + 1);\n  }\n}\n\nconst precisionErrorTolerance = 1e-10;\n\n/// Uses the least-squares algorithm to fit a polynomial to a set of data.\nexport default class LeastSquareSolver {\n  /// The x-coordinates of each data point.\n  private x: number[];\n  /// The y-coordinates of each data point.\n  private y: number[];\n  /// The weight to use for each data point.\n  private w: number[];\n\n  /// Creates a least-squares solver.\n  ///\n  /// The [x], [y], and [w] arguments must not be null.\n  constructor(x: number[], y: number[], w: number[]) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n  }\n\n  /// Fits a polynomial of the given degree to the data points.\n  ///\n  /// When there is not enough data to fit a curve null is returned.\n  public solve(degree: number): PolynomialFit | null {\n    if (degree > this.x.length) {\n      // Not enough data to fit a curve.\n      return null;\n    }\n\n    const result = new PolynomialFit(degree);\n\n    // Shorthands for the purpose of notation equivalence to original C++ code.\n    const m = this.x.length;\n    const n = degree + 1;\n\n    // Expand the X vector to a matrix A, pre-multiplied by the weights.\n    const a = new Matrix(n, m);\n    for (let h = 0; h < m; h++) {\n      a.set(0, h, this.w[h]);\n\n      for (let i = 1; i < n; i++) {\n        a.set(i, h, a.get(i - 1, h) * this.x[h]);\n      }\n    }\n\n    // Apply the Gram-Schmidt process to A to obtain its QR decomposition.\n\n    // Orthonormal basis, column-major ordVectorer.\n    const q = new Matrix(n, m);\n    // Upper triangular matrix, row-major order.\n    const r = new Matrix(n, m);\n\n    for (let j = 0; j < n; j += 1) {\n      for (let h = 0; h < m; h += 1) {\n        q.set(j, h, a.get(j, h));\n      }\n      for (let i = 0; i < j; i += 1) {\n        const dot = q.getRow(j).dot(q.getRow(i));\n        for (let h = 0; h < m; h += 1) {\n          q.set(j, h, q.get(j, h) - dot * q.get(i, h));\n        }\n      }\n\n      const norm = q.getRow(j).norm();\n      if (norm < precisionErrorTolerance) {\n        // Vectors are linearly dependent or zero so no solution.\n        return null;\n      }\n\n      const inverseNorm = 1.0 / norm;\n      for (let h = 0; h < m; h += 1) {\n        q.set(j, h, q.get(j, h) * inverseNorm);\n      }\n      for (let i = 0; i < n; i += 1) {\n        r.set(j, i, i < j ? 0.0 : q.getRow(j).dot(a.getRow(i)));\n      }\n    }\n\n    // Solve R B = Qt W Y to find B. This is easy because R is upper triangular.\n    // We just work from bottom-right to top-left calculating B's coefficients.\n    const wy = new Vector(m);\n    for (let h = 0; h < m; h += 1) {\n      wy.set(h, this.y[h] * this.w[h]);\n    }\n    for (let i = n - 1; i >= 0; i -= 1) {\n      result.coefficients[i] = q.getRow(i).dot(wy);\n      for (let j = n - 1; j > i; j -= 1) {\n        result.coefficients[i] -= r.get(i, j) * result.coefficients[j];\n      }\n      result.coefficients[i] /= r.get(i, i);\n    }\n\n    return result;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}