{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nconst _excluded = [\"style\", \"source\", \"placeholder\", \"contentFit\", \"contentPosition\", \"transition\", \"fadeDuration\", \"resizeMode\", \"defaultSource\", \"loadingIndicatorSource\"],\n  _excluded2 = [\"resizeMode\"];\nvar _jsxFileName = \"C:\\\\Users\\\\DinhPhongIUH\\\\Desktop\\\\nhap\\\\Yanuo_mobile_Redux\\\\node_modules\\\\expo-image\\\\build\\\\Image.js\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { createSnapshotFriendlyRef } from 'expo-modules-core';\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ExpoImage, { ExpoImageModule } from './ExpoImage';\nimport { resolveContentFit, resolveContentPosition, resolveTransition } from './utils';\nimport { resolveSources } from './utils/resolveSources';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet loggedDefaultSourceDeprecationWarning = false;\nexport class Image extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.nativeViewRef = createSnapshotFriendlyRef();\n  }\n  static async prefetch(urls, options) {\n    let cachePolicy = 'memory-disk';\n    let headers;\n    switch (typeof options) {\n      case 'string':\n        cachePolicy = options;\n        break;\n      case 'object':\n        cachePolicy = options.cachePolicy ?? cachePolicy;\n        headers = options.headers;\n        break;\n    }\n    return ExpoImageModule.prefetch(Array.isArray(urls) ? urls : [urls], cachePolicy, headers);\n  }\n  static async clearMemoryCache() {\n    return await ExpoImageModule.clearMemoryCache();\n  }\n  static async clearDiskCache() {\n    return await ExpoImageModule.clearDiskCache();\n  }\n  static async getCachePathAsync(cacheKey) {\n    return await ExpoImageModule.getCachePathAsync(cacheKey);\n  }\n  static async generateBlurhashAsync(url, numberOfComponents) {\n    return await ExpoImageModule.generateBlurhashAsync(url, numberOfComponents);\n  }\n  async startAnimating() {\n    await this.nativeViewRef.current.startAnimating();\n  }\n  async stopAnimating() {\n    await this.nativeViewRef.current.stopAnimating();\n  }\n  render() {\n    const _this$props = this.props,\n      {\n        style,\n        source,\n        placeholder,\n        contentFit,\n        contentPosition,\n        transition,\n        fadeDuration,\n        resizeMode: resizeModeProp,\n        defaultSource,\n        loadingIndicatorSource\n      } = _this$props,\n      restProps = _objectWithoutProperties(_this$props, _excluded);\n    const _ref = StyleSheet.flatten(style) || {},\n      {\n        resizeMode: resizeModeStyle\n      } = _ref,\n      restStyle = _objectWithoutProperties(_ref, _excluded2);\n    const resizeMode = resizeModeProp ?? resizeModeStyle;\n    if ((defaultSource || loadingIndicatorSource) && !loggedDefaultSourceDeprecationWarning) {\n      console.warn('[expo-image]: `defaultSource` and `loadingIndicatorSource` props are deprecated, use `placeholder` instead');\n      loggedDefaultSourceDeprecationWarning = true;\n    }\n    return _jsxDEV(ExpoImage, _objectSpread(_objectSpread({}, restProps), {}, {\n      style: restStyle,\n      source: resolveSources(source),\n      placeholder: resolveSources(placeholder ?? defaultSource ?? loadingIndicatorSource),\n      contentFit: resolveContentFit(contentFit, resizeMode),\n      contentPosition: resolveContentPosition(contentPosition),\n      transition: resolveTransition(transition, fadeDuration),\n      nativeViewRef: this.nativeViewRef\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }, this);\n  }\n}","map":{"version":3,"names":["createSnapshotFriendlyRef","React","StyleSheet","ExpoImage","ExpoImageModule","resolveContentFit","resolveContentPosition","resolveTransition","resolveSources","jsxDEV","_jsxDEV","loggedDefaultSourceDeprecationWarning","Image","PureComponent","constructor","props","nativeViewRef","prefetch","urls","options","cachePolicy","headers","Array","isArray","clearMemoryCache","clearDiskCache","getCachePathAsync","cacheKey","generateBlurhashAsync","url","numberOfComponents","startAnimating","current","stopAnimating","render","_this$props","style","source","placeholder","contentFit","contentPosition","transition","fadeDuration","resizeMode","resizeModeProp","defaultSource","loadingIndicatorSource","restProps","_objectWithoutProperties","_excluded","_ref","flatten","resizeModeStyle","restStyle","_excluded2","console","warn","_objectSpread","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:\\Users\\DinhPhongIUH\\Desktop\\nhap\\Yanuo_mobile_Redux\\node_modules\\expo-image\\src\\Image.tsx"],"sourcesContent":["import { createSnapshotFriendlyRef } from 'expo-modules-core';\nimport React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport ExpoImage, { ExpoImageModule } from './ExpoImage';\nimport { ImagePrefetchOptions, ImageProps } from './Image.types';\nimport { resolveContentFit, resolveContentPosition, resolveTransition } from './utils';\nimport { resolveSources } from './utils/resolveSources';\n\nlet loggedDefaultSourceDeprecationWarning = false;\n\nexport class Image extends React.PureComponent<ImageProps> {\n  nativeViewRef;\n\n  constructor(props) {\n    super(props);\n    this.nativeViewRef = createSnapshotFriendlyRef();\n  }\n\n  /**\n   * Preloads images at the given URLs that can be later used in the image view.\n   * Preloaded images are cached to the memory and disk by default, so make sure\n   * to use `disk` (default) or `memory-disk` [cache policy](#cachepolicy).\n   * @param urls - A URL string or an array of URLs of images to prefetch.\n   * @param {ImagePrefetchOptions['cachePolicy']} cachePolicy - The cache policy for prefetched images.\n   * @return A promise resolving to `true` as soon as all images have been\n   * successfully prefetched. If an image fails to be prefetched, the promise\n   * will immediately resolve to `false` regardless of whether other images have\n   * finished prefetching.\n   */\n  static async prefetch(\n    urls: string | string[],\n    cachePolicy?: ImagePrefetchOptions['cachePolicy']\n  ): Promise<boolean>;\n  /**\n   * Preloads images at the given URLs that can be later used in the image view.\n   * Preloaded images are cached to the memory and disk by default, so make sure\n   * to use `disk` (default) or `memory-disk` [cache policy](#cachepolicy).\n   * @param urls - A URL string or an array of URLs of images to prefetch.\n   * @param options - Options for prefetching images.\n   * @return A promise resolving to `true` as soon as all images have been\n   * successfully prefetched. If an image fails to be prefetched, the promise\n   * will immediately resolve to `false` regardless of whether other images have\n   * finished prefetching.\n   */\n  static async prefetch(urls: string | string[], options?: ImagePrefetchOptions): Promise<boolean>;\n  static async prefetch(\n    urls: string | string[],\n    options?: ImagePrefetchOptions['cachePolicy'] | ImagePrefetchOptions\n  ): Promise<boolean> {\n    let cachePolicy: ImagePrefetchOptions['cachePolicy'] = 'memory-disk';\n    let headers: ImagePrefetchOptions['headers'];\n    switch (typeof options) {\n      case 'string':\n        cachePolicy = options;\n        break;\n      case 'object':\n        cachePolicy = options.cachePolicy ?? cachePolicy;\n        headers = options.headers;\n        break;\n    }\n\n    return ExpoImageModule.prefetch(Array.isArray(urls) ? urls : [urls], cachePolicy, headers);\n  }\n\n  /**\n   * Asynchronously clears all images stored in memory.\n   * @platform android\n   * @platform ios\n   * @return A promise resolving to `true` when the operation succeeds.\n   * It may resolve to `false` on Android when the activity is no longer available.\n   * Resolves to `false` on Web.\n   */\n  static async clearMemoryCache(): Promise<boolean> {\n    return await ExpoImageModule.clearMemoryCache();\n  }\n\n  /**\n   * Asynchronously clears all images from the disk cache.\n   * @platform android\n   * @platform ios\n   * @return A promise resolving to `true` when the operation succeeds.\n   * It may resolve to `false` on Android when the activity is no longer available.\n   * Resolves to `false` on Web.\n   */\n  static async clearDiskCache(): Promise<boolean> {\n    return await ExpoImageModule.clearDiskCache();\n  }\n\n  /**\n   * Asynchronously checks if an image exists in the disk cache and resolves to\n   * the path of the cached image if it does.\n   * @param cacheKey - The cache key for the requested image. Unless you have set\n   * a custom cache key, this will be the source URL of the image.\n   * @platform android\n   * @platform ios\n   * @return A promise resolving to the path of the cached image. It will resolve\n   * to `null` if the image does not exist in the cache.\n   */\n  static async getCachePathAsync(cacheKey: string): Promise<string | null> {\n    return await ExpoImageModule.getCachePathAsync(cacheKey);\n  }\n\n  /**\n   * Asynchronously generates a [Blurhash](https://blurha.sh) from an image.\n   * @param url - The URL of the image to generate a blurhash from.\n   * @param numberOfComponents - The number of components to encode the blurhash with.\n   * Must be between 1 and 9. Defaults to `[4, 3]`.\n   * @platform ios\n   * @return A promise resolving to the blurhash string.\n   */\n  static async generateBlurhashAsync(\n    url: string,\n    numberOfComponents: [number, number] | { width: number; height: number }\n  ): Promise<string | null> {\n    return await ExpoImageModule.generateBlurhashAsync(url, numberOfComponents);\n  }\n\n  /**\n   * Asynchronously starts playback of the view's image if it is animated.\n   * @platform android\n   * @platform ios\n   */\n  async startAnimating(): Promise<void> {\n    await this.nativeViewRef.current.startAnimating();\n  }\n\n  /**\n   * Asynchronously stops the playback of the view's image if it is animated.\n   * @platform android\n   * @platform ios\n   */\n  async stopAnimating(): Promise<void> {\n    await this.nativeViewRef.current.stopAnimating();\n  }\n\n  render() {\n    const {\n      style,\n      source,\n      placeholder,\n      contentFit,\n      contentPosition,\n      transition,\n      fadeDuration,\n      resizeMode: resizeModeProp,\n      defaultSource,\n      loadingIndicatorSource,\n      ...restProps\n    } = this.props;\n\n    const { resizeMode: resizeModeStyle, ...restStyle } = StyleSheet.flatten(style) || {};\n    const resizeMode = resizeModeProp ?? resizeModeStyle;\n\n    if ((defaultSource || loadingIndicatorSource) && !loggedDefaultSourceDeprecationWarning) {\n      console.warn(\n        '[expo-image]: `defaultSource` and `loadingIndicatorSource` props are deprecated, use `placeholder` instead'\n      );\n      loggedDefaultSourceDeprecationWarning = true;\n    }\n\n    return (\n      <ExpoImage\n        {...restProps}\n        style={restStyle}\n        source={resolveSources(source)}\n        placeholder={resolveSources(placeholder ?? defaultSource ?? loadingIndicatorSource)}\n        contentFit={resolveContentFit(contentFit, resizeMode)}\n        contentPosition={resolveContentPosition(contentPosition)}\n        transition={resolveTransition(transition, fadeDuration)}\n        nativeViewRef={this.nativeViewRef}\n      />\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}